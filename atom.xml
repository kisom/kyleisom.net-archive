<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[(cons 'hack *life*)]]></title>
  <link href="http://kisom.github.com/atom.xml" rel="self"/>
  <link href="http://kisom.github.com/"/>
  <updated>2012-02-21T22:26:25+01:00</updated>
  <id>http://kisom.github.com/</id>
  <author>
    <name><![CDATA[Kyle Isom]]></name>
    <email><![CDATA[coder@kyleisom.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Analytics Win]]></title>
    <link href="http://kisom.github.com/blog/2012/02/21/analytics-win/"/>
    <updated>2012-02-21T12:15:00+01:00</updated>
    <id>http://kisom.github.com/blog/2012/02/21/analytics-win</id>
    <content type="html"><![CDATA[<p>Inexplicably, for the longest time I was reticent to enable any sort of
analytics on my personal site. Partially because, to be honest, it&#8217;s not
as if my blog is well read (or so I assume, but soon I&#8217;ll have numbers
to back that claim up). As I try to get more involved in the world, I&#8217;ve
found my site is useful as a portfolio of sorts - not so much in the way
of &#8220;look at my sexy site&#8221; as &#8220;here&#8217;s the cool things I do&#8221;. I&#8217;ve noticed
that <a href="https://github.com">GitHub</a> has had some DDoS issues lately, and as
I host this site on my <a href="http://pages.github.com/">GitHub pages</a>, I wanted
to minimise any potential downtimes. I&#8217;d also noticed that some of my
pages were a bit on the slow side to load, as <a href="http://octopress.org/">Octopress</a>
appears to load quite a bit of javascript. I admit to being a fan of many of
the asides, and to have written some of my own.</p>

<!-- more -->


<p>In order to improve this situation, I took two steps:</p>

<ol>
<li>I enabled Google Analytics:
while I&#8217;m not a particular fan of feeding the privacy black hole with even more
data, it appears to be the only viable option at this time. I have been eyeing
<a href="http://haveamint.com/">Mint</a>, but I am abstaining from purchasing anything new
until I leave the Netherlands (in a little over a week) just to stay on the
safe side of my bank account. (30 USD may not sound like much, but that&#8217;s about
two days worth of d√∂ner or shawarma for dinner.)</li>
<li>I set up the site on CloudFlare.</li>
</ol>


<p>What I didn&#8217;t realise is that several of my older posts actually rank high on
Google&#8217;s search results; however, the link on Google points to the old url
from when I was using <a href="http://blaze.blackened.cz">blazeblogger</a>. Because the
content is actually useful documentation, I was able to set up redirects so
that the page is back online and people can use the information now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on Mountain Lion]]></title>
    <link href="http://kisom.github.com/blog/2012/02/17/thoughts-on-mountain-lion/"/>
    <updated>2012-02-17T20:16:00+01:00</updated>
    <id>http://kisom.github.com/blog/2012/02/17/thoughts-on-mountain-lion</id>
    <content type="html"><![CDATA[<p>One of the great things about paradigm shifts is we can throw out the old
and start from scratch, getting rid of all the old cruft that&#8217;s built up over
time. Computers are no different, and the tablet revolution has allowed us
to rethink a few things. It looks like Apple is finally converging some of the
lessons learned with iOS and OS X. So, let&#8217;s take a look at some of these
ideas:</p>

<!-- more -->


<h3>The App Store as a sole source of software</h3>

<p>I&#8217;ve heard a lot of complaints about this. The fact of the matter is that for
the average user, this makes sense. It limits the exposure due to malware. For
users who need expanded privileges, it is <em>extremely</em> easy to do. This follows
a principle of secure by default and requiring a decision on the user&#8217;s part
to open up their system. Does Apple benefit? Surely. However, in this case the
decision also benefits users.</p>

<h3>Messages</h3>

<p>We are surrounded by a variety of chat systems. On mobile phones, SMS reigns
supreme; while on the desktop, there are more chat protocols than you can
shake a stick at. Bringing Messages onto the desktop starts to unify the
two systems. While Jabber and AIM / OSCAR are two very common protocols, it
would be good to see Twitter and perhaps even IRC. (While I would love to
see SILC supported, I don&#8217;t expect to see that anytime soon). One other thing
missing is OTR support. While the iMessage compatibility is interesting, lack
of Twitter and OTR support make it not compelling enough for me to switch over
as my chat client<a href="#footnotes">*</a>.</p>

<h3>XCode</h3>

<p>Apple is now providing a much smaller download with just the compiler and
commandline tools needed to use <a href="http://mxcl.github.com/homebrew/">Homebrew</a>
or other package management systems.</p>

<h3>Conclusion</h3>

<p>We&#8217;re starting to see some of the benefits of tablet revolution folded back
into the desktop and laptop realm. For normal users, these changes create a
more streamlined experience and improve the overall security of the system.
For developers, there are some changes to simplify non-iOS / Cocoa developers&#8217;
setups. I think this is a step in the right direction.</p>

<p>Except that it&#8217;s called &#8220;Mountain Lion.&#8221;</p>

<h3><a name="footnotes">Footnotes</a></h3>

<ol>
<li>I currently use <a href="http://www.adium.im/">Adium</a> for my chat and twitter client.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Aquamacs for Clojure]]></title>
    <link href="http://kisom.github.com/blog/2012/02/02/setting-up-aquamacs-for-clojure/"/>
    <updated>2012-02-02T20:03:00+01:00</updated>
    <id>http://kisom.github.com/blog/2012/02/02/setting-up-aquamacs-for-clojure</id>
    <content type="html"><![CDATA[<p>It took me a bit to get my <a href="http://www.aquamacs.org">Aquamacs</a> install
up and ready to do <a href="http://www.clojure.org">Clojure</a>
and <a href="http://common-lisp.net/project/slime/">SLIME</a>, so I figured I&#8217;d jot
some notes down for future me and anyone who happens to be listening.</p>

<!-- more -->


<p>I assume Aquamacs has been downloaded and
<a href="https://github.com/technomancy/leiningen">leiningen</a> is installed. First,
in a terminal, you&#8217;ll need to install swank-clojure. As of today, the
current version is 1.4.0, but I strongly recommend you check the README
to see if there&#8217;s a new version out. In the shell,
<code>lein plugin install swank-clojure "1.4.0"</code>.</p>

<p>I use <a href="http://marmalade-repo.org/">Marmalade</a> for package management, so
the first thing to do is to add Marmalade to Aquamacs. Open up
<code>"~/Library/Preferences/Aquamacs\ Emacs/Preferences.el"</code> in your editor
of choice (I used <a href="https://code.google.com/p/macvim/">MacVim</a>), and add
the folowing:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; Marmalade</span>
</span><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;package</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">add-to-list</span> <span class="ss">&#39;package-archives</span>
</span><span class='line'>             <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;marmalade&quot;</span> <span class="o">.</span> <span class="s">&quot;http://marmalade-repo.org/packages/&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">package-initialize</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;m assuming you don&#8217;t have <code>package.el</code> installed yet, so make sure to</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>`curl "http://repo.or.cz/w/emacs.git/blob_plain/1a0a666f941c99882093d7bd08ced15033bc3f0c:/lisp/emacs-lisp/package.el" > ~/Library/Preferences/Aquamacs\ Emacs/package.el`</span></code></pre></td></tr></table></div></figure>


<p>Now fire up Aquamacs (or evaluate the additions to <code>Preferences.el</code> with
<code>C-x C-e</code>. <code>clojure-mode</code> needs to be installed, either via <code>M-x package-list-packages</code>,
and marking <code>clojure-mode</code> for installation (with <code>i</code>) and installing
(with <code>x</code>), or with <code>M-x package-refresh-contents</code> followed by
<code>M-x package-install clojure-mode</code>. I also like <code>paredit</code> but you
might not, it takes some getting used to.</p>

<p>Now, open up a file in your lein&#8217;d project and use <code>M-x clojure-jack-in</code>.
You might see some errors pop up in your <code>*Compile-Log*</code> buffer, but you
should be very shortly greeted with a REPL.</p>

<p>Happy hacking!</p>

<h2>The End Result</h2>

<p>Here&#8217;s a screenshot of how it turned out (click to view it full-size):
<a href="http://kisom.github.com/images/aquamacs-clojure.png"><img src="http://kisom.github.com/images/aquamacs-clojure.t.png" alt="aquamacs-clojure thumbnail" /></a></p>

<p>I usually run aquamacs full-screen with two panes, left-side for editing
source code and right-size for SLIME.</p>

<h2>References</h2>

<p>I patched together my knowledge from a couple of pages:</p>

<ul>
<li>Incanter&#8217;s article <a href="http://data-sorcery.org/2009/12/20/getting-started/">Setting up Clojure, Incanter, Emacs, Slime, Swank, and Paredit</a></li>
<li>The Doctor What&#8217;s article <a href="http://docwhat.org/2011/08/aquamacs-2-3a-and-marmalade/">Aquamacs 2.3a and Marmalade</a></li>
<li>Phil Hagelberg&#8217;s <a href="https://github.com/technomancy/swank-clojure">swank-clojure</a> <a href="https://github.com/technomancy/swank-clojure/blob/master/README.md">README</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Set Theory]]></title>
    <link href="http://kisom.github.com/blog/2012/02/01/using-set-theory/"/>
    <updated>2012-02-01T20:45:00+01:00</updated>
    <id>http://kisom.github.com/blog/2012/02/01/using-set-theory</id>
    <content type="html"><![CDATA[<p>In the <a href="http://kisom.github.com/blog/2012/01/23/basic-set-theory/">last post</a>, we took a look at the
basics of set theory. Now, I&#8217;d like to take a look at how to actually make use
of it in your code.</p>

<p>One of the issues with practically using the code in the last post is that the
initial subsets were defined arbitrarily and not derived from the superset. In
this post, all the examples are derived from the superset. We&#8217;ll use a couple
techniques for doing this illustrate some of the various ways to do it.</p>

<p>In Python, we&#8217;ll use an object-oriented approach, creating a few classes and
working on Book objects. In Clojure, we&#8217;ll use records. Though we&#8217;ll approach
language a little differently, I  hope they still bring clarity to the subject.</p>

<!-- more -->


<h2>Foundation: A Collection of Books</h2>

<p>The first thing we need to do in a useful system is determine what we mean by
book. The last post represented each book as a string denoting the title; while
that worked for a brief introduction, in practise it gives us very limited
options for building subsets. What we need to do is identify more information,
called attributes or fields, that give us the information we need to build our
subsets.</p>

<h3>Python</h3>

<p>In Python, we&#8217;ll approach this using a class. I&#8217;ve saved them in <code>library.py</code>
in the <a href="http://kisom.github.com/downloads/code/using-set-theory/py_example.tar.gz">Python example code</a></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># used to validate the list of formats passed to a book</span>
</span><span class='line'><span class="n">SUPPORTED_FORMATS</span> <span class="o">=</span> <span class="p">[</span> <span class="s">&#39;epub&#39;</span><span class="p">,</span> <span class="s">&#39;mobi&#39;</span><span class="p">,</span> <span class="s">&#39;pdf&#39;</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Book</span><span class="p">:</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Represents a book, with title, author, and summary text fields. A book</span>
</span><span class='line'><span class="sd">    should be given a list of formats supported as a dictionary in the form</span>
</span><span class='line'><span class="sd">    {fmt: True}, and optionally a list of tags.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>    <span class="n">author</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>    <span class="n">summary</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>    <span class="n">formats</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>    <span class="n">tags</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">author</span><span class="p">,</span> <span class="n">summary</span><span class="p">,</span> <span class="n">formats</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;Initalise a new book. The format shoud be a dictiontary in</span>
</span><span class='line'><span class="sd">        the form { &#39;epub&#39;: True } where each key is a format that we</span>
</span><span class='line'><span class="sd">        have the book in.&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">title</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">author</span> <span class="o">=</span> <span class="n">author</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">summary</span> <span class="o">=</span> <span class="n">summary</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">assert</span><span class="p">(</span><span class="ow">not</span> <span class="bp">False</span> <span class="ow">in</span> <span class="p">[</span><span class="n">fmt</span> <span class="ow">in</span> <span class="n">SUPPORTED_FORMATS</span> <span class="k">for</span> <span class="n">fmt</span> <span class="ow">in</span> <span class="n">formats</span><span class="p">])</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">formats</span> <span class="o">=</span> <span class="n">formats</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Return string representation of a book.</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">out</span> <span class="o">=</span> <span class="s">&quot;</span><span class="si">%s</span><span class="se">\n\t</span><span class="s">by </span><span class="si">%s</span><span class="se">\n\t</span><span class="si">%s</span><span class="se">\n\t</span><span class="s">formats: </span><span class="si">%s</span><span class="s">&quot;</span>
</span><span class='line'>        <span class="n">out</span> <span class="o">=</span> <span class="n">out</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="s">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">author</span><span class="p">),</span>
</span><span class='line'>                     <span class="bp">self</span><span class="o">.</span><span class="n">summary</span><span class="p">,</span> <span class="s">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">formats</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">out</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ll also want a <code>BookCollection</code> class to store a set of books and provide
some utility methods for dealing with the collection:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">BookCollection</span><span class="p">:</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Representation of a collection of books. Internally, they are stored</span>
</span><span class='line'><span class="sd">    as a set. It&#39;s main utility is in its helper methods that make accessing</span>
</span><span class='line'><span class="sd">    the books easier.&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">books</span><span class="p">,</span> <span class="n">book_filter</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;Instantiate a collection of books. It expects a collection of</span>
</span><span class='line'><span class="sd">        books, e.g. a list or set, and optionally takes a filter to</span>
</span><span class='line'><span class="sd">        only put some of the books into the collection.&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">book_filter</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">books</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="n">book</span> <span class="k">for</span> <span class="n">book</span> <span class="ow">in</span> <span class="n">books</span> <span class="k">if</span> <span class="n">book_filter</span><span class="p">(</span><span class="n">book</span><span class="p">)])</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">books</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">books</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">books</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">show_titles</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;Print a list of titles in the collection. If the description</span>
</span><span class='line'><span class="sd">        argument is supplied, it is printed first and all the books are</span>
</span><span class='line'><span class="sd">        printed with a preceding tab.&quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">description</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="n">description</span>
</span><span class='line'>            <span class="n">fmt</span> <span class="o">=</span> <span class="s">&#39;</span><span class="se">\t</span><span class="si">%s</span><span class="s">&#39;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">fmt</span> <span class="o">=</span> <span class="s">&#39;</span><span class="si">%s</span><span class="s">&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">book</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">books</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="n">fmt</span> <span class="o">%</span> <span class="p">(</span><span class="n">book</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_titles</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;Return a list of titles in the collection.&quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">book</span><span class="o">.</span><span class="n">title</span> <span class="k">for</span> <span class="n">book</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">books</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>These two classes are very short (and we&#8217;ll extend them later to make them
more useful) but provide a solid foundation to begin building on. You&#8217;ll want
to load the books in the class.</p>

<p>To load an example book, you would do use code similar to this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">books</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span>
</span><span class='line'>    <span class="n">Book</span><span class="p">(</span><span class="s">&quot;Natural Language Processing with Python&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="p">[</span><span class="s">&#39;Steven Bird&#39;</span><span class="p">,</span> <span class="s">&#39;Ewan Klein&#39;</span><span class="p">,</span> <span class="s">&#39;Edward Loper&#39;</span><span class="p">],</span>
</span><span class='line'>         <span class="s">&#39;A highly accessible introduction to natural language processing.&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="p">[</span><span class="s">&#39;mobi&#39;</span><span class="p">,</span> <span class="p">]),</span>
</span><span class='line'>    <span class="n">Book</span><span class="p">(</span><span class="s">&#39;Learning OpenCV&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;Gary Bradski&#39;</span><span class="p">,</span> <span class="s">&#39;Adrian Kaehler&#39;</span><span class="p">],</span>
</span><span class='line'>         <span class="s">&#39;Puts you in the middle of the rapidly expanding field of &#39;</span> <span class="o">+</span>
</span><span class='line'>         <span class="s">&#39;computer vision.&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="p">[</span><span class="s">&#39;pdf&#39;</span><span class="p">,])</span>
</span><span class='line'>    <span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Manually entering all these details is tedious. Fortunately for you, I put up
with the tedium to create a sample dataset in <code>sample_library.py</code>. You use the
function <code>get_library()</code> from the file to use it.</p>

<h3>Clojure</h3>

<p>In Clojure, we&#8217;ll use a record to define a book:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; define a book record</span>
</span><span class='line'><span class="p">(</span><span class="nf">defrecord</span> <span class="nv">Book</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">^</span><span class="p">{</span> <span class="nv">:doc</span> <span class="s">&quot;Representation of a book. title is a string, authors a vector, </span>
</span><span class='line'><span class="s">summary is text, and formats is a vector.&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">title</span> <span class="nv">authors</span> <span class="nv">summary</span> <span class="nv">formats</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re not using objects, so we don&#8217;t need a record to store a collection.
(If we wanted to validate formats, we could do it using a Ref and a
:validator argument - that&#8217;s left as an exercise for the reader). I have,
however, defined a few helper functions.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">in?</span>
</span><span class='line'>  <span class="s">&quot;Check whether val is in coll.&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">coll</span> <span class="nv">val</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">map? </span><span class="nv">coll</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">val </span><span class="nv">coll</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">not= </span><span class="mi">-1</span> <span class="p">(</span><span class="o">.</span><span class="nv">indexOf</span> <span class="nv">coll</span> <span class="nv">val</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; format validation</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">valid-format?</span>
</span><span class='line'>  <span class="s">&quot;Check a record or object with a :formats key to ensure it fits the list</span>
</span><span class='line'><span class="s">of valid formats.&quot;</span>
</span><span class='line'>  <span class="o">#</span><span class="p">(</span><span class="nv">or</span> <span class="p">(</span><span class="nf">in?</span> <span class="p">(</span><span class="nf">:formats</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">:epub</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">in?</span> <span class="p">(</span><span class="nf">:formats</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">:mobi</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">in?</span> <span class="p">(</span><span class="nf">:formats</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">:pdf</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">list-titles</span>
</span><span class='line'>  <span class="s">&quot;Print a list of titles of a book.&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">books</span> <span class="nv">&amp;</span> <span class="nv">description</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">titles</span>  <span class="p">(</span><span class="nb">map </span><span class="nv">:title</span> <span class="nv">books</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="nv">description</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">do</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">println </span><span class="nv">description</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">title</span> <span class="nv">titles</span><span class="p">]</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">println </span><span class="s">&quot;\t&quot;</span> <span class="nv">title</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">title</span> <span class="nv">titles</span><span class="p">]</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">println </span><span class="nv">title</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">get-titles</span>
</span><span class='line'>  <span class="s">&quot;Get a list of titles of a book collection.&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">books</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">map </span><span class="nv">:title</span> <span class="nv">books</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">book-str</span>
</span><span class='line'>  <span class="s">&quot;Return a book as a string.&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">book</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;%s\n(by %s\n\t%s\n\tformats: %s\n&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">str </span><span class="p">(</span><span class="nf">:title</span> <span class="nv">book</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">join </span><span class="s">&quot;, &quot;</span> <span class="p">(</span><span class="nf">:authors</span> <span class="nv">book</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">str </span><span class="p">(</span><span class="nf">:summary</span> <span class="nv">book</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">join </span><span class="s">&quot;, &quot;</span> <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="ss">&#39;name</span> <span class="p">(</span><span class="nf">:format</span> <span class="nv">book</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Adding books is a simple affair:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">set </span>
</span><span class='line'>   <span class="p">[(</span><span class="nf">Book</span><span class="o">.</span> <span class="s">&quot;Natural Language Processing with Python&quot;</span>
</span><span class='line'>           <span class="p">[</span><span class="s">&quot;Steven Bird&quot;</span> <span class="s">&quot;Ewan Klein&quot;</span> <span class="s">&quot;Edward Loper&quot;</span> <span class="p">]</span>
</span><span class='line'>           <span class="s">&quot;A highly accessible introduction to natural language processing.&quot;</span>
</span><span class='line'>           <span class="p">[</span> <span class="nv">:mobi</span> <span class="p">])</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">Book</span><span class="o">.</span> <span class="s">&quot;Learning OpenCV&quot;</span> <span class="p">[</span><span class="s">&quot;Gary Bradski&quot;</span> <span class="s">&quot;Adrian Kaehler&quot;</span><span class="p">]</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">str </span><span class="s">&quot;Puts you in the middle of the rapidly expanding field of &quot;</span>
</span><span class='line'>                <span class="s">&quot;computer vision&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">[</span> <span class="nv">:pdf</span> <span class="p">])])</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ve loaded a sample dataset into the <code>sample_library.clj</code> source file, available
from the <a href="http://kisom.github.com/downloads/code/using-set-theory/clj-example.tar.gz">Clojure example code</a>.</p>

<h2>Building Subsets</h2>

<p>Now that we have a way to represent a book (with more useful information than
simply the title), we can start to build some subsets. Let&#8217;s start by
looking at <em>set notation</em> (aka how to write a set both mathematically and
in code), and then continue on to recreate the two subsets in the previous
article, <code>epub</code> and <code>mobi</code>.</p>

<h3>Set Notation</h3>

<p>In <a href="https://en.wikipedia.org/wiki/Set_notation">set notation</a>, we denote
a set by writing:</p>

<blockquote><p>A = { x | x ‚àà N, x &lt; 10 }</p></blockquote>

<p>which means the set of numbers that are members of (‚àà means <em>&#8216;element of&#8217;</em>)
the set of positive integers and are less than 10. You might generalise this
as such:</p>

<blockquote><p>given the universal set S, which defines all the elements under
consideration, and some predicate P which is a function that returns either
true if the element satisfies the predicate (and thus should be included
in the set):<br>
{ x | x ‚àà S, P(x) }</p></blockquote>

<p>We would express this set as:</p>

<blockquote><p>A = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }</p></blockquote>

<p>In Python, this is easily expressed with a
<a href="http://www.python.org/dev/peps/pep-0202/">list comprehension</a> (see also
the <a href="http://docs.python.org/reference/expressions.html#list-displays">Python documentation</a>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># a Python list comprehension isn&#39;t aware that once N is above 10, it should</span>
</span><span class='line'><span class="c"># terminate, so we cheat and create a list of integers from 1 to 100.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># define N</span>
</span><span class='line'><span class="n">N</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># build the set</span>
</span><span class='line'><span class="n">A</span> <span class="o">=</span> <span class="p">[</span> <span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">N</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">10</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in Clojure, we could use something similar:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">;;</span> <span class="n">define</span> <span class="n">N</span>
</span><span class='line'><span class="p">(</span><span class="k">def</span> <span class="nf">N</span> <span class="p">(</span><span class="n">iterate</span> <span class="n">inc</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def</span> <span class="nf">N</span> <span class="c">#^{:doc &quot;Representation of the set of positive integers.&quot;} N)</span>
</span><span class='line'>
</span><span class='line'><span class="p">;;</span> <span class="n">build</span> <span class="n">the</span> <span class="nb">set</span>
</span><span class='line'><span class="p">(</span><span class="nb">filter</span> <span class="c">#(&lt; % 10) N)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Building the Subsets</h3>

<p>As mentioned earlier, I have already built sample datasets for both Python
and Clojure, so be sure to use those and save yourself from having to build
your own just yet!</p>

<h4>Python</h4>

<p>In Python, we can use the built-in <code>filter</code> function to build a list. It will
serve as our predicate function.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">library</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sample_library</span>
</span><span class='line'>
</span><span class='line'><span class="c"># my_library is our superset</span>
</span><span class='line'><span class="n">MY_LIBRARY</span> <span class="o">=</span> <span class="n">sample_library</span><span class="o">.</span><span class="n">get_library</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># build our filters</span>
</span><span class='line'><span class="n">IS_EPUB</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">book</span><span class="p">:</span> <span class="s">&#39;epub&#39;</span> <span class="ow">in</span> <span class="n">book</span><span class="o">.</span><span class="n">formats</span>
</span><span class='line'><span class="n">IS_MOBI</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">book</span><span class="p">:</span> <span class="s">&#39;mobi&#39;</span> <span class="ow">in</span> <span class="n">book</span><span class="o">.</span><span class="n">formats</span>
</span><span class='line'>
</span><span class='line'><span class="c"># build the subsets</span>
</span><span class='line'><span class="n">EPUB</span> <span class="o">=</span> <span class="n">library</span><span class="o">.</span><span class="n">BookCollection</span><span class="p">(</span><span class="n">MY_LIBRARY</span><span class="o">.</span><span class="n">books</span><span class="p">,</span> <span class="n">IS_EPUB</span><span class="p">)</span>
</span><span class='line'><span class="n">MOBI</span> <span class="o">=</span> <span class="n">library</span><span class="o">.</span><span class="n">BookCollection</span><span class="p">(</span><span class="n">MY_LIBRARY</span><span class="o">.</span><span class="n">books</span><span class="p">,</span> <span class="n">IS_MOBI</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives me the output:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="n">formats</span><span class="o">.</span><span class="n">EPUB</span><span class="o">.</span><span class="n">show_titles</span><span class="p">(</span><span class="s">&quot;books in epub format:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">books</span> <span class="ow">in</span> <span class="n">epub</span> <span class="n">format</span><span class="p">:</span>
</span><span class='line'>  <span class="n">Code</span> <span class="n">Complete</span>
</span><span class='line'>  <span class="n">The</span> <span class="n">Joy</span> <span class="n">of</span> <span class="n">Clojure</span>
</span><span class='line'>  <span class="n">Mining</span> <span class="n">the</span> <span class="n">Social</span> <span class="n">Web</span>
</span><span class='line'>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">8</span><span class="p">]:</span> <span class="n">formats</span><span class="o">.</span><span class="n">MOBI</span><span class="o">.</span><span class="n">show_titles</span><span class="p">(</span><span class="s">&quot;books in mobi format:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">books</span> <span class="ow">in</span> <span class="n">mobi</span> <span class="n">format</span><span class="p">:</span>
</span><span class='line'>  <span class="n">Introduction</span> <span class="n">to</span> <span class="n">Information</span> <span class="n">Retrieval</span>
</span><span class='line'>  <span class="n">Code</span> <span class="n">Complete</span>
</span><span class='line'>  <span class="n">Natural</span> <span class="n">Language</span> <span class="n">Processing</span> <span class="k">with</span> <span class="n">Python</span>
</span><span class='line'>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">9</span><span class="p">]:</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you recall the definition of <code>BookCollection</code>, the filter method is
called as <code>filter(predicate, collection)</code>. In the case of the <code>mobi</code>
subset, it filters out anything that fails the test
<code>'mobi' in book.formats</code>. We might write this as</p>

<blockquote><p>{ book | book ‚àà <code>my_library</code>, <code>is_mobi(book)</code> }</p></blockquote>

<p>in set notation. I&#8217;ve predefined some filters in the file <code>formats.py</code>
which is again in the <a href="http://kisom.github.com/downloads/code/using-set-theory/py_example.tar.gz">example code</a>.</p>

<h4>Clojure</h4>

<p>Likewise, Clojure has a built-in filter function, in the form
<code>(filter pred coll)</code>. We&#8217;ll use two
<a href="http://clojuredocs.org/clojure_core/clojure.core/fn">anonymous functions</a>
to do our filtering:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">use</span> <span class="ss">&#39;using_set_theory</span><span class="o">.</span><span class="nv">library</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">use</span> <span class="ss">&#39;using_set_theory</span><span class="o">.</span><span class="nv">sample_library</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">epub?</span> <span class="o">#</span><span class="p">(</span><span class="nv">in?</span> <span class="p">(</span><span class="nf">:formats</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">:epub</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">mobi?</span> <span class="o">#</span><span class="p">(</span><span class="nv">in?</span> <span class="p">(</span><span class="nf">:formats</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">:mobi</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">my-library</span> <span class="p">(</span><span class="nf">get-library</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">epub</span> <span class="p">(</span><span class="nb">filter </span><span class="nv">epub?</span> <span class="nv">my-library</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">mobi</span> <span class="p">(</span><span class="nb">filter </span><span class="nv">mobi?</span> <span class="nv">my-library</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">list-titles</span> <span class="nv">epub</span> <span class="s">&quot;list of books in epub format:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">list-titles</span> <span class="nv">mobi</span> <span class="s">&quot;list of books in mobi format:&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the repl, this gives me:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">using_set_theory</span><span class="o">.</span><span class="nv">core=&gt;</span> <span class="p">(</span><span class="nf">list-titles</span> <span class="nv">epub</span> <span class="s">&quot;list of books in epub format:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">list </span><span class="nv">of</span> <span class="nv">books</span> <span class="nv">in</span> <span class="nv">epub</span> <span class="nv">format:</span><span class="p">)</span>
</span><span class='line'>   <span class="nv">The</span> <span class="nv">Joy</span> <span class="nv">of</span> <span class="nv">Clojure</span>
</span><span class='line'>   <span class="nv">Mining</span> <span class="nv">the</span> <span class="nv">Social</span> <span class="nv">Web</span>
</span><span class='line'>   <span class="nv">Code</span> <span class="nv">Complete</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'><span class="nv">using_set_theory</span><span class="o">.</span><span class="nv">core=&gt;</span> <span class="p">(</span><span class="nf">list-titles</span> <span class="nv">mobi</span> <span class="s">&quot;list of books in mobi format:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">list </span><span class="nv">of</span> <span class="nv">books</span> <span class="nv">in</span> <span class="nv">mobi</span> <span class="nv">format:</span><span class="p">)</span>
</span><span class='line'>   <span class="nv">Introduction</span> <span class="nv">to</span> <span class="nv">Information</span> <span class="nv">Retrieval</span>
</span><span class='line'>   <span class="nv">Natural</span> <span class="nv">Language</span> <span class="nv">Processing</span> <span class="nv">with</span> <span class="nv">Python</span>
</span><span class='line'>   <span class="nv">Code</span> <span class="nv">Complete</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'><span class="nv">using_set_theory</span><span class="o">.</span><span class="nv">core=&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ve put these filters in the <code>filters.clj</code> source file, along with definitions
for <code>epub-books</code> and <code>mobi-books</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">ns</span> <span class="nv">using_set_theory</span><span class="o">.</span><span class="nv">filters</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">:use</span> <span class="p">[</span><span class="nv">using_set_theory</span><span class="o">.</span><span class="nv">library</span><span class="p">]</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">using_set_theory</span><span class="o">.</span><span class="nv">sample_library</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">epub?</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">^</span><span class="p">{</span><span class="nv">:doc</span> <span class="s">&quot;Filter a collection of books by those supporting the epub format.&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">book</span><span class="p">]</span> <span class="p">(</span><span class="nf">in?</span> <span class="p">(</span><span class="nf">:formats</span> <span class="nv">book</span><span class="p">)</span> <span class="nv">:epub</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">mobi?</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">^</span><span class="p">{</span><span class="nv">:doc</span> <span class="s">&quot;Filter a collection of books by those supporting the mobi format.&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">book</span><span class="p">]</span> <span class="p">(</span><span class="nf">in?</span> <span class="p">(</span><span class="nf">:formats</span> <span class="nv">book</span><span class="p">)</span> <span class="nv">:mobi</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn- </span><span class="nv">get-epub</span>
</span><span class='line'>  <span class="s">&quot;Takes a collection of books and returns the list of books in epub format.&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">books</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">filter </span><span class="nv">epub?</span> <span class="nv">books</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn- </span><span class="nv">get-mobi</span>
</span><span class='line'>  <span class="s">&quot;Takes a collection of books and returns the list of book in mobi format.&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">books</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">filter </span><span class="nv">mobi?</span> <span class="nv">books</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">epub-books</span> <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nf">get-epub</span> <span class="p">(</span><span class="nf">get-library</span><span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">mobi-books</span> <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nf">get-mobi</span> <span class="p">(</span><span class="nf">get-library</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Parallels with SQL</h2>

<p>This introduction of filters might remind you of SQL, and for good reason.
<a href="https://en.wikipedia.org/wiki/Edgar_F._Codd">Edgar Codd</a> designed SQL with
set theory in mind. You can think of tables as sets (provided, of course,
proper data preparation is done to ensure there are no duplicates in the
database), and operations like <code>SELECT</code> return subsets. For example, if we
were storing the books in a library, we would write something like</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">books</span> <span class="k">WHERE</span> <span class="n">has_epub</span> <span class="o">=</span> <span class="k">TRUE</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Moving On</h2>

<p>Now that we have a programmatic way to build subsets, we can automate the entire
set of sequences in the <a href="http://kisom.github.com/blog/2012/01/23/basic-set-theory/">last post</a>:</p>

<h3>Python</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">formats</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">library</span>
</span><span class='line'>
</span><span class='line'><span class="n">either_format</span> <span class="o">=</span> <span class="nb">set</span><span class="o">.</span><span class="n">union</span><span class="p">(</span><span class="n">formats</span><span class="o">.</span><span class="n">EPUB</span><span class="o">.</span><span class="n">books</span><span class="p">,</span> <span class="n">formats</span><span class="o">.</span><span class="n">MOBI</span><span class="o">.</span><span class="n">books</span><span class="p">)</span>
</span><span class='line'><span class="n">either_format</span> <span class="o">=</span> <span class="n">library</span><span class="o">.</span><span class="n">BookCollection</span><span class="p">(</span><span class="n">either_format</span><span class="p">)</span>
</span><span class='line'><span class="n">either_format</span><span class="o">.</span><span class="n">show_titles</span><span class="p">(</span><span class="s">&quot;books in either format:&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">both_formats</span> <span class="o">=</span> <span class="nb">set</span><span class="o">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">formats</span><span class="o">.</span><span class="n">EPUB</span><span class="o">.</span><span class="n">books</span><span class="p">,</span> <span class="n">formats</span><span class="o">.</span><span class="n">MOBI</span><span class="o">.</span><span class="n">books</span><span class="p">)</span>
</span><span class='line'><span class="n">both_formats</span> <span class="o">=</span> <span class="n">library</span><span class="o">.</span><span class="n">BookCollection</span><span class="p">(</span><span class="n">both_formats</span><span class="p">)</span>
</span><span class='line'><span class="n">both_formats</span><span class="o">.</span><span class="n">show_titles</span><span class="p">(</span><span class="s">&quot;books in both formats:&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>which gives me the results:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">31</span><span class="p">]:</span> <span class="n">either_format</span><span class="o">.</span><span class="n">show_titles</span><span class="p">(</span><span class="s">&quot;books in either format:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">Out</span><span class="p">[</span><span class="mi">31</span><span class="p">]:</span>
</span><span class='line'><span class="n">books</span> <span class="ow">in</span> <span class="n">either</span> <span class="n">format</span><span class="p">:</span>
</span><span class='line'>  <span class="n">Code</span> <span class="n">Complete</span>
</span><span class='line'>  <span class="n">Mining</span> <span class="n">the</span> <span class="n">Social</span> <span class="n">Web</span>
</span><span class='line'>  <span class="n">Natural</span> <span class="n">Language</span> <span class="n">Processing</span> <span class="k">with</span> <span class="n">Python</span>
</span><span class='line'>  <span class="n">Introduction</span> <span class="n">to</span> <span class="n">Information</span> <span class="n">Retrieval</span>
</span><span class='line'>  <span class="n">The</span> <span class="n">Joy</span> <span class="n">of</span> <span class="n">Clojure</span>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">32</span><span class="p">]:</span> <span class="n">both_formats</span><span class="o">.</span><span class="n">show_titles</span><span class="p">(</span><span class="s">&quot;books in both formats:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">Out</span><span class="p">[</span><span class="mi">32</span><span class="p">]:</span>
</span><span class='line'><span class="n">books</span> <span class="ow">in</span> <span class="n">both</span> <span class="n">formats</span><span class="p">:</span>
</span><span class='line'>        <span class="n">Code</span> <span class="n">Complete</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Clojure</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;clojure</span><span class="o">.</span><span class="nv">set</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">use</span> <span class="ss">&#39;using_set_theory</span><span class="o">.</span><span class="nv">filters</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">use</span> <span class="ss">&#39;using_set_theory</span><span class="o">.</span><span class="nv">library</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">either-format</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">clojure</span><span class="o">.</span><span class="nv">set/union</span> <span class="nv">epub-books</span> <span class="nv">mobi-books</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">both-formats</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">clojure</span><span class="o">.</span><span class="nv">set/intersection</span> <span class="nv">epub-books</span> <span class="nv">mobi-books</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">show-titles</span> <span class="nv">either-format</span> <span class="s">&quot;books in either format:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">show-titles</span> <span class="nv">both-formats</span> <span class="s">&quot;books in both formats:&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the Clojure REPL, I get the following output:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">using_set_theory</span><span class="o">.</span><span class="nv">core=&gt;</span> <span class="p">(</span><span class="nf">show-titles</span> <span class="nv">either-format</span> <span class="s">&quot;books in either format:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">books</span> <span class="nv">in</span> <span class="nv">either</span> <span class="nv">format:</span><span class="p">)</span>
</span><span class='line'>   <span class="nv">Introduction</span> <span class="nv">to</span> <span class="nv">Information</span> <span class="nv">Retrieval</span>
</span><span class='line'>   <span class="nv">The</span> <span class="nv">Joy</span> <span class="nv">of</span> <span class="nv">Clojure</span>
</span><span class='line'>   <span class="nv">Natural</span> <span class="nv">Language</span> <span class="nv">Processing</span> <span class="nv">with</span> <span class="nv">Python</span>
</span><span class='line'>   <span class="nv">Code</span> <span class="nv">Complete</span>
</span><span class='line'>   <span class="nv">Mining</span> <span class="nv">the</span> <span class="nv">Social</span> <span class="nv">Web</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'><span class="nv">using_set_theory</span><span class="o">.</span><span class="nv">core=&gt;</span> <span class="p">(</span><span class="nf">show-titles</span> <span class="nv">both-formats</span> <span class="s">&quot;books in both formats:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">books</span> <span class="nv">in</span> <span class="nv">both</span> <span class="nv">formats:</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">Code</span> <span class="nv">Complete</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'><span class="nv">using_set_theory</span><span class="o">.</span><span class="nv">core=&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Sets v. Lists</h2>

<p>Remember that one of the key attributes of a set is that each member is distinct.
Let&#8217;s compare a set with a list; we&#8217;ll do this with an intersection.</p>

<h3>Python</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">library</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">formats</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">sample_library</span> <span class="kn">import</span> <span class="n">get_library</span>
</span><span class='line'>
</span><span class='line'><span class="n">epub_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">book</span> <span class="k">for</span> <span class="n">book</span> <span class="ow">in</span> <span class="n">get_library</span><span class="p">()</span><span class="o">.</span><span class="n">books</span>
</span><span class='line'>             <span class="k">if</span> <span class="s">&#39;epub&#39;</span> <span class="ow">in</span> <span class="n">book</span><span class="o">.</span><span class="n">formats</span><span class="p">]</span>
</span><span class='line'><span class="n">mobi_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">book</span> <span class="k">for</span> <span class="n">book</span> <span class="ow">in</span> <span class="n">get_library</span><span class="p">()</span><span class="o">.</span><span class="n">books</span>
</span><span class='line'>             <span class="k">if</span> <span class="s">&#39;mobi&#39;</span> <span class="ow">in</span> <span class="n">book</span><span class="o">.</span><span class="n">formats</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">both_formats</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="n">both_formats</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">epub_list</span><span class="p">))</span>
</span><span class='line'><span class="n">both_formats</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">mobi_list</span><span class="p">))</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;books in both formats:&#39;</span>
</span><span class='line'><span class="k">for</span> <span class="n">book</span> <span class="ow">in</span> <span class="n">both_formats</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;</span><span class="se">\t</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">book</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>The result:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>books in both formats:
</span><span class='line'>  Mining the Social Web
</span><span class='line'>  Code Complete
</span><span class='line'>  The Joy of Clojure
</span><span class='line'>  Code Complete
</span><span class='line'>  Natural Language Processing with Python
</span><span class='line'>  Introduction to Information Retrieval</span></code></pre></td></tr></table></div></figure>


<h3>Clojure</h3>

<p>In Clojure, we&#8217;ll use the vector type, which is like a list but the first
element isn&#8217;t evaluated:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">use</span> <span class="ss">&#39;using_set_theory</span><span class="o">.</span><span class="nv">library</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">use</span> <span class="ss">&#39;using_set_theory</span><span class="o">.</span><span class="nv">sample_library</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">use</span> <span class="ss">&#39;using_set_theory</span><span class="o">.</span><span class="nv">filters</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">use</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">clojure</span><span class="o">.</span><span class="nv">contrib</span><span class="o">.</span><span class="nv">seq-utils</span> <span class="nv">:only</span> <span class="p">[</span><span class="nv">includes?</span><span class="p">]])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">epub-list</span> <span class="p">(</span><span class="nf">vec</span> <span class="p">(</span><span class="nb">map </span><span class="nv">:title</span> <span class="nv">epub-books</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">mobi-list</span> <span class="p">(</span><span class="nf">vec</span> <span class="p">(</span><span class="nb">map </span><span class="nv">:title</span> <span class="nv">mobi-books</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">both-list</span> <span class="p">(</span><span class="nb">concat </span><span class="nv">epub-list</span> <span class="nv">mobi-list</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which yields:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>clojure.core=> (doseq [title (union epub-list mobi-list)] (println title))
</span><span class='line'>The Joy of Clojure
</span><span class='line'>Code Complete
</span><span class='line'>Mining the Social Web
</span><span class='line'>Introduction to Information Retrieval
</span><span class='line'>Natural Language Processing with Python
</span><span class='line'>nil
</span><span class='line'>clojure.core=></span></code></pre></td></tr></table></div></figure>


<h3>So what?</h3>

<p>You&#8217;ll notice &#8220;Code Complete&#8221; shows up twice in the list. The advantage of sets
here is that only unique items are returned. A union is actually the list of
elements in both sets, <em>minus</em> the list of items that are in both
sets.</p>

<h3>A Second Stab: Python</h3>

<p>Implementing the set operations:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">in_both</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">a</span> <span class="ow">and</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">b</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">intersect</span><span class="p">(</span><span class="n">seta</span><span class="p">,</span> <span class="n">setb</span><span class="p">):</span>
</span><span class='line'>    <span class="n">both_list</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">both_list</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">seta</span><span class="p">)</span>
</span><span class='line'>    <span class="n">both_list</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">setb</span><span class="p">)</span>
</span><span class='line'>    <span class="n">intersect_list</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">temp_list</span> <span class="o">=</span> <span class="n">both_list</span><span class="p">[:]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="ow">not</span> <span class="n">temp_list</span> <span class="o">==</span> <span class="p">[]:</span>
</span><span class='line'>        <span class="n">element</span> <span class="o">=</span> <span class="n">temp_list</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">intersect_list</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">in_both</span><span class="p">(</span><span class="n">element</span><span class="p">,</span> <span class="n">seta</span><span class="p">,</span> <span class="n">setb</span><span class="p">):</span>
</span><span class='line'>                <span class="n">intersect_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">intersect_list</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">union</span><span class="p">(</span><span class="n">seta</span><span class="p">,</span> <span class="n">setb</span><span class="p">):</span>
</span><span class='line'>    <span class="n">both_list</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">both_list</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">seta</span><span class="p">)</span>
</span><span class='line'>    <span class="n">both_list</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">setb</span><span class="p">)</span>
</span><span class='line'>    <span class="n">intersect_list</span> <span class="o">=</span> <span class="n">intersect</span><span class="p">(</span><span class="n">seta</span><span class="p">,</span> <span class="n">setb</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="ow">not</span> <span class="n">intersect_list</span> <span class="o">==</span> <span class="p">[]:</span>
</span><span class='line'>        <span class="n">element</span> <span class="o">=</span> <span class="n">intersect_list</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">both_list</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">element</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="n">both_list</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">both_list</span>
</span></code></pre></td></tr></table></div></figure>


<p>Applying this to our lists:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">30</span><span class="p">]:</span> <span class="n">union</span><span class="p">(</span><span class="n">epub_list</span><span class="p">,</span> <span class="n">mobi_list</span><span class="p">)</span>
</span><span class='line'><span class="n">Out</span><span class="p">[</span><span class="mi">30</span><span class="p">]:</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;Mining the Social Web&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s">&#39;The Joy of Clojure&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s">&#39;Code Complete&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s">&#39;Introduction to Information Retrieval&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s">&#39;Natural Language Processing with Python&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">31</span><span class="p">]:</span>
</span></code></pre></td></tr></table></div></figure>


<h3>A Second Stab: Clojure</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">ns</span> <span class="nv">myset</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">:use</span> <span class="p">[</span><span class="nv">clojure</span><span class="o">.</span><span class="nv">contrib</span><span class="o">.</span><span class="nv">seq-utils</span> <span class="nv">:only</span> <span class="p">[</span><span class="nv">includes?</span><span class="p">]]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">unique?</span> <span class="p">[</span><span class="nv">el</span> <span class="nv">ulst</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nv">=</span> <span class="nv">%</span> <span class="nv">el</span><span class="p">)</span> <span class="nv">ulst</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">get-intersect</span> <span class="p">[</span><span class="nv">ilist</span> <span class="nv">seta</span> <span class="nv">setb</span> <span class="nv">both-list</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">empty?</span> <span class="nv">both-list</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">ilist</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">element</span> <span class="p">(</span><span class="nb">first </span><span class="nv">both-list</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nf">includes?</span> <span class="nv">seta</span> <span class="nv">element</span><span class="p">)</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">includes?</span> <span class="nv">setb</span> <span class="nv">element</span><span class="p">)</span>
</span><span class='line'>               <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nf">includes?</span> <span class="nv">ilist</span> <span class="nv">element</span><span class="p">)))</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">get-intersect</span> <span class="p">(</span><span class="nb">conj </span><span class="nv">ilist</span> <span class="nv">element</span><span class="p">)</span> <span class="nv">seta</span> <span class="nv">setb</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">both-list</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">get-intersect</span> <span class="nv">ilist</span> <span class="nv">seta</span> <span class="nv">setb</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">both-list</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">check-unique</span> <span class="p">[</span><span class="nv">ilist</span> <span class="nv">both</span> <span class="nv">ulist</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">empty?</span> <span class="nv">ilist</span><span class="p">)</span>
</span><span class='line'>   <span class="nv">ulist</span>
</span><span class='line'>   <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">element</span> <span class="p">(</span><span class="nb">first </span><span class="nv">ilist</span><span class="p">)]</span>
</span><span class='line'>     <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">includes?</span> <span class="nv">ulist</span> <span class="nv">element</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">check-unique</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">ilist</span><span class="p">)</span> <span class="nv">both</span> <span class="nv">ulist</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">check-unique</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">ilist</span><span class="p">)</span> <span class="nv">both</span> <span class="p">(</span><span class="nb">conj </span><span class="nv">ulist</span> <span class="nv">element</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">intersect</span> <span class="p">[</span><span class="nv">seta</span> <span class="nv">setb</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">get-intersect</span> <span class="p">[]</span> <span class="nv">seta</span> <span class="nv">setb</span> <span class="p">(</span><span class="nb">concat </span><span class="nv">seta</span> <span class="nv">setb</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">defn </span><span class="nv">union</span> <span class="p">[</span><span class="nv">seta</span> <span class="nv">setb</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">both-sets</span> <span class="p">(</span><span class="nb">concat </span><span class="nv">seta</span> <span class="nv">setb</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">intersection</span> <span class="p">(</span><span class="nf">intersect</span> <span class="nv">seta</span> <span class="nv">setb</span><span class="p">)]</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">unique-element</span> <span class="nv">intersection</span> <span class="nv">both-sets</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Applying this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">clojure</span><span class="o">.</span><span class="nv">core=&gt;</span> <span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">title</span> <span class="p">(</span><span class="nb">union </span><span class="nv">epub-list</span> <span class="nv">mobi-list</span><span class="p">)]</span> <span class="p">(</span><span class="nb">println </span><span class="nv">title</span><span class="p">))</span>
</span><span class='line'><span class="nv">The</span> <span class="nv">Joy</span> <span class="nv">of</span> <span class="nv">Clojure</span>
</span><span class='line'><span class="nv">Code</span> <span class="nv">Complete</span>
</span><span class='line'><span class="nv">Mining</span> <span class="nv">the</span> <span class="nv">Social</span> <span class="nv">Web</span>
</span><span class='line'><span class="nv">Introduction</span> <span class="nv">to</span> <span class="nv">Information</span> <span class="nv">Retrieval</span>
</span><span class='line'><span class="nv">Natural</span> <span class="nv">Language</span> <span class="nv">Processing</span> <span class="nv">with</span> <span class="nv">Python</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'><span class="nv">clojure</span><span class="o">.</span><span class="nv">core=&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Applications</h2>

<p>This has been just a quick introduction to the topic, but hopefully you
can see the relevance to areas like data mining. Coincidentally, datasets
tend to conform to the mathematical idea of sets, and typically with some
data massaging (i.e. to filter out duplicates), those that don&#8217;t can
be made more like mathemtical sets. Once appropriately represented in the
computer, they can be acted upon with the basic set operations.</p>

<p>I&#8217;ve created an additional example: a web service providing a rest API to
the book collection. As with the code in this post, there is an example in
<a href="https://bitbucket.org/kisom/py_web_service/get/release-1.0.2.tar.gz">Python</a>
and in
<a href="https://github.com/kisom/clj_web_service/tarball/release-1.0.2">Clojure</a>. The
README in either example explains what dependencies are required. You can also
view the <a href="https://bitbucket.org/kisom/py_web_service/">Bitbucket repo</a> for the
Python example, or the <a href="https://github.com/kisom/clj_web_service">GitHub repo</a>
for the Clojure example.</p>

<h2>Acknowledgements</h2>

<p><a href="https://www.github.com/saolsen">Stephen Olsen</a> reviewed many iterations of this
article and helped me to properly articulate the important points (like illustrating
that unions require the subtraction of the intersection). I originally wrote
the bulk of this article on the 25th, but it took me until the 28th to finish
writing the API example code, until the 31st to add in the additional union
explanation, and until the 1st to polish it up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Noir v. Flask]]></title>
    <link href="http://kisom.github.com/blog/2012/01/28/noir-v-flask/"/>
    <updated>2012-01-28T18:49:00+01:00</updated>
    <id>http://kisom.github.com/blog/2012/01/28/noir-v-flask</id>
    <content type="html"><![CDATA[<p>Noir v. Flask: the shootout</p>

<p>I wrote a quick REST API server as an illustration for a blog post, but
I wrote both a Python and a Clojure version. I wrote a test suite to
cover the entire API (of course - you <em>do</em> write tests too, right?),
and I figured while I was at it, I might as well benchmark the two. Here
are the results of 1,000 runs:</p>

<!-- more -->


<ul>
<li>noir: average run time: <code>0:00:00.171184</code> (0.171184 seconds)</li>
<li>flask: average run time: <code>0:00:00.147073</code> (0.147073 seconds)</li>
</ul>


<p>Notes:</p>

<ul>
<li>the time to start the noir server is much longer, about 5-10 seconds
on my 2011 Macbook Air (1.6 GHz Intel Core i5 with 4G of RAM and a 64G
SSD)</li>
<li>both servers were running on the same machine at the same time,
obviously just listening on different ports</li>
<li>I tested this with the Python test suite</li>
</ul>


<p>Source Code:</p>

<ul>
<li><a href="https://github.com/kisom/clj_web_service">clojure / noir example</a></li>
<li><a href="https://bitbucket.org/kisom/py_web_service">Python / flask example</a></li>
</ul>


<p>References:</p>

<ul>
<li><a href="http://www.webnoir.org">Noir</a></li>
<li><a href="http://flask.pocoo.org/">Flask</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Set Theory]]></title>
    <link href="http://kisom.github.com/blog/2012/01/23/basic-set-theory/"/>
    <updated>2012-01-23T17:44:00+01:00</updated>
    <id>http://kisom.github.com/blog/2012/01/23/basic-set-theory</id>
    <content type="html"><![CDATA[<p>Recently, I was explaining to someone the basics of set theory and how the
various basic operations translate to the real world. I used the example of the
project I&#8217;m currently working on, which is a web front end to my ebook library.
This is a very quick introduction aimed at people with a programming background
but who don&#8217;t have a strong math background; the goal is to help you to learn
to use them without having to delve deep into the math behind them.</p>

<!-- more -->


<h2>Basic Properties of Sets</h2>

<p>The first thing we have to do is to explain what is meant by a <em>set</em> -</p>

<blockquote><p>definition: set<br>
A set is any collection of items where each item is unique and the order of
items in the collection is not important.</p></blockquote>

<p>The uniqueness property is very important to sets: there are no duplicates in
a set.</p>

<p>So what does a set look like? In my database, I have a list of all the books
I have electronic copies of. Each book comes in at least one of three formats:
PDF, epub, or mobi. We&#8217;ll call the <em>superset</em> (the universal set of all the items
under consideration) the list of all the books in the library. We&#8217;ll call this
set &#8216;L&#8217; (for Library). Part of the set might look like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>L = { 'Natural Language Processing with Python', 'Learning OpenCV', 
</span><span class='line'>      'Code Complete', 'Mastering Algorithms with C', 
</span><span class='line'>      'The Joy of Clojure', 'Mining the Social Web', 
</span><span class='line'>      'Algorithms In A Nutshell', 'Introduction to Information Retrieval', 
</span><span class='line'>      ... }</span></code></pre></td></tr></table></div></figure>


<p>We use <code>'{}'</code> to denote the members of a set. The order of books in the library
doesn&#8217;t matter here, and it doesn&#8217;t make sense to have more than one entry for
a book in the library.</p>

<p>Building a set in Python is very easy:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">library</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="s">&#39;Natural Language Processing with Python&#39;</span><span class="p">,</span> <span class="s">&#39;Learning OpenCV&#39;</span><span class="p">,</span>
</span><span class='line'>               <span class="s">&#39;Code Complete&#39;</span><span class="p">,</span> <span class="s">&#39;Mastering Algorithms with C&#39;</span><span class="p">,</span>
</span><span class='line'>               <span class="s">&#39;The Joy of Clojure&#39;</span><span class="p">,</span> <span class="s">&#39;Mining the Social Web&#39;</span><span class="p">,</span>
</span><span class='line'>               <span class="s">&#39;Algorithms In A Nutshell&#39;</span><span class="p">,</span>
</span><span class='line'>               <span class="s">&#39;Introduction to Information Retrieval&#39;</span><span class="p">,</span>
</span><span class='line'>               <span class="s">&#39;Network Security With OpenSSL&#39;</span><span class="p">,</span> <span class="s">&#39;RADIUS&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clojure has set notation built in using the <code>#{ }</code> syntax, and any collection
can be turned into a set with <code>(set coll)</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">library</span> <span class="o">#</span><span class="p">{</span> <span class="s">&quot;Natural Language Processing with Python&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;Learning OpenCV&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;Code Complete&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;Mastering Algorithms with C&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;The Joy of Clojure&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;Mining the Social Web&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;Algorithms In A Nutshell&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;Introduction to Information Retrieval&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;Network Security With OpenSSL&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;RADIUS&quot;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now we need to build some subsets.</p>

<blockquote><p>definition: subset<br>
A subset is some part of a set.</p>

<p>definition: proper subset<br>
A proper subset is some part of a set, but is not the whole set.</p></blockquote>

<p>For example, we&#8217;ll create a subset of books P that are on or in Python. We&#8217;ll also create a subset of books E that are in the English language. For my library,
because not all of my books are in or about Python, the number of members of P
is smaller than the number of elements in L. However, all of my books are in
English, so the number of elements in E is the same as the number of elements in
L. Therefore P is a proper subset, while E is not.</p>

<h2>The Basic Set Operations</h2>

<p>Now let&#8217;s consider two proper subsets of the library to explain some of the basic
set operations: M is the subset of ebooks that I have in mobi format, and we&#8217;ll
redefine E to be the list of ebooks in epub format. For the sake of the rest of
this article, let&#8217;s note the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M = { 'Natural Language Processing with Python', 'Code Complete',
</span><span class='line'>      'Introduction to Information Retrieval' }
</span><span class='line'>E = { 'The Joy of Clojure', 'Mining the Social Web', 'Code Complete' }</span></code></pre></td></tr></table></div></figure>


<p>In practical terms, this means in my library I have copies of:</p>

<ul>
<li>&#8220;Natural Language Processing with Python,&#8221; &#8220;Introduction to Information
Retrieval,&#8221; and &#8220;Code Complete&#8221; in mobi format</li>
<li>&#8220;The Joy of Clojure,&#8221; &#8220;Mining the Social Web,&#8221; and &#8220;Code Complete&#8221; in epub
format.</li>
</ul>


<p>In Python:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">mobi</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="s">&#39;Natural Language Processing with Python&#39;</span><span class="p">,</span> <span class="s">&#39;Code Complete&#39;</span><span class="p">,</span>
</span><span class='line'>           <span class="s">&#39;Introduction to Information Retrieval&#39;</span><span class="p">])</span>
</span><span class='line'><span class="n">epub</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="s">&#39;The Joy of Clojure&#39;</span><span class="p">,</span> <span class="s">&#39;Mining the Social Web&#39;</span><span class="p">,</span> <span class="s">&#39;Code Complete&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Clojure:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">mobi</span> <span class="o">#</span><span class="p">{</span><span class="s">&quot;Natural Language Processing with Python&quot;</span><span class="o">,</span> <span class="s">&quot;Code Complete&quot;</span><span class="o">,</span>
</span><span class='line'>           <span class="s">&quot;Introduction to Information Retrieval&quot;</span><span class="p">})</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">epub</span> <span class="o">#</span><span class="p">{</span><span class="s">&quot;The Joy of Clojure&quot;</span><span class="o">,</span> <span class="s">&quot;Mining the Social Web&quot;</span><span class="o">,</span> <span class="s">&quot;Code Complete&quot;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Union</h3>

<p>A union is the set of members that appear in either set - if it&#8217;s in at least
one of the sets, it will appear in a union of the two sets. So we could define
a subset of L that contains all the books I have in a mobile format, which for
our purposes means copies exist in epub or mobi format. In Python, you can
use the <code>set.union</code> method, and in Clojure you can use the functions in the
<code>clojure.set</code> namespace.</p>

<p>In Python:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">mobile</span> <span class="o">=</span> <span class="nb">set</span><span class="o">.</span><span class="n">union</span><span class="p">(</span><span class="n">mobi</span><span class="p">,</span> <span class="n">epub</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">book</span> <span class="ow">in</span> <span class="n">mobile</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">book</span>
</span></code></pre></td></tr></table></div></figure>


<p>which yields the output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Natural Language Processing in Python
</span><span class='line'>Code Complete
</span><span class='line'>Introduction to Information Retrieval
</span><span class='line'>The Joy of Clojure
</span><span class='line'>Mining the Social Web</span></code></pre></td></tr></table></div></figure>


<p>Remember that one of the properties of sets is that order is irrelevant, so you
might get the books in a different order (this applies to Clojure as well).</p>

<p>The same thing, in Clojure:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">mobile</span> <span class="p">(</span><span class="nf">clojure</span><span class="o">.</span><span class="nv">set/union</span> <span class="nv">mobi</span> <span class="nv">epub</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">book</span> <span class="nv">mobile</span><span class="p">]</span> <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="nv">book</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>You would see a similar output to the Python example.</p>

<p>Again, the practical result of this is a set of all the books I have in my
library in a mobile format.</p>

<h3>Intersection</h3>

<p>The intersection of two sets is a list of all the members that only appear in
both sets. In the library example, taking the intersection of the mobi and epub
sets gives me a set of my books that I have in both epub and mobi format. The
<code>intersection</code> function gives me this result.</p>

<p>The Python example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">both_formats</span> <span class="o">=</span> <span class="nb">set</span><span class="o">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">mobi</span><span class="p">,</span> <span class="n">epub</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">book</span> <span class="ow">in</span> <span class="n">both_formats</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">book</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in Clojure:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">both-formats</span> <span class="p">(</span><span class="nf">clojure</span><span class="o">.</span><span class="nv">set/intersection</span> <span class="nv">mobi</span> <span class="nv">epub</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">book</span> <span class="nv">both-formats</span><span class="p">]</span> <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="nv">book</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>For either example, the output should be just one book, given the sample sets:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Code Complete</span></code></pre></td></tr></table></div></figure>


<p>I could use this result to know which books I can use on any mobile device.</p>

<h3>Difference</h3>

<p>The difference of one set from another is a list of all the members in the first
set that are not in the second set. This operation is a bit different from the
first two; the first two operations are
<a href="http://en.wikipedia.org/wiki/Commutative_property">commutative</a>,
but the result of a difference is dependent on the order of the sets. I&#8217;ll
illustrate this with some code examples:</p>

<p>In Python:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">only_mobi</span> <span class="o">=</span> <span class="nb">set</span><span class="o">.</span><span class="n">difference</span><span class="p">(</span><span class="n">mobi</span><span class="p">,</span> <span class="n">epub</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;books only in mobi format:&#39;</span>
</span><span class='line'><span class="k">for</span> <span class="n">book</span> <span class="ow">in</span> <span class="n">only_mobi</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">book</span>
</span><span class='line'>
</span><span class='line'><span class="n">only_epub</span> <span class="o">=</span> <span class="nb">set</span><span class="o">.</span><span class="n">difference</span><span class="p">(</span><span class="n">epub</span><span class="p">,</span> <span class="n">mobi</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;books only in epub format:&#39;</span>
</span><span class='line'><span class="k">for</span> <span class="n">book</span> <span class="ow">in</span> <span class="n">only_epub</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">book</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Clojure:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;books only in mobi format:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">only-mobi</span> <span class="p">(</span><span class="nf">clojure</span><span class="o">.</span><span class="nv">set/difference</span> <span class="nv">mobi</span> <span class="nv">epub</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">book</span> <span class="nv">only-mobi</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;\t&quot;</span> <span class="nv">book</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;books only in epub format:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">only-epub</span> <span class="p">(</span><span class="nf">clojure</span><span class="o">.</span><span class="nv">set/difference</span> <span class="nv">epub</span> <span class="nv">mobi</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">book</span> <span class="nv">only-epub</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;\t&quot;</span> <span class="nv">book</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>As the output messages show, this gives us the set of books that are only
in mobi and the set of books that are only in epub. The output should look
something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>books only in mobi format:
</span><span class='line'>  Introduction to Information Retrieval
</span><span class='line'>  Natural Language Processing with Python
</span><span class='line'>books only in epub format:
</span><span class='line'>  The Joy of Clojure
</span><span class='line'>  Mining the Social Web</span></code></pre></td></tr></table></div></figure>


<h3>Complements</h3>

<p>When discussing complements, we do so when considering a subset and it&#8217;s
superset. The complement of a subset is the difference of subset from the
superset; i.e., the set of all members in the superset that are not in the
subset. For example, if I wanted to check my library for all ebooks I have
that are not in mobi format, I would use the superset <code>library</code> and take the
difference of mobi from library:</p>

<p>In Python:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">not_mobi</span> <span class="o">=</span> <span class="nb">set</span><span class="o">.</span><span class="n">difference</span><span class="p">(</span><span class="n">library</span><span class="p">,</span> <span class="n">mobi</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;books not in mobi format, using the library superset:&#39;</span>
</span><span class='line'><span class="k">for</span> <span class="n">book</span> <span class="ow">in</span> <span class="n">not_mobi</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">book</span>
</span></code></pre></td></tr></table></div></figure>


<p>and in Clojure:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">println </span><span class="ss">&#39;books</span> <span class="nv">not</span> <span class="nv">in</span> <span class="nv">mobi</span> <span class="nv">format,</span> <span class="nv">using</span> <span class="nv">the</span> <span class="nv">library</span> <span class="nv">superset:</span><span class="o">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">not-mobi</span> <span class="p">(</span><span class="nf">clojure</span><span class="o">.</span><span class="nv">set/difference</span> <span class="nv">library</span> <span class="nv">mobi</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">book</span> <span class="nv">not-mobi</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;\t&quot;</span> <span class="nv">book</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives us the output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>books not in mobi format, using the library superset:
</span><span class='line'>   Mining the Social Web
</span><span class='line'>   Algorithms In A Nutshell
</span><span class='line'>   Mastering Algorithms with C
</span><span class='line'>   RADIUS
</span><span class='line'>   The Joy of Clojure
</span><span class='line'>   Network Security With OpenSSL
</span><span class='line'>   Learning OpenCV</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>This has been a very basic look at set theory and what it means in practise.
There is a lot more to set theory (see the references) but this should help
get you started. There are a lot of applications for set theory, such as in
data mining and natural language processing; it is a powerful tool that is
worth spending some time to get to know.</p>

<p>Stay tuned for the next post, which will be on how to use sets in your code.
We&#8217;ll develop the library idea a bit more.</p>

<p><em>UPDATE</em>: The <a href="http://kyleisom.net/blog/2012/02/01/using-set-theory/">next post</a> is up!</p>

<h2>References</h2>

<ul>
<li>I&#8217;ve been reading <a href="https://en.wikipedia.org/wiki/Alfred_Aho">Alfred Aho&#8217;s</a> <a href="https://en.wikipedia.org/wiki/Special:BookSources/0139145567"><underline>The Theory of Parsing, Translating, and Compiling (Volume I: Parsing)</underline></a>
(<a href="http://www.amazon.com/dp/0139145567/">Amazon link</a>)</li>
<li>There is, of course, a good <a href="https://en.wikipedia.org/wiki/Set_(mathematics">wikipedia article</a>.</li>
</ul>


<h2>Reviewers</h2>

<p>I&#8217;d like to thank the following people for reviewing this:</p>

<ul>
<li><a href="https://www.twitter.com/imwally">Wally Jones</a></li>
<li><a href="https://saolsen.github.com/">Stephen Olsen</a></li>
<li><a href="https://www.twitter.com/qb1t">Aaron Bieber</a></li>
<li><a href="https://twitter.com/#!/Slaughterhut">Jason Barbier</a></li>
<li><a href="http://shawnmeier.com/">Shawn Meier</a></li>
<li>Matt Sowers</li>
</ul>


<h2>Code Samples</h2>

<p>The complete python source code, which you can save to a file and run directly:</p>

<figure class='code'><figcaption><span> (set_theory.py)</span> <a href='http://kisom.github.com/downloads/code/set_theory/set_theory.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># author: kyle isom &lt;coder@kyleisom.net&gt;</span>
</span><span class='line'><span class="c"># date: 2012-01-23</span>
</span><span class='line'><span class="c"># license: ISC / public domain (brokenlcd.net/license.txt)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">Python illustrations for blog article &quot;Basic Set Theory&quot;</span>
</span><span class='line'><span class="sd">    (see http://kisom.github.com/blog/2012/01/23/basic-set-theory/)</span>
</span><span class='line'>
</span><span class='line'><span class="sd">Note that this is slightly tweaked from the examples in the article:</span>
</span><span class='line'><span class="sd">    1. PEP8 dictates that all globals be in all caps; as all the variables</span>
</span><span class='line'><span class="sd">    in this illustration are globals, they have been modified to be all caps.</span>
</span><span class='line'><span class="sd">    2. There is a little extra output to explain what is going on; namely,</span>
</span><span class='line'><span class="sd">    tabs are added before printing books and there is an output line showing</span>
</span><span class='line'><span class="sd">    which example the book set is associated with.</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># variables are in all caps because they are globals, and PEP8 dictates</span>
</span><span class='line'><span class="c"># that globals be in caps.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># the superset</span>
</span><span class='line'><span class="n">LIBRARY</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="s">&#39;Natural Language Processing with Python&#39;</span><span class="p">,</span> <span class="s">&#39;Learning OpenCV&#39;</span><span class="p">,</span>
</span><span class='line'>               <span class="s">&#39;Code Complete&#39;</span><span class="p">,</span> <span class="s">&#39;Mastering Algorithms with C&#39;</span><span class="p">,</span>
</span><span class='line'>               <span class="s">&#39;The Joy of Clojure&#39;</span><span class="p">,</span> <span class="s">&#39;Mining the Social Web&#39;</span><span class="p">,</span>
</span><span class='line'>               <span class="s">&#39;Algorithms In A Nutshell&#39;</span><span class="p">,</span>
</span><span class='line'>               <span class="s">&#39;Introduction to Information Retrieval&#39;</span><span class="p">,</span>
</span><span class='line'>               <span class="s">&#39;Network Security With OpenSSL&#39;</span><span class="p">,</span> <span class="s">&#39;RADIUS&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="c"># the subsets</span>
</span><span class='line'><span class="n">MOBI</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="s">&#39;Natural Language Processing with Python&#39;</span><span class="p">,</span> <span class="s">&#39;Code Complete&#39;</span><span class="p">,</span>
</span><span class='line'>           <span class="s">&#39;Introduction to Information Retrieval&#39;</span><span class="p">])</span>
</span><span class='line'><span class="n">EPUB</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="s">&#39;The Joy of Clojure&#39;</span><span class="p">,</span> <span class="s">&#39;Mining the Social Web&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;Code Complete&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;[+] list all the books in a mobile format (union example):&#39;</span>
</span><span class='line'><span class="n">MOBILE</span> <span class="o">=</span> <span class="nb">set</span><span class="o">.</span><span class="n">union</span><span class="p">(</span><span class="n">MOBI</span><span class="p">,</span> <span class="n">EPUB</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">book</span> <span class="ow">in</span> <span class="n">MOBILE</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">book</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;[+] list all the books in both mobile formats (intersection example)&#39;</span>
</span><span class='line'><span class="n">BOTH_FORMATS</span> <span class="o">=</span> <span class="nb">set</span><span class="o">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">MOBI</span><span class="p">,</span> <span class="n">EPUB</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">book</span> <span class="ow">in</span> <span class="n">BOTH_FORMATS</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">book</span>
</span><span class='line'>
</span><span class='line'><span class="n">ONLY_MOBI</span> <span class="o">=</span> <span class="nb">set</span><span class="o">.</span><span class="n">difference</span><span class="p">(</span><span class="n">MOBI</span><span class="p">,</span> <span class="n">EPUB</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;[+] books only in mobi format:&#39;</span>
</span><span class='line'><span class="k">for</span> <span class="n">book</span> <span class="ow">in</span> <span class="n">ONLY_MOBI</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">book</span>
</span><span class='line'>
</span><span class='line'><span class="n">ONLY_EPUB</span> <span class="o">=</span> <span class="nb">set</span><span class="o">.</span><span class="n">difference</span><span class="p">(</span><span class="n">EPUB</span><span class="p">,</span> <span class="n">MOBI</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;[+] books only in epub format:&#39;</span>
</span><span class='line'><span class="k">for</span> <span class="n">book</span> <span class="ow">in</span> <span class="n">ONLY_EPUB</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">book</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll want to run this with <code>python set_theory.py</code> (or whatever you choose to
name the file, obviously).</p>

<p>The complete Clojure source code, which you can likewise save and run:</p>

<figure class='code'><figcaption><span> (set-theory.clj)</span> <a href='http://kisom.github.com/downloads/code/set_theory/set-theory.clj'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="c1">;; set-theory.clj</span>
</span><span class='line'><span class="c1">;; author: kyle isom &lt;coder@kyleisom.net&gt;</span>
</span><span class='line'><span class="c1">;; date: 2012-01-23</span>
</span><span class='line'><span class="c1">;; license: ISC / public domain (brokenlcd.net/license.txt)</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; code examples for blog post &quot;Basic Set Theory&quot;</span>
</span><span class='line'><span class="c1">;;     http://kisom.github.com/blog/2012/01/23/basic-set-theory/</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;clojure</span><span class="o">.</span><span class="nv">set</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; the superset</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">library</span> <span class="o">#</span><span class="p">{</span> <span class="s">&quot;Natural Language Processing with Python&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;Learning OpenCV&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;Code Complete&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;Mastering Algorithms with C&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;The Joy of Clojure&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;Mining the Social Web&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;Algorithms In A Nutshell&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;Introduction to Information Retrieval&quot;</span>
</span><span class='line'>                <span class="s">&quot;Network Security With OpenSSL&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;RADIUS&quot;</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; the subsets</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">mobi</span> <span class="o">#</span><span class="p">{</span><span class="s">&quot;Natural Language Processing with Python&quot;</span><span class="o">,</span> <span class="s">&quot;Code Complete&quot;</span><span class="o">,</span>
</span><span class='line'>           <span class="s">&quot;Introduction to Information Retrieval&quot;</span><span class="p">})</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">epub</span> <span class="o">#</span><span class="p">{</span><span class="s">&quot;The Joy of Clojure&quot;</span><span class="o">,</span> <span class="s">&quot;Mining the Social Web&quot;</span><span class="o">,</span> <span class="s">&quot;Code Complete&quot;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; union illustration</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;union illustration (books in either mobile format)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">mobile</span> <span class="p">(</span><span class="nf">clojure</span><span class="o">.</span><span class="nv">set/union</span> <span class="nv">mobi</span> <span class="nv">epub</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">book</span> <span class="nv">mobile</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;\t&quot;</span> <span class="nv">book</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; intersection illustration</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;intersection illustration (books in both mobile formats)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">both-formats</span> <span class="p">(</span><span class="nf">clojure</span><span class="o">.</span><span class="nv">set/intersection</span> <span class="nv">mobi</span> <span class="nv">epub</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">book</span> <span class="nv">both-formats</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;\t&quot;</span> <span class="nv">book</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;books only in mobi format:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">only-mobi</span> <span class="p">(</span><span class="nf">clojure</span><span class="o">.</span><span class="nv">set/difference</span> <span class="nv">mobi</span> <span class="nv">epub</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">book</span> <span class="nv">only-mobi</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;\t&quot;</span> <span class="nv">book</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;books only in epub format:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">only-epub</span> <span class="p">(</span><span class="nf">clojure</span><span class="o">.</span><span class="nv">set/difference</span> <span class="nv">epub</span> <span class="nv">mobi</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">book</span> <span class="nv">only-epub</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;\t&quot;</span> <span class="nv">book</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; complement illustration</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;books not in mobi format, using the library superset:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">not-mobi</span> <span class="p">(</span><span class="nf">clojure</span><span class="o">.</span><span class="nv">set/difference</span> <span class="nv">library</span> <span class="nv">mobi</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">book</span> <span class="nv">not-mobi</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;\t&quot;</span> <span class="nv">book</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll want to run this with <code>clj set-theory.py</code> - I&#8217;ve deliberately chosen
not to make this a lein project in order to make it easier to share, but I did
<a href="http://kisom.github.com/downloads/set_theory.tar.gz">upload a lein project</a>.
You should be able to just run <code>lein deps, test, run</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[on SOPA and PIPA]]></title>
    <link href="http://kisom.github.com/blog/2012/01/18/on-sopa-and-pipa/"/>
    <updated>2012-01-18T00:00:00+01:00</updated>
    <id>http://kisom.github.com/blog/2012/01/18/on-sopa-and-pipa</id>
    <content type="html"><![CDATA[<p>Imagine you are the owner of a small restaurant. The neighbourhood is of mixed
quality, but this is where you live so you try to make do anyways. One day,
new laws are passed such that if anyone in your restaurant conducts any sort of
illegal activity (like a drug deal), the police blockade your restaurant and
force everyone out. Furthermore, this new law isn&#8217;t clear about how to get your
restaurant back. The politicans who made this law have absolutely no experience
in the restaurant industry, but still expect you to continually monitor all your
patrons and do the work of the police and law enforcement for them. At any time,
one of your patrons can call the police and claim something happened in your
restaurant and you get shutdown. On top of all this, there are people actively
looking for anything untoward happening so as to shut you down. What do you
do? You can&#8217;t really afford to hire more waiters and waitresses or security
personnel to monitor (and don&#8217;t really want to establish that kind of atmosphere
in your business anyhow); CCTV and other technical measures have too long of a
delay (or require you to suspect something happened so you can check the tapes).
Really, the only thing you can do is to move out of town.</p>

<!-- more -->


<p>Of course I&#8217;m talking about <a href="http://www.govtrack.us/congress/bill.xpd?bill=s112-968">PIPA</a>
and <a href="http://www.govtrack.us/congress/bill.xpd?bill=h112-3261">SOPA</a>. The story I
told isn&#8217;t entirely <a href="http://en.wikipedia.org/wiki/G%C3%B6del%2C_Escher%2C_Bach">isomorphic</a>
to the current situation, but it gets the idea across. The
politicians enacting this legislation have admittedly no technical knowledge, despite the
fact that the vast majority of the people working in the tech industry have decried this
as a universally uneducated and ineffective decision that will do more to hurt the innocent
than to accomplish its stated objectives.</p>

<p>This is the exact reason why I would not start a tech business in the US anymore.
Starting a business is hard enough with everything else; worrying about the legal
environment is too much and there are plenty of places where law enforcement does
its job instead of placing the burden on you.</p>

<p>Unfortunately, just leaving the country isn&#8217;t going to let me just dodge the
effects. What happens when you lose a large part of your market share (i.e. the
US market)? <a href="http://www.arstechnica.com">Ars Technica</a> has a
<a href="http://arstechnica.com/tech-policy/news/2012/01/what-does-sopa-mean-for-us-foreigners.ars">good writeup</a>
on how SOPA/PIPA affect foreign users.</p>

<p>So what could the government do instead?</p>

<ul>
<li>work on improving the technical skills of their workforce (not driving away the people with these skills with the government&#8217;s current overwhelming ineptitude would be a good start)</li>
<li>being far more transparent about the process of taking down a site</li>
</ul>


<p>Unfortunately, I don&#8217;t have enough money to pay the government to listen to me.</p>

<p>Further reading:</p>

<ol>
<li>The EFF has a good <a href="https://www.eff.org/takedowns">Takedown Wall of Shame</a>
if you don&#8217;t believe the government would possibly abuse or misuse their
takedown powers.</li>
<li>The EFF also has a <a href="https://www.eff.org/deeplinks/2012/01/how-pipa-and-sopa-violate-white-house-principles-supporting-free-speech">good writeup</a> on SOPA.</li>
<li><a href="http://americancensorship.org/">Stop American Censorship</a></li>
<li>Fight For the Future has a <a href="http://fightforthefuture.org/pipa">good video</a></li>
</ol>


<p>Thanks to <a href="http://samuelgoodwin.tumblr.com">Samuel Goodwin</a>, Beau Holton,
<a href="https://twitter.com/#!/Slaughterhut">Jason Barbier</a>,
<a href="http://twitter.com/qb1t">Aaron Bieber</a>,
and <a href="http://twitter.com/imwally">Wally Jones</a> for reviewing this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[back to lisp]]></title>
    <link href="http://kisom.github.com/blog/2012/01/02/back-to-lisp/"/>
    <updated>2012-01-02T00:00:00+01:00</updated>
    <id>http://kisom.github.com/blog/2012/01/02/back-to-lisp</id>
    <content type="html"><![CDATA[

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>commit e358120dd3760e64436f5652895c751b39148ebd
</span><span class='line'>   Author: Kyle Isom &lt;coder@kyleisom.net>
</span><span class='line'>   Date:   Wed Dec 28 19:22:59 2011 +0300
</span><span class='line'>   
</span><span class='line'>    initial commit</span></code></pre></td></tr></table></div></figure>


<p>A brief stint playing with clojure made me miss common lisp, so I&#8217;m working
through <a href="http://www.paulgraham.com">Paul Graham&#8217;s</a>
<a href="http://paulgraham.com/acl.html">ANSI Common Lisp</a> with a copy of
<a href="http://paulgraham.com/onlisp.html">On Lisp</a>. My last foray, I learned
from <a href="http://www.cs.cmu.edu/~dst/">David Touretzky&#8217;s</a>
<a href="http://www.cs.cmu.edu/~dst/LispBook/index.html">A Gentle Introduction to Symbolic Computation</a>,
so this time I&#8217;m trying PG&#8217;s book. So far I&#8217;ve done more useful things,
mostly by actually reading a bit more of the <a href="http://www.sbcl.org">sbcl</a>
<a href="http://www.sbcl.org/manual/">user manual</a> (from which I learned some
useful things such as <code>sb-ext:*posix-argv*</code> and <code>sb-ext:save-lisp-and-die</code>)
and by the immensely useful site
<a href="http://rosettacode.org/wiki/Rosetta_Code">Rosetta Code</a>, from which I
learned about the <a href="http://www.weitz.de/drakma/">DRAKMA</a> HTTP client
library. I&#8217;ve also been aided quite a bit by
<a href="http://xach.com">Zach Beane&#8217;s</a> <a href="http://www.quicklisp.org/">quicklisp</a>;
in fact, one of the things I&#8217;ve done is to write a short
<a href="https://gist.github.com/1548276">script</a> to build an sbcl image with
quicklisp and my most commonly used libraries built-in.</p>

<!-- more -->


<script src="https://gist.github.com/1548276.js?file=build-image.lisp"></script>


<p>One of the things I love about functional programming is the idea that
instead of relying on a lot of variables, you use functions as sort of
&#8220;organic variables&#8221; that provide immutable data based on some input. The
ability to build what feels more organic, less static. I think
<a href="https://en.wikipedia.org/wiki/Steve_Yegge">Steve Yegge&#8217;s</a>
blog post <a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html">Execution in the Kingdom of Nouns</a>
is spot on.</p>

<p>I anticipate this to be the year of Lisp for me, as I delve into
Common Lisp, Scheme, and Clojure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[my docs got dropped]]></title>
    <link href="http://kisom.github.com/blog/2011/12/31/my-docs-got-dropped/"/>
    <updated>2011-12-31T00:00:00+01:00</updated>
    <id>http://kisom.github.com/blog/2011/12/31/my-docs-got-dropped</id>
    <content type="html"><![CDATA[<p>My docs are in the stratfor leak.</p>

<!-- more -->


<p>I&#8217;m not too worried though; everything in there is either out of date
(i.e. that credit card already expired and I have a new one now), my
password was used only on that site (but was a 22 character phrase with
punctuation), and that email address was only used for stratfor. My
address was also already published due to my domain names (most of which
are now privately registered, but I couldn&#8217;t always afford that).</p>

<p>Now that I have a doc drop that actually affects me (the mtgox break-in
gathered a similarly difficult and unique password, and besides some spamming
from idiots trying to exploit the situation with new bitcoin services
there was no fallout), I can talk about what I think of the spate of
LulzSec-style attacks this year. And that is - getting mad at Anonymous,
LulzSec, AntiSec, or whatever the nom du jour is, is an exercise in futility
and ignorance. It&#8217;s like getting mad at your five year old for getting into
the cookie jar you left on the kitchen table. Your antiquated and
ineffective security mechanism (the kid couldn&#8217;t <em>possibly</em> get on the
table) should have been replaced by something more effective (maybe locking
it in the pantry, overkill for a cookie jar though).</p>

<p>The issue is it&#8217;s 2011 (almost 2012) and we&#8217;ve been doing this for a while
now. The rampant incompetence of people setting up these sites should be
made a crime. That would be a far better use of legislative effort than the
brain dead attempts at anti-piracy we&#8217;re seeing now. The script kiddies
aren&#8217;t exhibiting any serious talent, the security (I use the term loosely
here) people are setting up is juvenile.</p>

<p><strong> Afterthoughts: </strong></p>

<p>As <a href="http://hackerne.ws/user?id=gyardley">gyardley</a> pointed out on
<a href="http://hackerne.ws/item?id=3411236">hackerne.ws</a>, when I compare the
LulzSec-type script kiddies to five-year-olds, I don&#8217;t mean to create
the impression that they shouldn&#8217;t be held legally liable. I do fear,
however, that focusing on legal actions against those responsible will
cause us to lose focus on the bigger problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[suddenly enlightenment]]></title>
    <link href="http://kisom.github.com/blog/2011/12/03/suddenly-enlightenment/"/>
    <updated>2011-12-03T00:00:00+01:00</updated>
    <id>http://kisom.github.com/blog/2011/12/03/suddenly-enlightenment</id>
    <content type="html"><![CDATA[<p>It&#8217;s been almost 28 hours since I last slept, so I apologise if this
post contains a few spelling or grammatical errors. As soon as I
become aware of them, rest assured I will quickly put them to right.</p>

<p><a href="http://www.kyleisom.net/blog/2011/11/35-dot_emacs">Today&#8217;s git commit</a> occurred
while I was working on getting a web development test VM / environment working. The
goal was to update a CGI script when I pushed to the dev vm. The commit log:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>commit 2de6f8444c68b0dd5ad31dd815d71a5590c5120e
</span><span class='line'>   Author: Kyle Isom &lt;coder@kyleisom.net>
</span><span class='line'>   Date:   Sat Dec 3 00:24:34 2011 +0300
</span><span class='line'>   
</span><span class='line'>       suddenly enlightenment</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>It took a while for me to grok what was happening with the hook, but finally it clicked.
I did a lot of reading online, and was greatly helped by the <a href="https://www.ora.com">O&#8217;Reilly</a>
book <a href="https://shop.oreilly.com/product/9780596620137.do">Version Control with Git</a>
and the <code>githooks(5)</code> man page.</p>

<p>My remote repository was a bare git repo (one initialised with <code>git init --bare</code> that I
pushed my local changes to. I created a staging directory (<code>${HOME}/stage/cgitest</code>)
and created the following hook:</p>

<pre><code>kyle@www-dev:~/code/cgitest/hooks$ cat post-update
#!/bin/sh
export GIT_DIR=/home/kyle/code/zipcgi
export GIT_WORK_TREE=/home/kyle/stage/zipcgi
git reset --hard
git checkout -f
cp ${GIT_WORK_TREE}/zipcgi.py ~/bin/cgi/
</code></pre>

<p>As a side note, make sure the script is <code>chmod +x</code>&#8216;d.</p>

<p>The reason why we have to specify the git dir is that by default,
because this is in the bare repository, git will assume the git
directory is the repository directory. The problem is, that directory
doesn&#8217;t have a working tree. A working tree is required to checkout
the repository - i.e. so we have a named file to work with. To work
around this, I explicitly specify a working tree . Then I copy the CGI
script to my CGI directory.</p>

<p>Why not just symlink the file? Well, symlinks work on inodes. This
allows multiple names to refer to the same file, but it does mean that
even though the file is in the same directory and shares the same
name, it is not guaranteed the same inode number. The git checkout
can, in essence, unlink the old file and create a completely new
file. The end result is that your symlink will likely be broken,
pointing to a now non-existent inode. The safest method is just to
copy the new version on top of the old one.</p>

<p>Why do we have to manipulate the environment variables
<code>GIT_DIR</code> (which points to the directory containing the actual git
repository, more on that in a second) and <code>GIT_WORK_TREE</code>, which
represents the working tree. To really understand this, you need to
understand the difference between the working tree and the
repository. You could take the long route and read the excellent book
I mentioned above and wade through man pages (which are pretty well
written, but there is a lot of information to keep track of). An
alternative is to buckle in and keep reading for my crash course.</p>

<p>Still here? Buckled in? Let&#8217;s do this. A git repository is basically a
filesystem-based database that uses hashes for identification and
great success. If you poke around in your git repository (which in a
standard local repository is in <code>${PROJECT}/.git</code>), particularly under
objects, you will see what I mean. Everything is stored as a hash
object. Git uses <a href="https://en.wikipedia.org/wiki/SHA-1">SHA-1</a>, and
under <code>.git/objects</code> you will see a list of subdirectorys. These
subdirectories (with the exception of <code>pack</code> and <code>info</code>) named after
the first byte of the SHA-1 hash (which is two bytes when stored as a
semi-human readable hex digest). Under these subdirectories, git
stores the objects as the remaining 19 bytes (again, 38 bytes when
stored as a hex digest) of the hash. The file is
zlib-compressed. Don&#8217;t believe me? If you clone my
<a href="https://github.com/kisom/woofs">woofs project</a> and look up</p>

<p><code>.git/objects/bf/2f7383ca7343f85f1308fc6dc3c34dbd047d90</code>.</p>

<p>Try the following python code:</p>

<pre><code>import zlib
print zlib.decompress(open('2f7383ca7343f85f1308fc6dc3c34dbd047d90').read())
</code></pre>

<p>You should see a working version of the script (and the latest version
as of this writing). This is how git sees everything. (If you want to
see what git sees a file as, use <code>git hash-object &lt;FILE&gt;</code>.)</p>

<p>The working directory is where you, the developer or end user,
interact with the contents of the database. This is where things can
be staged to be committed, and in a bare repo (typically found
on remote repos), there won&#8217;t be a working directory because you
aren&#8217;t working directly on that copy of the repo. Try this:</p>

<pre><code>mkdir -p ~/tmp/stage/woofs_working
export GIT_DIR=~/Code/woofs/.git 
export GIT_WORK_TREE=~/tmp/stage/woofs_working
cd ~
git reset --hard
ls ~/tmp/stage/woofs_working
</code></pre>

<p>Voil√†! You should see the contents of the repo there. (I&#8217;d recommend
either closing out that terminal session or running</p>

<pre><code>unset GIT_DIR GIT_WORK_TREE
</code></pre>

<p>to prevent problems later on. Also, while I&#8217;m using a repo I chose at
random from my <code>~/Code</code> directory, you could (and should) be trying
with a repo of your own.</p>

<p>It should be clear now why I had to explicitly specify the two. The
next two commands just reset the working directory to the lastest
commit (i.e. the one that was just pushed) and check out a fresh copy,
to make sure everything that should be present is present.</p>

<p>This turned out to be a longer post than I had expected, but my hope
is that it helps other people quickly get their hooks operational. The
cool thing about hooks is they are just executable shells scripts,
which means:</p>

<ol>
<li>the script&#8217;s <code>${PWD}</code> is the hooks directory in the git repo.</li>
<li>the <code>${GIT_DIR}</code> is by default &#8216;.&#8217; and is the repo directory. for
example, if we had a bare woofs repo, it would be something like
<code>/home/kyle/code/woofs</code>, while in a local repo it would be
<code>/home/kyle/code/woofs/.git</code>.</li>
<li>because it&#8217;s just a shell script, you can use any language you can
use a shebang for.</li>
</ol>


<p>Git hooks are a powerful tool and can greatly boost your productivity,
automatically deploy code, and help us fight SkyNet. You should
consider using them in your next project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[add .emacs.d/init.el]]></title>
    <link href="http://kisom.github.com/blog/2011/11/28/add-emacsd/"/>
    <updated>2011-11-28T00:00:00+01:00</updated>
    <id>http://kisom.github.com/blog/2011/11/28/add-emacsd</id>
    <content type="html"><![CDATA[<p>In the spirit of many of my online profiles which proudly declare &#8220;my
commit log is my blog,&#8221; I&#8217;ve decided to start using that in my posts.
Here is the first such attempt.</p>

<pre><code> commit 40bbc533313a43192506b682fe546304d8603d11 
 Author: Kyle Isom &lt;coder@kyleisom.net&gt;
 Date:   Mon Nov 28 17:34:30 2011 +0300

    add .emacs.d/init.el
</code></pre>

<p>I&#8217;ve started using emacs, which is an act of such great blasphemy for
a red-blooded stalwart vim-wielding hacker such as myself that I find
it difficult to come to grips with sometimes. But there is a method to
my madness, and it isn&#8217;t just that my morals are so comprised right
now in this nadir of my life that I&#8217;ve even started learning
javascript (a running joke).</p>

<!-- more -->


<p>Due to my current work situation, and the prospect of traveling to and
spending several months in a region with little to no network
connectivity, I&#8217;ve purchased a new 11&#8221; Macbook Air. I chose the 11&#8221;
model solely for price reasons; I would much prefer a larger
laptop. I&#8217;ve previously owned two EeePCs (the 7&#8221;
<a href="http://en.wikipedia.org/wiki/ASUS_Eee_PC#Eee_700_series">Eee PC 701</a>
and the 11&#8221;
<a href="http://en.wikipedia.org/wiki/ASUS_Eee_PC#Specifications">Eee PC 1101HAB</a>),
so I&#8217;m familiar with the smaller form-factor, and not a huge fan to be
honest.</p>

<p>Enter emacs - I can do all my work on emacs, with an integrated python
development environment incorporating a shell, pdb (with a pane that
shows the current line of the file being executed as you&#8217;re stepping
through code). I&#8217;ll still have the OS X desktop,
<a href="http://www.iterm2.com/">iterm2</a>,
<a href="http://tmux.sourceforge.net/">tmux</a>, and
<a href="http://code.google.com/p/macvim/">macvim</a>. But for getting things
done, I think that emacs is going to help out a lot.</p>

<p>Plus it&#8217;s backed by a Lisp flavour.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[on the police response to the occupy movement]]></title>
    <link href="http://kisom.github.com/blog/2011/10/29/on-the-police-response-to-the-occupy-movement/"/>
    <updated>2011-10-29T00:00:00+02:00</updated>
    <id>http://kisom.github.com/blog/2011/10/29/on-the-police-response-to-the-occupy-movement</id>
    <content type="html"><![CDATA[<p>(Originally written on 2011-10-29 and an unusual departure from the usual technical content.)</p>

<p>TL;DR One more combat veteran is disgusted and appalled by the actions of a few police officers during the course of the Occupy movement.</p>

<!-- more -->


<p>I just got done watching <a href="http://www.youtube.com/watch?v=WmEHcOc0Sys">this video</a>, and the outrage I feel towards those peace officers who disrespect the freedoms that I, and many better man than I, have ostensibly fought to protect, welled up in my chest like a Midwest thunderstorm. While we were told that our actions in Iraq were in the name of freedom, while many people back home who supported us with letters and care packages were told we were defending freedom, the basic rights of <strong>American citizens</strong> are being trampled on by a few officers and police departments.</p>

<p>Right up front: I don&#8217;t have anything against police officers. Yes, they do unpopular things. I understand that. When I came home, there were times when anti-war protesters took their protests to a personal level. As a 19 or 20 year old to return home from war, having seen friends and brothers killed, having experienced the trauma of being having your vehicle hit by an IED, and having had to make decision whether to take another man&#8217;s life or not (despite not being considered old enough to be responsible enough to consume alcohol), to have people tell you that you are a baby killer is a fairly difficult and emotionally trying experience. I took several of my best years out of my life to serve my country and gave up quite a number of opportunities in order to do so. I understand many of the feelings that I am sure many police officers feel when ordinary citizens harass and rail on them for actions they take that are unpopular. I get it. I know that as despicable as resorting to violence is, the fact of the matter is that humanity forces the need. Would that we were all enlightened, instead of being little more than clever apes with Facebook, but I understand that is not the case. Trust me.</p>

<p>But as a fighting man in an actual war zone - and despite the so-called &#8220;threat of terror&#8221; that supposedly &#8220;looms&#8221; here, America is not a war zone - had I fired even non-lethal rounds at unarmed civilians unprovoked because I felt scared due to the loud noises they were making, I would have faced military punishments. Many soldiers were punished for less. As a professional soldier, I am trained and expected to make reliable snap shoot/no-shoot judgements. During the surge in Iraq, when I was in a very kinetic (military word for an area of active fighting) environment, we still were held accountable for our actions. If use of force was justified (and it was on many occasions), there is no issue.</p>

<p>So to see American police officers engaging American citizens who are not wielding weapons is aggravating in no small way. As I mentioned in the opening paragraph, rage is a much better term for the emotion. It isn&#8217;t all the police officers, but just as a few soldiers cast shame over the entire US military, a few idiot police officers are casting shame over their departments and the governments they represent. If those officers were in my platoon, in addition to military judgement they would be taken out back and beaten.</p>

<p>I don&#8217;t want to rant, I don&#8217;t want to say anything stupid, and I don&#8217;t want to end up resorting to ad-hominem attacks. Suffice it to say that many of us in the military, regardless of our agreement (or lack thereof) with the protesters&#8217; cause, stood up and defended the right of those protesters to have their voice heard. It is a sad day when the populace needs protection from the very police officers whose job is allegedly to protect that self-same populace. Let us not forget who pays the salary of those police officers.</p>

<p>For those police officers who maintain their calm and professional bearing, I applaud you. I understand the desire to smash stupid people in the face for saying and thinking stupid things. Unfortunately, as a police officer, you are bound to protect those people. I have been in similar situations in the military, and I understand the frustration. If you feel so strongly about it, do it the old-fashioned way - go on your own, out of uniform, and throw down. If it&#8217;s a departmental policy to carry out those types of actions, then the government no longer serves its people and no longer upholds the Constitution, and it&#8217;s time for you to be replaced.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[generating patchfiles with git and hg]]></title>
    <link href="http://kisom.github.com/blog/2011/09/28/generating-patchfiles-with-git-and-hg/"/>
    <updated>2011-09-28T00:00:00+02:00</updated>
    <id>http://kisom.github.com/blog/2011/09/28/generating-patchfiles-with-git-and-hg</id>
    <content type="html"><![CDATA[<p>UPDATE: originally this post was only about doing this in git. Since I use
mercurial almost as much as I use git, I decided to look into how to do it
with mercurial too.</p>

<p>I recently was explaining to someone that as a coder, I do (or should do)
a lot more than just code. I figured since I hadn&#8217;t written anything here in
a while, I&#8217;d put my thoughts down here.</p>

<p>i found myself needing to generate a patchfile today from a git repo. it turns
out to be a very easy task.</p>

<!-- more -->


<ul>
<li><p>first, commit to a clean working directory. i&#8217;ll asume you are on the
&#8216;master&#8217; (git) or &#8216;tip&#8217; (hg) branch, but s/master/$branch/ as appropriate.</p></li>
<li><p>if you have only one commit between you and the commit you need to diff
against:</p></li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git format-patch master^ --stdout &gt; my.patch<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hg <span class="nb">export </span>tip &gt; my.patch
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>otherwise, substitute in the appropriate commit</p></li>
<li><p>to apply the patch, it&#8217;s</p></li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git apply --stat my.patch
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hg patch my.patch
</span></code></pre></td></tr></table></div></figure>


<p>I did say it was a very easy task&#8230; You&#8217;ll notice mercurial makes this easier
(or at least I think so) than git.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[coders (should) do much more than code]]></title>
    <link href="http://kisom.github.com/blog/2011/09/10/coders-should-do-much-more-than-code/"/>
    <updated>2011-09-10T00:00:00+02:00</updated>
    <id>http://kisom.github.com/blog/2011/09/10/coders-should-do-much-more-than-code</id>
    <content type="html"><![CDATA[<p>I recently was explaining to someone that as a coder, I do (or should do)
a lot more than just code. I figured since I hadn&#8217;t written anything here in
a while, I&#8217;d put my thoughts down here.</p>

<h2>the tl;dr</h2>

<p>Coders code. That much is obvious from the title, but there is much more that
can and should be involved for anyone writing real code, at least for UNIX
coders.</p>

<h2>intro</h2>

<p>So you&#8217;ve spent the last couple weeks / months / years writing some really
brilliant bit of software that you think would benefit a lot of people. Or
maybe, just a few, but you still are of the mindset that since you did the
work to solve this problem, other people might have the same problem and if
they had the solution, they could concentrate on other problems. Regardless
of the quality of code and the development process you followed, which endless
books have been written on the subject, there is still a <strong>lot</strong> more work to
be done if you intend to make your software both useful and accessible to
other people. You still need to make sure you have a reasonable portable
(for the scope of the usefulness of your code) build system, good documentation,
an easily accessible online place for people to get your code, and proper
follow-through. Let&#8217;s talk through these bits.</p>

<!-- more -->


<h2>the build system</h2>

<p>No matter how wizard your code is, if it&#8217;s more work for other people to build
it than it&#8217;s worth, it won&#8217;t be used. That&#8217;s a simple fact. By now, users have
come to expect the proverbial <code>./configure &amp;&amp; make &amp;&amp; make install</code> (or
perhaps <code>scons</code> or <code>waf</code> or <code>jam</code> or one of the other solutions). Regardless,
the build process should not require much work for end users, except in cases
where the code is a very purposeful bit of code that requires careful
configuration. I personally have begun making use of the <code>autotools</code> suite
(my personal stance on the GPL notwithstanding, a rant for another day but
the curious can take a look at the license for most of my code on my
<a href="https://github.com/kisom/">github page</a>). This comprises
<a href="http://www.gnu.org/software/autoconf/">autoconf</a> and
<a href="http://www.gnu.org/software/automake/">automake</a> primarily. You will easily
spend many hours just writing out the configuration files on your end to
properly support and build the software, determining what needs to be checked
on the user&#8217;s system so that they can be sure the code will run on their node.
Once this is set up and functioning, for the most part and in theory, users
will be able to just do the typical configure-and-make pattern they have come
to know and love. The autotools are really designed for C and C++. For python,
there&#8217;s always the <a href="http://pypi.python.org/pypi/setuptools">Python setuptools</a>,
and of course for Perl there&#8217;s <a href="http://www.cpan.org/">CPAN</a>.</p>

<p>Of course, these tools are quite often in a different language than your code
is. For example, the autotools use POSIX shell, M4, and POSIX Makefiles to
generate the configure script and Makefiles for distribution. This takes time
to learn, especially given some of the nuances involved. There is of course
some debate (see &#8220;Stop the autoconf insanity! Why we need a new build system&#8221;[http://freshmeat.net/articles/stop-the-autoconf-insanity-why-we-need-a-new-build-system])
as to how useful these are, but for the most part the reward is worth the work.
For the autotools suite, take a look at the No Starch Press book
<a href="http://nostarch.com/autotools.htm">Autotools:A Practitioner&#8217;s Guide to GNU Autoconf, Automake, and Libtool</a>.
I found this book indispensable in learning the tool suite.</p>

<h2>documentation</h2>

<p>Documentation extends much further (or should) than the typical README and
INSTALL files found in many distributions. Many developers learn the basics
of TeX or LaTeX typesetting to produce aesthetically pleasing manuals; Texinfo
is also quite common. Markdown is becoming popular as well and with the advent
of tools like <a href="http://johnmacfarlane.net/pandoc/">pandoc</a>, even easier to
convert from Markdown to other formats (pandoc supports html and LaTeX). Besides
just the technical side of writing documentation and learning the typesetting
language used, there&#8217;s the art of technical writing as well. Many companies
have full-time technical writers whose sole purpose is writing documentation.
This is because of another simple fact: your software is of no use if the users
can&#8217;t figure out how to use it. While many users may be technically saavy
enough to read the code to figure out how to use it, for your code to be truly
useful, they should not have to resort to this. This is what I see as the Apple
factor: many developers use Apple&#8217;s hardware and operating system because not
only do things Just Work, but there is also excellent documentation available.
Another operating system leading the way in documentation is my beloved
<a href="http://www.openbsd.org">OpenBSD</a>. Users should have a clear set of instructions
of not only how to use the software, but ways to extend it, what things it
can do that they may not realise, and how to solve problems that may crop up.
So a truly good coder is both at least a proficient typesetter but also a
proficient writer of whatever human language the software is in (or aimed at).</p>

<p>Some projects go further and include a full copy of the license the software
is released under (which you should do for the safety / peace of mind /
convenience of your users - it took <a href="http://lteo.devio.us/">lteo</a> constantly
reminding me of this for many of my projects before I started doing it out
of habit) which is most often in a file called LICENSE or COPYING; a copy of
the ChangeLog, which could also be gotten from source control such as
<code>git log</code>; an AUTHORS file to list contributors; a README and INSTALL file to
give a quick usage and overview as well as installation instructions; and
perhaps a HACKING document to explain how to modify the code to be useful.</p>

<p>The README file is still rather useful; in fact, many times I will
<a href="http://kyleisom.net/blog/2011/07/31-rgtdd">write the README first</a> as part
of my development process.</p>

<p>No matter how you approach it or what you use to write and format your user
manuals, you should still have them included.</p>

<h2>distribution</h2>

<p>Today, distribution is one of the easiest aspects of coding. Numerous websites
exist for the sole purpose of distributing your software, such as
<a href="https://github.com">github</a>, <a href="https://www.bitbucket.org">bitbucket</a>,
<a href="https://www.sourceforge.net">sourceforge</a>,
<a href="https://www.freshmeat.net">freshmeat</a>, among others. Typically, such sites
will also host a remote version of your version control system (you <em>are</em>
version controlling, <em>right</em>?) in addition to supporting release downloads. A
well-setup build system offers the ability to build a distribution release,
often in tarball or tarred bzip2 format as well. Some sites still offer just
a release tarball (for a while, this is how I released my
<a href="https://github.com/kisom/libdaemon">libdaemon</a> project, via my
<a href="http://kisom.devio.us/src.html">devio.us homepage</a>. In fact, this is rapidly
becoming one of the easiest pieces of the project lifecycle. If you haven&#8217;t
already, take a look at one of the sites that works as a remote repo for
whatever source control you are using. You will probably see that besides
distribution, these sites are extremely useful for the last important additional
part of coding I want to talk about.</p>

<h2>support and maintenance</h2>

<p>Once the user has a copy of your software and knows how to use it, they will
inevitably encounter bugs or find that while they would really like to see
a feature in the software, they don&#8217;t have the technical skills to implement
it themselves (or perhaps the courage to look through your code&#8230;) Still other
users might fix the bugs or add new features themselves, and would like to
offer you those changes so you can incorporate them into the software. So the
last important additional part of being a coder is support and maintenance.</p>

<p>Many of the sites that offer to host releases of your code provide additional
tools, like wikis, bug reporting (aka trouble tickets), and feature requests.
Users may also provide patchfiles or a git pull request to give you their
contribition (and accordingly, you credit them in the documentation as well).
A good coder needs to be able to support and maintain the software - users are
more apt to use software if it gets patched or updated with new features (or
if it just works and they don&#8217;t need new features or bugs patched, which is
less likely but still possible).</p>

<h2>conclusion</h2>

<p>As I&#8217;ve explained, being a good coder and providing useful software encompasses
so much more than just good technical skills or great development processes.
There&#8217;s the administrative side (i.e. the build system, feature request and bug
tracking) and the human side (i.e. documentation and responding to support
requests). While it may not be as much fun as the actual coding, it is still
integral to the development process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RGTDD]]></title>
    <link href="http://kisom.github.com/blog/2011/07/04/rgtdd/"/>
    <updated>2011-07-04T00:00:00+02:00</updated>
    <id>http://kisom.github.com/blog/2011/07/04/rgtdd</id>
    <content type="html"><![CDATA[<p>One of the most important parts of becoming a useful developer is to find a
workflow that maximises productivty. There are plenty of methodologies and tools
people have come up with just for this - Agile, XP, BDD, TDD, RDD, and many
others. Of course, most everyone has their own unique flavour, and of course
I&#8217;m going to talk about mine. I&#8217;ve spent a lot of time trying different things
(and too much time going back to just grinding out code). This is the first post
of a milti-part series on how I&#8217;ve increased my productivity and what I do to
get things done. Unfortunately, my personal projects are sort of haphazard still,
but I have enjoyed success with this at work.</p>

<p>RGTDD has made a difference in how I develop code and stay productive;
furthermore, above just using a specific development methodology, I&#8217;ve found
certain tools to assist me in being productive.</p>

<!-- more -->


<p>So, RGTDD. It stands for README-generated Test-Driven Development. I took Tom
Preston-Werner&#8217;s <a href="http://tom.preston-werner.com/2010/08/23/readme-driven-development.html">README-driven development</a>
and adapted it to my own use. Without rehashing his post, READMEs factor in like
this: once the project is started, the first task to do is write the README. Once
the README is written, you lock it in and should not be changed except to fix
typos and spelling errors. This has several advantages:</p>

<ol>
<li><p>First, you end up having a single introductory piece of documentation. This
file contains the justification for you program, a quick introduction to its
features, and usage information.</p></li>
<li><p>Second, locking in the README means you prevent feature creep. You contract
yourself to the end user (yourself, future end users, the client, etc&#8230;) to
implement specifically the features in the README. As a rule of thumb, each
iteration of the README should have no more than five features - each feature
should be a concrete task. If the tasks are particularly complex, I generally
avoid implementing more than three. I have found for myself that trying to
implement much more than that results in code and projects that stagnate or
quickly become spaghetti code.</p></li>
<li><p>Third, you know what you need to code and what the code should specifically
do. I&#8217;ve found that a lot of times I have an idea for project X, but only have
a vague of idea of what it will do. It is part of good engineering to have a
well-laid out design and path for the project to direct development. I have found
this helps me to keep my code from getting overgrown.</p></li>
</ol>


<p>The README at this point now specifies an interface for users to interact with
the code. From here, you begin writing tests that cover the features. As you
begin writing these tests, you will likely figure out other components to the
code. You start writing tests from these. At this point, using the README as a
guiding document, I switch to a test-driven mode. Once the tests perform as
they should (including tests that are expected to fail), I consider this a
release. (I&#8217;ll write a post later on about what I&#8217;m doing for releases).</p>

<p>That&#8217;s a quick introduction to the project management methodology I use. I&#8217;ll
cover some specific tools to help out with various languages, my version
control and release methods, things I wasn&#8217;t taught in school, and what I&#8217;ve
found to help me keep my life organised.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[woofs released]]></title>
    <link href="http://kisom.github.com/blog/2011/06/20/woofs-released/"/>
    <updated>2011-06-20T00:00:00+02:00</updated>
    <id>http://kisom.github.com/blog/2011/06/20/woofs-released</id>
    <content type="html"><![CDATA[<h2>web one-time offer file securely</h2>

<p>in the past, i found <a href="http://www.home.unix-ag.org/simon/woof.html">simon budig&#8217;s woof script</a>
but i wanted an SSL-secured version. i finally got around to writing an
SSL-secured version. i&#8217;d started one in december, but i was still fairly new to
python, but i finally pulled it off. the repo can be found
<a href="https://github.com/kisom/woofs">here</a>.</p>

<p>interestingly enough, if you look at the git commit logs there are three
activity clusters: when i started the project in december, a brief period in
may when i started the major rewrite to include my own http server, and a
flurry of activity today when i added in ssl support.</p>

<p>so what does it do? as the name implies, it serves a file via https and by
default serves it only once. it&#8217;s designed to allow quick filesharing between
two systems; the transfer is protected by SSL. i won&#8217;t rewrite the documentation
here, so be sure to check the documentation to take a look at usage. perhaps
it will be useful to you as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Working Introduction to Crypto with PyCrypto]]></title>
    <link href="http://kisom.github.com/blog/2011/06/17/intro-to-crypto/"/>
    <updated>2011-06-17T16:15:00+02:00</updated>
    <id>http://kisom.github.com/blog/2011/06/17/intro-to-crypto</id>
    <content type="html"><![CDATA[<h2>Preface</h2>

<p>This document was originally a LaTeX document; I&#8217;ve taken the pains to
convert it by hand to markdown. There are some points where the fact
that I don&#8217;t have footnotes in here makes some of the sentences a bit
awkward; one day I&#8217;ll clean them up, I promise.</p>

<p>I&#8217;ve put up a <a href="http://kisom.github.com/downloads/crypto_intro.pdf">PDF version</a> here, and updates
are posted at the <a href="https://github.com/kisom/crypto_intro">github repo</a>.</p>

<p>If you see any LaTeX artifacts (or other errors) lurking, feel free to
let me know!</p>

<h2>Introduction</h2>

<p>Recently at work I have been using the
<a href="https://www.dlitz.net/software/pycrypto/">PyCrypto</a> libraries quite a bit.
The documentation is pretty good, but there are a few areas that took me a bit
to figure out. In this post, I&#8217;ll be writing up a quick overview of the
PyCrypto library and cover some general things to know when writing
cryptographic code in general. I&#8217;ll go over symmetric, public-key, hybrid,
and message authentication codes. Keep in mind this is a quick introduction and
a lot of gross simplifications are made. For a more complete introduction to
cryptography, take a look at the references at the end of this article. This
article is just an appetite-whetter - if you have a real need for information
security you should hire an expert. Real data security goes beyond this quick
introduction (you wouldn&#8217;t trust the design and engineering of a bridge to
a student with a quick introduction to civil engineering, would you?)</p>

<!-- more -->


<p>Some quick terminology: for those unfamiliar, I introduce the following terms:</p>

<ul>
<li><strong>plaintext</strong>: the original message</li>
<li><strong>ciphertext</strong>: the message after cryptographic transformations are applied
to obscure the original message.</li>
<li><strong>encrypt</strong>: producing ciphertext by applying cryptographic transformations
to plaintext.</li>
<li><strong>decrypt</strong>: producing plaintext by applying cryptographic transformations to
ciphertext.</li>
<li><strong>cipher</strong>: a particular set of cryptographic transformations providing means
of both encryption and decryption.</li>
<li><strong>ciphersystem</strong>: a set of cryptographic transformations that take a large input and
transform it to a unique (typically fixed-size) output. For hashes to be
cryptographically secure, collisions should be practically nonexistent. It
should be practically impossible to determine the input from the output.</li>
</ul>


<p>Cryptography is an often misunderstood component of information security, so
an overview of what it is and what role it plays is in order. There are four
major roles that cryptography plays:</p>

<ul>
<li><strong>confidentiality</strong>: ensuring that only the intended recipients receive the
plaintext of the message.</li>
<li><strong>data integrity</strong>: the plaintext message arrives unaltered.</li>
<li><strong>entity authentication</strong>: the identity of the sender is verified. An entity
may be a person or a machine.</li>
<li><strong>message authentication</strong>: the message is verified as having been
unaltered.</li>
</ul>


<p>Note that cryptography is used to obscure the contents of a message and verify
its contents and source. It will <strong>not</strong> hide the fact that two entities are
communicating.</p>

<p>There are two basic types of ciphers: symmetric and public-key ciphers. A
symmetric key cipher employs the use of shared secret keys. They also tend to
be much faster than public-key ciphers. A public-key cipher is so-called because
each key consists of a private key which is used to generate a public key. Like
their names imply, the private key is kept secret while the public key is
passed around. First, I&#8217;ll take a look at a specific type of symmetric ciphers:
block ciphers.</p>

<h2>Block Ciphers</h2>

<p>There are two further types of symmetric keys: stream and block ciphers. Stream
ciphers operate on data streams, i.e. one byte at a time. Block ciphers operate
on blocks of data, typically 16 bytes at a time. The most common block cipher
and the standard one you should use unless you have a very good reason to use
another one is the <a href="https://secure.wikimedia.org/wikipedia/en/wiki/Advanced_Encryption_Standard">AES</a>
block cipher, also documented in <a href="http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf">FIPS PUB 197</a>.
AES is a specific subset of the Rijndael cipher. AES uses block size of
128-bits (16 bytes); data should be padded out to fit the block size - the
length of the data block must be multiple of the block size. For example,
given an input of <code>ABCDABCDABCDABCD ABCDABCDABCDABCD</code> no padding would
need to be done. However, given <code>ABCDABCDABCDABCD ABCDABCDABCD</code> an
additional 4 bytes of padding would need to be added. A common padding scheme
is to use <code>0x80</code> as the first byte of padding, with <code>{0x00</code> bytes
filling out the rest of the padding. With padding, the previous example would
look like: <code>ABCDABCDABCDABCD ABCDABCDABCD\x80\x00\x00\x00</code>.</p>

<p>Writing a padding function is pretty easy:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">pad_data</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># return data if no padding is required</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">%</span> <span class="mi">16</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">data</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># subtract one byte that should be the 0x80</span>
</span><span class='line'>  <span class="c"># if 0 bytes of padding are required, it means only</span>
</span><span class='line'>  <span class="c"># a single \x80 is required.</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">padding_required</span>     <span class="o">=</span> <span class="mi">15</span> <span class="o">-</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">%</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="s">&#39;</span><span class="si">%s</span><span class="se">\x80</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">data</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="s">&#39;</span><span class="si">%s%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span> <span class="o">*</span> <span class="n">padding_required</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">data</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similarly, removing padding is also easy:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">unpad_data</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="ow">not</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">data</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;</span><span class="se">\x80</span><span class="s">&#39;</span><span class="p">:</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">data</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">data</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ve included these functions in the <a href="http://kisom.github.com/downloads/crypto_intro_example.tar.gz">example code</a>
for this tutorial.</p>

<p>Encryption with a block cipher requires selecting a
<a href="https://secure.wikimedia.org/wikipedia/en/wiki/Block_cipher_modes_of_operation">block mode</a>.
By far the most common mode used is <strong>cipher block chaining</strong> or
<em>CBC</em> mode. Other modes include <strong>counter (CTR)</strong>,
<strong>cipher feedback (CFB)</strong>, and the extremely insecure
<strong>electronic codebook (ECB)</strong>. CBC mode is the standard and is
well-vetted, so I will stick to that in this tutorial. Cipher block chaining
works by XORing the previous block of ciphertext with the current block. You
might recognise that the first block has nothing to be XOR&#8217;d with; enter the
<em><a href="https://secure.wikimedia.org/wikipedia/en/wiki/Initialization_vector">initialisation vector</a></em>.
This comprises a number of randomly-generated bytes of data the same
size as the cipher&#8217;s block size. This initialisation vector should random
enough that it cannot be recovered; one manner of doing this is to combine a
standard UNIX timestamp with a block-size group of random data, using a standard
hashing algorithm such as MD5 to make it unique.</p>

<p>One of the most critical components to encryption is properly generating
random data. Fortunately, most of this is handled by the PyCrypto library&#8217;s
<code>Crypto.Random.OSRNG module</code>. You should know that the more entropy sources
available (such as network traffic and disk activity), the faster the system
can generate cryptographically-secure random data. I&#8217;ve written a function that
can generate a <em><a href="https://secure.wikimedia.org/wikipedia/en/wiki/Cryptographic_nonce">nonce</a></em>
suitable for use as an initialisation vector. This will work on a UNIX machine;
the comments note how easy it is to adapt it to a Windows machine. This
function requires a version of PyCrypto at least 2.1.0 or higher.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">Crypto.Random.OSRNG.posix</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">generate_nonce</span><span class="p">():</span>
</span><span class='line'>  <span class="n">rnd</span> <span class="o">=</span> <span class="n">Crypto</span><span class="o">.</span><span class="n">Random</span><span class="o">.</span><span class="n">OSRNG</span><span class="o">.</span><span class="n">posix</span><span class="o">.</span><span class="n">new</span><span class="p">()</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">BLOCK_SIZE</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rnd</span> <span class="o">=</span> <span class="s">&#39;</span><span class="si">%s%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">rnd</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()))</span>
</span><span class='line'>  <span class="n">nonce</span> <span class="o">=</span> <span class="n">Crypto</span><span class="o">.</span><span class="n">Hash</span><span class="o">.</span><span class="n">MD5</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">data</span> <span class="o">=</span> <span class="n">rnd</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">nonce</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>I will note here that the python <code>random</code> module is completely unsuitable for
cryptography (as it is completely deterministic). You shouldn&#8217;t use it for
cryptographic code.</p>

<p>Symmetric ciphers are so-named because the key is shared across any entities.
There are three key sizes for AES: 128-bit, 192-bit, and 256-bit, aka 16-byte,
24-byte, and 32-byte key sizes. If you want to use a passphrase, you
should use a digest algorithm that produces an appropriately sized digest, and
hash that passphrase. For example, for AES-256, you would want to use SHA-256.
Here is a sample function to generate an AES-256 key from a passphrase:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># generate an AES-256 key from a passphrase</span>
</span><span class='line'><span class="k">def</span> <span class="nf">passphrase</span><span class="p">(</span><span class="n">password</span><span class="p">,</span> <span class="n">readable</span> <span class="o">=</span> <span class="bp">False</span><span class="p">):</span>
</span><span class='line'>  <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd"> Converts a passphrase to a format suitable for use as an AES key.</span>
</span><span class='line'>
</span><span class='line'><span class="sd"> If readable is set to True, the key is output as a hex digest. This is</span>
</span><span class='line'><span class="sd"> suitable for sharing with users or printing to screen when debugging</span>
</span><span class='line'><span class="sd"> code.</span>
</span><span class='line'>
</span><span class='line'><span class="sd"> By default readable is set to False, in which case the value it </span>
</span><span class='line'><span class="sd"> returns is suitable for use directly as an AES-256 key.</span>
</span><span class='line'><span class="sd"> &quot;&quot;&quot;</span>
</span><span class='line'>  <span class="n">key</span>     <span class="o">=</span> <span class="n">Crypto</span><span class="o">.</span><span class="n">Hash</span><span class="o">.</span><span class="n">SHA256</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">readable</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">key</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">key</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could include this a set of AES encryption and decryption functions:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">mode</span> <span class="o">=</span> <span class="n">Crypto</span><span class="o">.</span><span class="n">Cipher</span><span class="o">.</span><span class="n">AES</span><span class="o">.</span><span class="n">MODE_CBC</span>       <span class="c"># shortcut to clean up code</span>
</span><span class='line'>
</span><span class='line'><span class="c"># AES-256 encryption using a passphrase</span>
</span><span class='line'><span class="k">def</span> <span class="nf">passphrase_encrypt</span><span class="p">(</span><span class="n">password</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span><span class='line'>    <span class="n">key</span>     <span class="o">=</span> <span class="n">passphrase</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span>    <span class="o">=</span> <span class="n">pad_data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="n">aes</span>     <span class="o">=</span> <span class="n">Crypto</span><span class="o">.</span><span class="n">Cipher</span><span class="o">.</span><span class="n">AES</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">iv</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">aes</span><span class="o">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># AES-256 decryption using a passphrase</span>
</span><span class='line'><span class="k">def</span> <span class="nf">passphrase_decrypt</span><span class="p">(</span><span class="n">password</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span><span class='line'>    <span class="n">key</span>     <span class="o">=</span> <span class="n">passphrase</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
</span><span class='line'>  <span class="n">aes</span>     <span class="o">=</span> <span class="n">Crypto</span><span class="o">.</span><span class="n">Cipher</span><span class="o">.</span><span class="n">AES</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">iv</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span>    <span class="o">=</span> <span class="n">aes</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">unpad_data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice how the data is padded before being encrypted and unpadded after
decryption - the decryption process will not remove the padding on its own.</p>

<p>Unless you are you doing interactive encryption passphrase encryption won&#8217;t be
terribly useful. Instead, we just need to generate 32 random bytes (and make
sure we keep track of it) and use that as the key:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># generate a random AES-256 key</span>
</span><span class='line'><span class="k">def</span> <span class="nf">generate_aes_key</span><span class="p">():</span>
</span><span class='line'>  <span class="n">rnd</span>     <span class="o">=</span> <span class="n">Crypto</span><span class="o">.</span><span class="n">Random</span><span class="o">.</span><span class="n">OSRNG</span><span class="o">.</span><span class="n">posix</span><span class="o">.</span><span class="n">new</span><span class="p">()</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">KEY_SIZE</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">rnd</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can use this key directly in the AES transformations:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span><span class='line'>    <span class="n">aes</span>     <span class="o">=</span> <span class="n">Crypto</span><span class="o">.</span><span class="n">Cipher</span><span class="o">.</span><span class="n">AES</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">iv</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span>    <span class="o">=</span> <span class="n">pad_data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">aes</span><span class="o">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span><span class='line'>    <span class="n">aes</span>     <span class="o">=</span> <span class="n">Crypto</span><span class="o">.</span><span class="n">Cipher</span><span class="o">.</span><span class="n">AES</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">iv</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span>    <span class="o">=</span> <span class="n">aes</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">unpad_data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That should cover the basics of block cipher encryption. We&#8217;ve gone over key
generation, padding, and encryption / decryption. AES-256 isn&#8217;t the only
block cipher provided by the PyCrypto package, but again: it is the standard
and well vetted.</p>

<h2>ASCII-Armouring</h2>

<p>I&#8217;m going to take a quick detour and talk about ASCII armouring. If you&#8217;ve
played with the crypto functions above, you&#8217;ll notice they produce an annoying
dump of binary data that can be a hassle to deal with. One common technique for
making the data a little bit easier to deal with is to encode it with
<a href="https://secure.wikimedia.org/wikipedia/en/wiki/Base64">base64</a>. There
are a few ways to incorporate this into python:</p>

<h3>Absolute Base64 Encoding</h3>

<p>The easiest way is to just base64 encode everything in the encrypt function.
Everything that goes into the decrypt function should be in base64 - if it&#8217;s
not, the <code>base64</code> module will throw an error: you could catch this and
then try to decode it as binary data.</p>

<h3>A Simple Header</h3>

<p>A slightly more complex option, and the one I adopt in this article, is to use
a <code>x00</code> as the first byte of the ciphertext for binary data, and to use
<code>\x41</code> (an ASCII &#8221;<code>A</code>&#8221;) for ASCII encoded data. This will increase
the complexity of the encryption and decryption functions slightly. We&#8217;ll also
pack the initialisation vector at the beginning of the file as well. Given now
that the <code>iv</code> argument might be <code>None</code> in the decrypt function, I
will have to rearrange the arguments a bit; for consistency, I will move it in
both functions. I leave adding it into the <code>passphrase_encrypt</code> and
<code>passphrase_decrypt</code> functions as an exercise for the reader. My modified
functions look like this now:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">armour</span> <span class="o">=</span> <span class="bp">False</span><span class="p">):</span>
</span><span class='line'>  <span class="n">aes</span>     <span class="o">=</span> <span class="n">Crypto</span><span class="o">.</span><span class="n">Cipher</span><span class="o">.</span><span class="n">AES</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">iv</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span>    <span class="o">=</span> <span class="n">pad_data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="n">ct</span>      <span class="o">=</span> <span class="n">aes</span><span class="o">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>         <span class="c"># ciphertext</span>
</span><span class='line'>  <span class="n">ct</span>      <span class="o">=</span> <span class="n">iv</span> <span class="o">+</span> <span class="n">ct</span>                   <span class="c"># pack the initialisation vector in</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># ascii-armouring</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">armour</span><span class="p">:</span>
</span><span class='line'>      <span class="n">ct</span> <span class="o">=</span> <span class="s">&#39;</span><span class="se">\x41</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">base64</span><span class="o">.</span><span class="n">encodestring</span><span class="p">(</span><span class="n">ct</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">ct</span> <span class="o">=</span> <span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">ct</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">ct</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">iv</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
</span><span class='line'>  <span class="c"># remove ascii-armouring if present</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span><span class="p">:</span>
</span><span class='line'>      <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span><span class='line'>  <span class="k">elif</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;</span><span class="se">\x41</span><span class="s">&#39;</span><span class="p">:</span>
</span><span class='line'>      <span class="n">data</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">decodestring</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">iv</span>      <span class="o">=</span> <span class="n">data</span><span class="p">[:</span><span class="mi">16</span><span class="p">]</span>
</span><span class='line'>  <span class="n">data</span>    <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">16</span><span class="p">:]</span>
</span><span class='line'>  <span class="n">aes</span>     <span class="o">=</span> <span class="n">Crypto</span><span class="o">.</span><span class="n">Cipher</span><span class="o">.</span><span class="n">AES</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">iv</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span>    <span class="o">=</span> <span class="n">aes</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">unpad_data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>A More Complex Container</h3>

<p>There are more complex ways to do it (and you&#8217;ll see it with the public keys
in the next section) that involve putting the base64 into a container of sorts
that contains additional information about the key.</p>

<h2>Public Key Cryptography</h2>

<p>Now it is time to take a look at public-key cryptography. Public-key
cryptography, or PKC, involves the use of two-part keys. The private key is
the sensitive key that should be kept private by the owning entity, whereas the
public key (which is generated from the private key) is meant to be distributed
to any entities which must communicate securely with the entity owning the
private key. Confusing? Let&#8217;s look at this using the venerable Alice and Bob,
patron saints of cryptography.</p>

<p>Alice wants to talk to Bob, but doesn&#8217;t want Eve to know the contents of the
message. Both Alice and Bob generate a set of private keys. From those private
keys, they both generate public keys. Let&#8217;s say they post their public keys on
their websites. Alice wants to send a private message to Bob, so she looks up
Bob&#8217;s public key from his site. (In fact, there is a way to distribute keys via
a central site or entity; this is called a public key infrastructure (PKI). The
public key can be used as the key to encrypt a message with PKC. The resulting
ciphertext can only be decrypted using Bob&#8217;s private key. Alice sends Bob the
resulting ciphertext, which Eve cannot decrypt without Bob&#8217;s private key.
Hopefully this is a little less confusing.</p>

<p>One of the most common PKC systems is RSA (which is an acronym for the last
names of the designers of the algorithm). Generally, RSA keys are 1024-bit,
2048-bit, or 4096-bits long. The keys are most often in
<a href="https://secure.wikimedia.org/wikipedia/en/wiki/Privacy-enhanced_Electronic_Mail">PEM</a>
or
<a href="https://secure.wikimedia.org/wikipedia/en/wiki/Distinguished_Encoding_Rules">DER</a>
format. Generating RSA keys with PyCrypto is extremely easy:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">generate_key</span><span class="p">(</span><span class="n">size</span><span class="p">):</span>
</span><span class='line'>  <span class="n">PRNG</span>    <span class="o">=</span> <span class="n">Crypto</span><span class="o">.</span><span class="n">Random</span><span class="o">.</span><span class="n">OSRNG</span><span class="o">.</span><span class="n">posix</span><span class="o">.</span><span class="n">new</span><span class="p">()</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'>  <span class="n">key</span>     <span class="o">=</span> <span class="n">Crypto</span><span class="o">.</span><span class="n">PublicKey</span><span class="o">.</span><span class="n">RSA</span><span class="o">.</span><span class="n">generate</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">PRNG</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">key</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>key</code> that is returned isn&#8217;t like the keys we used with the block ciphers:
it is an RSA object and comes with several useful built-in methods. One of
these is the <code>size()</code> method, which returns the size of the key in bits minus
one. For example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">publickey</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">key</span> <span class="o">=</span> <span class="n">publickey</span><span class="o">.</span><span class="n">generate_key</span><span class="p">(</span> <span class="mi">1024</span> <span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">key</span><span class="o">.</span><span class="n">size</span><span class="p">()</span>
</span><span class='line'><span class="mi">1023</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A quick note: I will use 1024-bit keys in this tutorial because they are
faster to generate, but in practice you should be using at least 2048-bit
keys. The key also includes encryption and decryption methods in the class:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">publickey</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">base64</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&#39;Test message...&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">ciphertext</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">base64</span><span class="o">.</span><span class="n">encodestring</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'><span class="n">gzA9gXfHqnkValdhhYjRVVSxuygx48i66h0vFUnmVu8FZXJtmaACvNDo43D0vjjHzFiblE1eCFiI</span>
</span><span class='line'><span class="n">xlhVuHxldWXJSnARgWX1bTY7imR9Hve</span><span class="o">+</span><span class="n">WQC8rl</span><span class="o">+</span><span class="n">qB5xpq3xnKH7</span><span class="o">/</span><span class="n">z8</span><span class="o">/</span><span class="mi">5</span><span class="n">YdLvCo</span><span class="o">/</span><span class="n">knXYE1cI</span><span class="o">/</span><span class="n">XYJP</span>
</span><span class='line'><span class="n">EP1nA6bUZNj6bD1Zx4w</span><span class="o">=</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>None</code> that is passed into the encryption function is part of the
PyCrypto API for those publickey ciphers requiring an additional random number
function to be passed in. It returns a tuple containing only the encrypted
message. In order to pass this to the decryption function, we need to pass only
the encrypted message as a string:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">ciphertext</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="bp">None</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">key</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;Test message...&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>While these are simple enough, we could put them into a pair of functions that
also include ASCII-armouring:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">armour</span> <span class="o">=</span> <span class="bp">True</span><span class="p">):</span>
</span><span class='line'>  <span class="n">ciphertext</span>  <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="n">encrypt</span><span class="p">(</span> <span class="n">message</span><span class="p">,</span> <span class="bp">None</span> <span class="p">)</span>
</span><span class='line'>  <span class="n">ciphertext</span>  <span class="o">=</span> <span class="n">ciphertext</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">armour</span><span class="p">:</span>
</span><span class='line'>      <span class="n">ciphertext</span> <span class="o">=</span> <span class="s">&#39;</span><span class="se">\x41</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">base64</span><span class="o">.</span><span class="n">encodestring</span><span class="p">(</span> <span class="n">ciphertext</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">ciphertext</span> <span class="o">=</span> <span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">base64</span><span class="o">.</span><span class="n">encodestring</span><span class="p">(</span> <span class="n">ciphertext</span> <span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="n">ciphertext</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span>   <span class="s">&#39;</span><span class="se">\x00</span><span class="s">&#39;</span> <span class="o">==</span> <span class="n">message</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
</span><span class='line'>      <span class="n">message</span> <span class="o">=</span> <span class="n">message</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span><span class='line'>  <span class="k">elif</span> <span class="s">&#39;</span><span class="se">\x41</span><span class="s">&#39;</span> <span class="o">==</span> <span class="n">message</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
</span><span class='line'>      <span class="n">message</span> <span class="o">==</span> <span class="n">base64</span><span class="o">.</span><span class="n">decodestring</span><span class="p">(</span> <span class="n">message</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">plaintext</span>   <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span> <span class="n">message</span> <span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">plaintext</span>
</span></code></pre></td></tr></table></div></figure>


<p>These two functions present a common API that will simplify encryption and
decryption and make it a little easier to read. Assuming we still have the same
<code>message</code> definition as before:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">ciphertext</span> <span class="o">=</span> <span class="n">publickey</span><span class="o">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">publickey</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&#39;Test message...&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, what if we want to export this generated key and read it in later? The key
comes with the method <code>exportKey()</code>. If the key is a private key, it will
export the private key; if it is a public key, it will export the public key.
We can write functions to backup our private key (which <strong>absolutely</strong>
needs to be kept secure) and a function to export our public key, suitable for
uploading to our web page or to a PKI keystore:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># backup our key, whether public or private</span>
</span><span class='line'><span class="k">def</span> <span class="nf">export_key</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>      <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">except</span> <span class="ne">IOError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>      <span class="k">print</span> <span class="n">e</span>
</span><span class='line'>      <span class="k">raise</span> <span class="n">e</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span> <span class="n">key</span><span class="o">.</span><span class="n">exportKey</span><span class="p">()</span> <span class="p">)</span>
</span><span class='line'>      <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># will only export the public key</span>
</span><span class='line'><span class="k">def</span> <span class="nf">export_pubkey</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class='line'>  <span class="k">try</span><span class="p">:</span>
</span><span class='line'>      <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">except</span> <span class="ne">IOError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>      <span class="k">print</span> <span class="n">e</span>
</span><span class='line'>      <span class="k">raise</span> <span class="n">e</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span> <span class="n">key</span><span class="o">.</span><span class="n">publickey</span><span class="p">()</span><span class="o">.</span><span class="n">exportKey</span><span class="p">()</span> <span class="p">)</span>
</span><span class='line'>      <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Importing a key is done using the <code>RSA.importKey</code> function:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">load_key</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>      <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>  <span class="k">except</span> <span class="ne">IOError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>      <span class="k">print</span> <span class="n">e</span>
</span><span class='line'>      <span class="k">raise</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">key</span> <span class="o">=</span> <span class="n">Crypto</span><span class="o">.</span><span class="n">PublicKey</span><span class="o">.</span><span class="n">RSA</span><span class="o">.</span><span class="n">importKey</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class='line'>      <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">key</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can take a look at the difference between the public and private keys:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">key</span> <span class="o">=</span> <span class="n">publickey</span><span class="o">.</span><span class="n">generate_key</span><span class="p">(</span> <span class="mi">1024</span> <span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">key</span><span class="o">.</span><span class="n">exportKey</span><span class="p">()</span>
</span><span class='line'><span class="o">-----</span><span class="n">BEGIN</span> <span class="n">RSA</span> <span class="n">PRIVATE</span> <span class="n">KEY</span><span class="o">-----</span>
</span><span class='line'><span class="n">MIICXAIBAAKBgQCpVA2pqLuS1fmutvx</span><span class="o">/</span><span class="n">lBhlk</span><span class="o">+</span><span class="n">UMXWcZKVzh</span><span class="o">+</span><span class="n">n5D6Hv</span><span class="o">/</span><span class="n">ZWhlzRuC</span>
</span><span class='line'><span class="n">q408uhVBUD32ylbQ2iFdhA1leq0xWRGQ8Y3LlO6tQZ0gC2oOHetX3YOghO3q4yMe</span>
</span><span class='line'><span class="n">wvuU</span><span class="o">+</span><span class="n">Wb6bS1aRDc9YV3IMPjQW47MOROUldjMEdJJhfxko5YZuaghhpd56wIDAQAB</span>
</span><span class='line'><span class="n">AoGAaRznellnT2iLHX00U1IwruXXOwzEUmdN5G4mcathRhLCcueXW095VqhBR5Ez</span>
</span><span class='line'><span class="n">Vf8XU4EFU1MFKei0mLys3ehFV4aoTfU1xm91jXNZrM</span><span class="o">/</span><span class="n">rIjHQQObx2fcDSgrM9iyd</span>
</span><span class='line'><span class="n">kcgGrz5nDvsyxAxOwxCh96vNxZZYTWa8Zcqng1XYeW93nFkCQQC8Rqwn9Sa1UjBB</span>
</span><span class='line'><span class="n">mIepkcdYfflkzmD7IBcgiTmGFQ9NXiehY6MQd0UJoFYGBEknPazzWQbNVpkZO4TR</span>
</span><span class='line'><span class="n">oPuKNjSNAkEA5jyWJhKyq2BVD6UP77vYTJu48OhLx4J7qb3DKHnk5syOBnbke2Df</span>
</span><span class='line'><span class="n">KV1VjRsipSjb4EXAWhWaqnTfPPDbvyWWVwJAWUgSP2iLkJSG</span><span class="o">+</span><span class="n">bRBMPJGW</span><span class="o">/</span><span class="n">pxF5Ke</span>
</span><span class='line'><span class="n">fre6</span><span class="o">/</span><span class="mi">9</span><span class="n">zTAHhgJ0os9OVw4FAO1v</span><span class="o">/</span><span class="n">Hi1bg8dDXgRaImTsloseMtnPmlKYbyQJAbmbr</span>
</span><span class='line'><span class="n">EQKyTl95KnFaPPj0dXfOrSaW</span><span class="o">/+</span><span class="n">pf5jsqlAQvcUTxbcQhN9Bx8mHhHjK</span><span class="o">+</span><span class="mi">4</span><span class="n">DfBh7</span><span class="o">+</span><span class="n">q</span>
</span><span class='line'><span class="n">xwfJDKfSTGSq2vPpLQJBAL5irIeHoFESPZZI1NW7OkpKPcO</span><span class="o">/</span><span class="mi">2</span><span class="n">ps9NkhgZJQ7Pc11</span>
</span><span class='line'><span class="n">lWh6Ch2cnBzZmeh6lN</span><span class="o">/</span><span class="n">zC4l3mLVhdZSXkEKOzeuFpBs</span><span class="o">=</span>
</span><span class='line'><span class="o">-----</span><span class="n">END</span> <span class="n">RSA</span> <span class="n">PRIVATE</span> <span class="n">KEY</span><span class="o">-----</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">pk</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="n">publickey</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">pk</span><span class="o">.</span><span class="n">exportKey</span><span class="p">()</span>
</span><span class='line'><span class="o">-----</span><span class="n">BEGIN</span> <span class="n">PUBLIC</span> <span class="n">KEY</span><span class="o">-----</span>
</span><span class='line'><span class="n">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCpVA2pqLuS1fmutvx</span><span class="o">/</span><span class="n">lBhlk</span><span class="o">+</span><span class="n">UM</span>
</span><span class='line'><span class="n">XWcZKVzh</span><span class="o">+</span><span class="n">n5D6Hv</span><span class="o">/</span><span class="n">ZWhlzRuCq408uhVBUD32ylbQ2iFdhA1leq0xWRGQ8Y3LlO6t</span>
</span><span class='line'><span class="n">QZ0gC2oOHetX3YOghO3q4yMewvuU</span><span class="o">+</span><span class="n">Wb6bS1aRDc9YV3IMPjQW47MOROUldjMEdJJ</span>
</span><span class='line'><span class="n">hfxko5YZuaghhpd56wIDAQAB</span>
</span><span class='line'><span class="o">-----</span><span class="n">END</span> <span class="n">PUBLIC</span> <span class="n">KEY</span><span class="o">-----</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the <code>export_pubkey()</code> function, you can pass that file
around to people to encrypt messages to you. Often, you wil want to generate a
keypair to give to people. One convention is to name the secret key
<code>keyname.prv</code> (prv for private, and sometimes <code>keyname.key</code>) and the
public key <code>keyname.pub</code>. We will
follow that convention in an <code>export_keypair()</code> function:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">export_keypair</span><span class="p">(</span><span class="n">basename</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class='line'>  <span class="n">pubkeyfile</span>   <span class="o">=</span> <span class="n">basename</span> <span class="o">+</span> <span class="s">&#39;.pub&#39;</span>
</span><span class='line'>  <span class="n">prvkeyfile</span>   <span class="o">=</span> <span class="n">basename</span> <span class="o">+</span> <span class="s">&#39;.prv&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">export_key</span><span class="p">(</span><span class="n">prvkeyfile</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>  <span class="n">export_pubkey</span><span class="p">(</span><span class="n">pubkeyfile</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>For example, Bob generates a keypair and emails the public key to Alice:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">key</span> <span class="o">=</span> <span class="n">publickey</span><span class="o">.</span><span class="n">generate_key</span><span class="p">(</span> <span class="mi">1024</span> <span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">key</span><span class="o">.</span><span class="n">size</span><span class="p">()</span>
</span><span class='line'><span class="mi">1023</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">key</span><span class="o">.</span><span class="n">has_private</span><span class="p">()</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">publickey</span><span class="o">.</span><span class="n">export_keypair</span><span class="p">(</span><span class="s">&#39;bob.prv&#39;</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, Assuming Bob gave Alice <code>bob.pub</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>>>> bob = publickey.load_key('./bob.pub')
</span><span class='line'>>>> message = 'secret message from Alice to Bob'
</span><span class='line'>>>> print publickey.encrypt(bob, message)
</span><span class='line'>AN6RsuXEeKicUZKtZCsDeqGKeB5em+NG/bgoqr9l8ij2o1Gr9sT69tv0zxgmigK/Jt+gPxg/EDu61
</span><span class='line'>nHmAK0XQV7BvJS5jLuBxdJ0mEpysVClu46XN1KHU2l2DsGht9e8OFvhEfDkI5t/cy/gXr0xz/EUi
</span><span class='line'>rqo8qLd9Mw6TerM8gs8=</span></code></pre></td></tr></table></div></figure>


<p>The ASCII-armoured format makes it convenient for Alice to paste the encrypted
message to Bob, so she does, and now Bob has it on his computer. To read it, he
does something similar:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">bob</span> <span class="o">=</span> <span class="n">publickey</span><span class="o">.</span><span class="n">load_key</span><span class="p">(</span><span class="s">&#39;tests/bob.prv&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">publickey</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">bob</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="n">secret</span> <span class="n">message</span> <span class="kn">from</span> <span class="nn">Alice</span><span class="err"> </span><span class="nn">to</span><span class="err"> </span><span class="nn">Bob</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, Bob can&#8217;t be sure that the message came from Alice but he can
read the message. We&#8217;ll cover entity authentication in a later section, but
first, there&#8217;s something else I&#8217;d to point out:</p>

<p>You might have noticed at this point that public key cryptography appears to
be a lot simpler than symmetric key cryptography. The key distribution problem
is certainly easier, especially with a proper PKI. Why would anyone choose to
use symmetric key cryptography over public key cryptography? The answer is
performance: if you compare the block cipher test code (if you don&#8217;t have a
copy of this code, you can get it at the tutorial&#8217;s
<a href="https://www.github.com/kisom/crypto_tutorial">github page</a> or from
<a href="http://kisom.github.com/downloads/crypto_intro_example.tar.gz">this tarball</a> with the public
key test code, you will notice that the block cipher code is orders of magnitude
faster - and it generates far more keys than the public key code. There is a
solution to this problem: hybrid cryptosystems.</p>

<p>Hybrid cryptosystems use public key cryptography to establish a symmetric
session key. Both <strong><a href="https://secure.wikimedia.org/wikipedia/en/wiki/Transport_Layer_Security">TLS</a></strong>
(Transport Layer Security), and its predecessor <strong>SSL</strong> (Secure Sockets
Layer), most often used to secure HTTP transactions, use a hybrid cryptosystem
to speed up establishing a secure session. PGP (and hence GnuPG) also uses
hybrid crypto.</p>

<p>Let&#8217;s say Alice and Bob wish to use hybrid crypto; if Alice initiates the
session, she should be the one to generate the session key. For example,</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">block</span><span class="o">,</span> <span class="nn">publickey</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">session_key</span> <span class="o">=</span> <span class="n">block</span><span class="o">.</span><span class="n">generate_aes_key</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">alice_key</span>   <span class="o">=</span> <span class="n">publickey</span><span class="o">.</span><span class="n">load_key</span><span class="p">(</span><span class="s">&#39;keys/alice.prv&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">bob_key</span>     <span class="o">=</span> <span class="n">publickey</span><span class="o">.</span><span class="n">load_key</span><span class="p">(</span><span class="s">&#39;keys/bob.pub&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">encrypted_session_key</span> <span class="o">=</span> <span class="n">encrypt</span><span class="p">(</span> <span class="n">bob_key</span><span class="p">,</span> <span class="n">session_key</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, Alice should send Bob the <code>encrypted_session_key</code>; she
should retain a copy as well. They can then use this key to communicate using
the much-faster AES256.</p>

<p>In communicating, it might be wise to create a message format that packs in
the session key into a header, and encrypts the rest of the body with the
session key. This is a subject beyond the realm of a quick tutorial - again,
consult with the people who do this on a regular basis.</p>

<h2>Digital Signatures</h2>

<p>In all of the previous examples, we assumed that the identity of the sender
wasn&#8217;t a question. For a symmetric key, that&#8217;s less of a stretch - there&#8217;s no
differentiation between owners. Public keys, however, are supposed to be
associated with an entity. How can we prove the identity of the user? Without
delving into too much into social sciences and trust metrics and a huge
philosophical argument, let&#8217;s look at the basics of signatures.</p>

<p>A signature works similarly to encryption, but it in reverse, and it is slightly
different: a hash of the message is &#8216;encrypted&#8217; by the private key to the
public key. The public key is used to &#8216;decrypt&#8217; this ciphertext. Contrast this
to actual public key encryption: the entire message is encrypted to the private
key by the public key, and the private key is used to decrypt the ciphertext.
With signatures, the &#8216;encrypted&#8217; hash of the message is called the signature,
and the act of &#8216;encryption&#8217; is termed &#8216;signing&#8217;. Similarly, the &#8216;decryption&#8217;
is known as verification or verifying the signature.</p>

<p>PyCrypto&#8217;s PublicKey implementations already come with signatures and
verification methods for keys using <code>sign()</code> and <code>verify()</code>. The signature
is a long in a tuple:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">key</span><span class="o">.</span><span class="n">sign</span><span class="p">(</span> <span class="n">d</span><span class="p">,</span> <span class="bp">None</span> <span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="mi">1738423518152671545669571445860037944518162197656333123466248015147955424248</span>
</span><span class='line'><span class="mi">876723731383711018550231967374810686606623315483033485630977014574359346192927942</span>
</span><span class='line'><span class="mi">623807461783144628656796225504478196458051789241311033020911767301220653148276004</span>
</span><span class='line'><span class="mo">05513575263</span><span class="il">83627059382081878791040169815009051016949220178044764130908L</span><span class="p">,)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can write our own functions to wrap around these two functions and perform
ASCII-armouring if desired. Our signature function should take a key and a
message (and optionally a flag to ASCII armour the signature), and sign a
digest of the message:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">sign</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">armour</span> <span class="o">=</span> <span class="bp">True</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="ow">not</span> <span class="n">key</span><span class="o">.</span><span class="n">can_sign</span><span class="p">():</span>
</span><span class='line'>      <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">digest</span>      <span class="o">=</span> <span class="n">Crypto</span><span class="o">.</span><span class="n">Hash</span><span class="o">.</span><span class="n">SHA256</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">message</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>
</span><span class='line'>  <span class="n">signature</span>   <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="n">sign</span><span class="p">(</span> <span class="n">digest</span><span class="p">,</span> <span class="bp">None</span> <span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">armour</span><span class="p">:</span>
</span><span class='line'>      <span class="n">sig</span>     <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">encodestring</span><span class="p">(</span> <span class="nb">str</span><span class="p">(</span><span class="n">signature</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">sig</span>     <span class="o">=</span> <span class="nb">str</span><span class="p">(</span> <span class="n">signature</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">sig</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The signature is converted to a string to make it easier to pack it into
structures and also to give us consistent input to the verify() function.</p>

<p>Verifying the signature requires that we determine if the signature is ASCII-
armoured or not, then comparing a digest of the message to the signature:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">verify</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">signature</span><span class="p">):</span>
</span><span class='line'>  <span class="k">try</span><span class="p">:</span>
</span><span class='line'>      <span class="n">sig</span>     <span class="o">=</span> <span class="nb">long</span><span class="p">(</span> <span class="n">signature</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">except</span> <span class="ne">ValueError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>      <span class="n">sig</span>     <span class="o">=</span> <span class="nb">long</span><span class="p">(</span> <span class="n">base64</span><span class="o">.</span><span class="n">decodestring</span><span class="p">(</span> <span class="n">signature</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span> <span class="p">),</span> <span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">digest</span>      <span class="o">=</span> <span class="n">Crypto</span><span class="o">.</span><span class="n">Hash</span><span class="o">.</span><span class="n">SHA256</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">message</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">key</span><span class="o">.</span><span class="n">verify</span><span class="p">(</span> <span class="n">digest</span><span class="p">,</span> <span class="p">(</span><span class="n">sig</span><span class="p">,</span> <span class="p">)</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>sign()</code> function returns a signature and the <code>verify()</code> function returns a
boolean. Now, Alice can sign her message to Bob, and Bob knows the key belongs
to Alice. She sends Bob the signature and the encrypted message. Bob then makes
sure Alice&#8217;s key properly verifies the signature to the encrypted message.</p>

<h2>Key Exchange</h2>

<p>So how does Bob know the key actually belongs to Alice? There are two main
schools of thought regarding the authentication of key ownership: centralised
and decentralised. TLS/SSL follow the centralised school: a root
certificate (a certificate is a public key encoded with X.509 and which
can have additional informational attributes attached, such as organisation
name and country) authority (CA) signs intermediary CA keys, which then sign
user keys. For example, if Bob runs Foo Widgets, LLC, he can generate an SSL
keypair. From this, he generates a certificate signing request, and sends this
to the CA. The CA, usually after taking some money and ostensibly actually
verifying Bob&#8217;s identity (the extent to which this actually happens
varies widely based on the different CAs), then signs Bob&#8217;s certificate. Bob
sets up his webserver to use his SSL certificate for all secure traffic, and
Alice sees that the CA did in fact sign his certificate. This relies on trusted
central authorities, like VeriSign (there is some question as to whether
VeriSign can actually be trusted, but that is another discussion for another
day&#8230;) Alice&#8217;s web browser would ship with a keystore of select trusted CA
public keys (like VeriSign&#8217;s) that she could use to verify signatures on the
certificates from various sites. This system is called a public key
infrastructure.</p>

<p>The other school of thought is followed by PGP (and GnuPG) - the
decentralised model. In PGP, this is manifested as the <a href="http://www.rubin.ch/pgp/weboftrust.en.html">Web of Trust</a>.
For example, if Carol now wants to talk to Bob and gives Bob her public key,
Bob can check to see if Carol&#8217;s key has been signed by anyone else. We&#8217;ll also
say that Bob knows for a fact that Alice&#8217;s key belongs to Alice, and he trusts
her&mdash;it is quite often important to distinguish between
<em>I know this key belongs to that user</em> and <em>I trust that user</em>, which
is especially important with key signatures - if Bob cannot trust
Alice to properly check identities, she might sign a key for an identity she hasn&#8217;t
checked&mdash;and that Alice has signed Carol&#8217;s key. Bob sees Alice&#8217;s signature on
Carol&#8217;s key and then can be reasonably sure that Carol is who she says it was.
If we repeat the process with Dave, whose key was signed by Carol (whose key
was signed by Alice), Bob might be able to be more certain that the key belongs
to Dave, but maybe he doesn&#8217;t really trust Carol to properly verify identities.
In PGP, Bob can mark keys as having various trust levels, and from this a web
of trust emerges: a picture of how well you can trust that a given key belongs
to a given user.</p>

<p>The key distribution problem is not a quick and easy problem to solve; a lot of
very smart people have spent a lot of time coming up with solutions to the
problem. There are key exchange protocols (such as the
<a href="http://is.gd/Tr0zLP">Diffie-Hellman key exchange</a>
and <a href="https://secure.wikimedia.org/wikipedia/en/wiki/Internet_Key_Exchange">IKE</a>
(which uses Diffie-Hellman) that provide alternatives to the web of trust and
public key infrastructures.</p>

<h2>References</h2>

<ul>
<li>A. J. Menezes, P. C. van Oorschot, and S. A. Vanstone. <em>The Handbook of Applied Cryptography</em>, CRC Press, 5th printing, October 1996.</li>
<li>B. Schneier. <em>Applied Cryptography, Second Edition</em>, John Wiley and Sons, 1996.</li>
<li><a href="https://www.dlitz.net/software/pycrypto/apidoc/">PyCrypto API Documentation</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[starting ocaml]]></title>
    <link href="http://kisom.github.com/blog/2011/05/29/starting-ocaml/"/>
    <updated>2011-05-29T00:00:00+02:00</updated>
    <id>http://kisom.github.com/blog/2011/05/29/starting-ocaml</id>
    <content type="html"><![CDATA[<p>i recently started learning
<a href="http://caml.inria.fr/index.en.html">objective caml</a>. while it may be
better documented than say standard ML, i&#8217;ve still had a few difficulties
getting started. i&#8217;ll be keeping notes here, and my github account will
probably document quite a number of lessons learned.</p>

<p>one of the most difficult parts about starting development in ocaml is
that the best development environment i&#8217;ve found so far is emacs with
tuareg-mode. i personally hate emacs (being a vim or straight vi/nvi type of
character) but tuareg-mode is extremely useful. (using emacs also has the
side-effect of starting me on org-mode). getting started on ubuntu was fairly
easy:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apt-get install ocaml emacs23 tuareg-mode ocaml-findlib
</span></code></pre></td></tr></table></div></figure>


<p>as well as a number of the ocaml libraries (which i recommend using aptitude
to look through and install). i ended up installing the Jane Street core and
the netclient libraries right off that bat.</p>

<p>on OS X using macports, i just had to</p>

<pre><code>    `port install ocaml caml-findlib tuareg-mode.el`
</code></pre>

<p>there are a couple other libraries you can install (like netclient) as well.</p>

<h2>build notes:    </h2>

<ul>
<li>when building new module interfaces (*.cmi), make sure to do</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ocamlc -o <span class="k">$(</span>LIBDIR<span class="k">)</span>/<span class="nv">$*</span>.cmi -c <span class="k">$(</span>SRCDIR<span class="k">)</span>/<span class="nv">$*</span>.mli<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>building %.cmx (i.e. *.ml files):</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">$(</span>FIND<span class="k">)</span> <span class="k">$(</span>NATIVE<span class="k">)</span> -o <span class="nv">$@</span> -I <span class="k">$(</span>LIBDIR<span class="k">)</span> <span class="k">$(</span>INCDIRS<span class="k">)</span> -c <span class="k">$(</span>SRCDIR<span class="k">)</span>/<span class="nv">$*</span>.ml<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing ctrans]]></title>
    <link href="http://kisom.github.com/blog/2011/05/13/presenting-ctrans/"/>
    <updated>2011-05-13T00:00:00+02:00</updated>
    <id>http://kisom.github.com/blog/2011/05/13/presenting-ctrans</id>
    <content type="html"><![CDATA[<h2>intro</h2>

<p>i just finished getting <strong><a href="https://www.github.com/kisom/ctrans">ctrans</a></strong> into
a workable state. what is <strong>ctrans</strong>? in short, it translates comments in a
foreign-language (i.e. russian) to english using google translate and some
regex magic.</p>

<p>the project started when one of my buddies and i started looking at the zeus
source code. <a href="https://www.github.com/clarke187/">zenmower</a> got the first peek
and mentioned all the comments being in russian; i started poking around looking
for something to translate the comments. after ten minutes i couldn&#8217;t find
anything, so as they say, if you want something done do it yourself. i snagged
<a href="http://www.halotis.com/2009/09/15/google-translate-api-python-script/">a python snippet to run google translate</a>
on text passed in. it seemed to work pretty well and handled breaking the text
up into chunks, so i cleaned it up a bit to fit my coding standards and started
writing code to plug into that.</p>

<p>i slapped together some regexes to scan for c-style comments and later
scripting-language (i.e. python, perl, ruby) style &#8216;#&#8217; comments. a couple of
iterations later, i had some mostly-working code that featured
* file extension-based comment scanning (i.e. look for c-style comments in
.cpp files, script-style comments in .pl files)
* a directory scanning mode and a single-file mode
* multiprocess directory scanning: the script builds a list of files that should
be scanned (based solely on file extensions) and maps a pool of workers to scan
through that list of files. i&#8217;ll talk more on the multiprocessing design later.</p>

<h2>unicode notes</h2>

<p>this code worked pretty well on the test files i generated, but choked on the
zeus source, throwing the dreaded
<a href="http://wiki.python.org/moin/UnicodeDecodeError"><code>UnicodeDecodeError</code></a> and
<a href="http://wiki.python.org/moin/UnicodeEncodeError"><code>UnicodeEncodeError</code></a>. after
digging around and finding <a href="http://effbot.org/zone/unicode-objects.htm">some</a>
<a href="http://stackoverflow.com/questions/3588083/unicodeencodeerror-ascii-codec-cant-encode-character-u-xa3">excellent</a>
<a href="http://farmdev.com/talks/unicode/">resources</a> on
<a href="http://www.joelonsoftware.com/articles/Unicode.html">unicode</a> that helped jog
my memory and clarify a few things i wasn&#8217;t thinking about. i came up with a
few notes for dealing with different file encodings:</p>

<ol>
<li>you decode a stream of bytes being read into the program from whatever
encoding the file came in (i.e. utf-8) to a unicode string.</li>
<li>you encode a unicode string to whatever file encoding you want it output as;
for most files, you will likely want utf-8. if you want to print the string, it
needs to be the same encoding as your terminal (i.e.
<code>sys.getdefaultencoding()</code>).</li>
<li>it matters what encoding the file you are reading is. this was a problem for
me, since the zeus source files were often not in utf-8 or ascii.</li>
<li>file encoding detection if you really don&#8217;t know what format the file is in
is extremely difficult and programatically doing this is akin to black magic.
the <a href="http://chardet.feedparser.org/">chardet module</a> is very useful but not
always correct. case in point - the two test source files that ship with ctrans
are saved as utf-8, but watch what happens when we try to guess the encoding on
the python test file:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>In [6]: ctrans.guess_encoding('./test.py')
</span><span class='line'>[+] attemtping to autodetect coding for ./test.py
</span><span class='line'>[+] detected coding ISO-8859-2 for file ./test.py (confidence: 0.90)</span></code></pre></td></tr></table></div></figure>


<p>that&#8217;s a 90% confidence that the file uses a different encoding than it actually
does. automagic should be used sparingly and with supervision.</p>

<h2>concurrency notes</h2>

<p>one design issue that came up is that of concurrency. i had to decide whether to
launch new processes for each network connection (i.e. chunk of text being
translated) or per-file (resulting in several network connections in sequence
per process). the network connections were definitely the bottleneck, but i had
to make sure the text would be returned in the proper sequence (order is <em>sort
of</em> important in source files). in this case, the simplest answer to ensure
the correctness of information, and given that files are the smallest <em>atomic</em>
units, is to launch a new process to translate a file. given a list of the files
that need to be translated, python&#8217;s multiprocessing.Pool.map() makes it
incredibly easy to set up a worker pool.</p>

<p>concurrency also factored into how the file encoding guessing would work -
my original idea was to modify the global variable <code>decodeas</code> and set this based
on whatever encoding the file was guessed to be. however, proper concurrency
requires locking and ensuring the consistency of that variable&#8217;s state. it
requires far less work to return the encoding as a string and set a local
variable in the <code>scan_file()</code> function - the encoding string takes a minimal
amount of memory and avoids the variable getting into an inconsistent state.</p>

<h2>end notes</h2>

<p>ctrans is still in a fairly rough state, but i think given the original goals -
giving zenmower and me fast english translations (as best as could be done) of
the comments in the source - the program does this fairly well. of course,
it stills requires verification to ensure that the proper encodings are being
used but it does work fairly quickly, the biggest slowdown typically being the
network speed.</p>

<p>the first commit was 2011-05-11 in the afternoon and the latest commit with
what i consider revison 1.0 was committed 2011-05-13 - two days of coding,
mostly hampered by network issues at home, to get working code.</p>

<p>the source code is available at the github repo linked at the beginning. one
planned improvement is to guess file encodings based on the average encoding
detected in a directory (i.e. to compensate for possible variations in detected
encoding and baesd on the assumption that encoding doesn&#8217;t vary over a
directory). the code also could be cleaned up quite a bit.</p>

<p>the important thing is that i have working code to show&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compiling Source Navigator in Ubuntu 10.04]]></title>
    <link href="http://kisom.github.com/blog/2010/07/22/compiling-source-navigator-in-ubuntu-10-dot-04/"/>
    <updated>2010-07-22T13:21:00+02:00</updated>
    <id>http://kisom.github.com/blog/2010/07/22/compiling-source-navigator-in-ubuntu-10-dot-04</id>
    <content type="html"><![CDATA[<p>Compiling source navigator under Ubuntu 10.04 is fairly easy once you
get the dependencies down. Grab the source from
<a href="http://sourcenav.sourceforge.net/">the sourceforge page</a>.
The dependencies you need are:</p>

<pre><code>tk tklib libx11-dev libxmu-dev libxmu-headers libxt-dev libtool
</code></pre>

<p>Of course you also need <code>build-essential</code>. Then a quick</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./configure --prefix<span class="o">=</span>/opt/source-nav
</span><span class='line'>make
</span><span class='line'>sudo make install
</span></code></pre></td></tr></table></div></figure>


<p>should do the trick.</p>
]]></content>
  </entry>
  
</feed>
