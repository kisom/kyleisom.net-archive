<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: concurrency | EDOOFUS]]></title>
  <link href="http://kisom.github.com/blog/categories/concurrency/atom.xml" rel="self"/>
  <link href="http://kisom.github.com/"/>
  <updated>2012-11-21T22:57:32-07:00</updated>
  <id>http://kisom.github.com/</id>
  <author>
    <name><![CDATA[Kyle Isom]]></name>
    <email><![CDATA[coder@kyleisom.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Thread-Safe Counters in Go]]></title>
    <link href="http://kisom.github.com/blog/2012/09/06/threadsafe-counters/"/>
    <updated>2012-09-06T18:10:00-06:00</updated>
    <id>http://kisom.github.com/blog/2012/09/06/threadsafe-counters</id>
    <content type="html"><![CDATA[<p>One of my current projects requires a counter that delivers a monotonically
increasing sequence number to a number of threads; this counter has the
following properties:</p>

<ol>
<li><p>the packets that consume counter values must receive the packets in
a monotonically increasing order; the end user rejects any sequence
number that is lower than the last highest received sequence number.</p></li>
<li><p>packets are generated by several threads.</p></li>
<li><p>the sequence number is shared across all threads.</p></li>
</ol>


<p>The sequence number is particularly critical in this project; it is a library
for interfacing with and controlling a UAV (a microdrone, in fact). If the
are sent in the wrong order (resulting in the drone rejecting potentially
critical commands or executing them out of sequence), it could enter an
"unstable flight pattern" (which usually results in the drone establishing an
"inverted resting position").</p>

<!-- more -->


<p>In most languages, this sequence number would be a mutex-protected resource. For
example, in <a href="#note_1">Python</a> it would look something like:</p>

<p>Liquid error: undefined method `join' for #<String:0x007ffd7abb1640></p>

<p>When this runs, you will see the numbers from 1 to 12 printed out in order,
guaranteeing that sequence numbers will be generated properly.</p>

<h2>The Go Way</h2>

<p>In Go, we use goroutines and channels to share memory by communicating (over
channels) as opposed to the more traditional communicating by sharing memory
(which requires locking and other tricks to guarantee that mutable data
maintains its integrity. What does this look like here? Let's take a look at a
code example, and then I'll walk through it. In the library, there is a struct
called <code>Drone</code> with a number of methods that operate on that struct. The
relevant part of the struct is:</p>

<p>Liquid error: undefined method `join' for #<String:0x007ffd7abb1140></p>

<p>We use the <code>sequencer</code> function as the sequence generator, and specify that the
channel is write-only:</p>

<p>Liquid error: undefined method `join' for #<String:0x007ffd7abb0c40></p>

<p>In the initialisation code, we create the channel and launch the sequencer (the
docs for the API the library is targeted to specifically state that the
sequence number starts at one every time the drone is reset):</p>

<p>Liquid error: undefined method `join' for #<String:0x007ffd7abb0740></p>

<p><code>go</code> launches the function that follows it in a <em>goroutine</em>, which is
essentially a lightweight thread. The function that runs in the
goroutine can be called with arguments as normal, however it won't return
until the code exits or the gocode returns. Like most threads, you'll want
some sort of delay. In this case, the delay is caused by the blocking action
on channel sends. In other cases, we can use time.Sleep (which sleeps for
the given number of nanoseconds); a delay of a second would be accomplished
with <code>time.Sleep(1000 * time.Millisecond)</code>.</p>

<p>Lastly we need a way to access the sequence numbers:</p>

<p>Liquid error: undefined method `join' for #<String:0x007ffd7abb0240></p>

<p>How does this work? The core of this solution is our channel, which
stores <a href="#note_2">32-bit</a> integer values. When we create it, using
<code>make</code>, we give it a capacity of 1. The for loop in the <code>sequencer</code> function
loads new values into the channel as soon as they can be consumed; a
capacity of one means that only value is buffered into the channel at a time,
guaranteeing sequential numbering. Note that a send on the channel will block
until the channel has room for more elements, so in effect, this function will
send a value onto the channel and wait for it to be consumed. Channel receives
will similarly block until a value is read. This means our sequencer will
send the new counter value and wait for it to be consumed, and clients that
require sequence numbers will wait until one is ready.</p>

<p>All together, this might look like:</p>

<p>Liquid error: undefined method `join' for #<String:0x007ffd7abafd40></p>

<h3>Notes:</h3>

<p><a id="note_1"></a> <br/>
1. note that the Python multiprocessing library won't work
properly here: it creates entirely new processes.</p>

<p><a id="note_2"></a>  <br/>
2. Typically, Go programs specify an <code>int</code> instead
of an integer of a specific width. However, the specification for this
API specifically requires 32 bits to be sent on the wire; Go expects
to use <code>int</code> internally, but provdes <code>int&lt;n&gt;</code> for interfacing with the
outside world.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing ctrans]]></title>
    <link href="http://kisom.github.com/blog/2011/05/13/presenting-ctrans/"/>
    <updated>2011-05-13T00:00:00-06:00</updated>
    <id>http://kisom.github.com/blog/2011/05/13/presenting-ctrans</id>
    <content type="html"><![CDATA[<h2>intro</h2>

<p>i just finished getting <strong><a href="https://www.github.com/kisom/ctrans">ctrans</a></strong> into
a workable state. what is <strong>ctrans</strong>? in short, it translates comments in a
foreign-language (i.e. russian) to english using google translate and some
regex magic.</p>

<p>the project started when one of my buddies and i started looking at the zeus
source code. <a href="https://www.github.com/clarke187/">zenmower</a> got the first peek
and mentioned all the comments being in russian; i started poking around looking
for something to translate the comments. after ten minutes i couldn't find
anything, so as they say, if you want something done do it yourself. i snagged
<a href="http://www.halotis.com/2009/09/15/google-translate-api-python-script/">a python snippet to run google translate</a>
on text passed in. it seemed to work pretty well and handled breaking the text
up into chunks, so i cleaned it up a bit to fit my coding standards and started
writing code to plug into that.</p>

<p>i slapped together some regexes to scan for c-style comments and later
scripting-language (i.e. python, perl, ruby) style '#' comments. a couple of
iterations later, i had some mostly-working code that featured
* file extension-based comment scanning (i.e. look for c-style comments in
.cpp files, script-style comments in .pl files)
* a directory scanning mode and a single-file mode
* multiprocess directory scanning: the script builds a list of files that should
be scanned (based solely on file extensions) and maps a pool of workers to scan
through that list of files. i'll talk more on the multiprocessing design later.</p>

<h2>unicode notes</h2>

<p>this code worked pretty well on the test files i generated, but choked on the
zeus source, throwing the dreaded
<a href="http://wiki.python.org/moin/UnicodeDecodeError"><code>UnicodeDecodeError</code></a> and
<a href="http://wiki.python.org/moin/UnicodeEncodeError"><code>UnicodeEncodeError</code></a>. after
digging around and finding <a href="http://effbot.org/zone/unicode-objects.htm">some</a>
<a href="http://stackoverflow.com/questions/3588083/unicodeencodeerror-ascii-codec-cant-encode-character-u-xa3">excellent</a>
<a href="http://farmdev.com/talks/unicode/">resources</a> on
<a href="http://www.joelonsoftware.com/articles/Unicode.html">unicode</a> that helped jog
my memory and clarify a few things i wasn't thinking about. i came up with a
few notes for dealing with different file encodings:</p>

<ol>
<li>you decode a stream of bytes being read into the program from whatever
encoding the file came in (i.e. utf-8) to a unicode string.</li>
<li>you encode a unicode string to whatever file encoding you want it output as;
for most files, you will likely want utf-8. if you want to print the string, it
needs to be the same encoding as your terminal (i.e.
<code>sys.getdefaultencoding()</code>).</li>
<li>it matters what encoding the file you are reading is. this was a problem for
me, since the zeus source files were often not in utf-8 or ascii.</li>
<li>file encoding detection if you really don't know what format the file is in
is extremely difficult and programatically doing this is akin to black magic.
the <a href="http://chardet.feedparser.org/">chardet module</a> is very useful but not
always correct. case in point - the two test source files that ship with ctrans
are saved as utf-8, but watch what happens when we try to guess the encoding on
the python test file:</li>
</ol>


<p>Liquid error: undefined method `join' for #<String:0x007ffd7abaf840></p>

<p>that's a 90% confidence that the file uses a different encoding than it actually
does. automagic should be used sparingly and with supervision.</p>

<h2>concurrency notes</h2>

<p>one design issue that came up is that of concurrency. i had to decide whether to
launch new processes for each network connection (i.e. chunk of text being
translated) or per-file (resulting in several network connections in sequence
per process). the network connections were definitely the bottleneck, but i had
to make sure the text would be returned in the proper sequence (order is <em>sort
of</em> important in source files). in this case, the simplest answer to ensure
the correctness of information, and given that files are the smallest <em>atomic</em>
units, is to launch a new process to translate a file. given a list of the files
that need to be translated, python's multiprocessing.Pool.map() makes it
incredibly easy to set up a worker pool.</p>

<p>concurrency also factored into how the file encoding guessing would work -
my original idea was to modify the global variable <code>decodeas</code> and set this based
on whatever encoding the file was guessed to be. however, proper concurrency
requires locking and ensuring the consistency of that variable's state. it
requires far less work to return the encoding as a string and set a local
variable in the <code>scan_file()</code> function - the encoding string takes a minimal
amount of memory and avoids the variable getting into an inconsistent state.</p>

<h2>end notes</h2>

<p>ctrans is still in a fairly rough state, but i think given the original goals -
giving zenmower and me fast english translations (as best as could be done) of
the comments in the source - the program does this fairly well. of course,
it stills requires verification to ensure that the proper encodings are being
used but it does work fairly quickly, the biggest slowdown typically being the
network speed.</p>

<p>the first commit was 2011-05-11 in the afternoon and the latest commit with
what i consider revison 1.0 was committed 2011-05-13 - two days of coding,
mostly hampered by network issues at home, to get working code.</p>

<p>the source code is available at the github repo linked at the beginning. one
planned improvement is to guess file encodings based on the average encoding
detected in a directory (i.e. to compensate for possible variations in detected
encoding and baesd on the assumption that encoding doesn't vary over a
directory). the code also could be cleaned up quite a bit.</p>

<p>the important thing is that i have working code to show...</p>
]]></content>
  </entry>
  
</feed>
