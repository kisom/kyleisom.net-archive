<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hacking | EDOOFUS]]></title>
  <link href="http://kisom.github.com/blog/categories/hacking/atom.xml" rel="self"/>
  <link href="http://kisom.github.com/"/>
  <updated>2012-11-21T22:57:32-07:00</updated>
  <id>http://kisom.github.com/</id>
  <author>
    <name><![CDATA[Kyle Isom]]></name>
    <email><![CDATA[coder@kyleisom.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Thread-Safe Counters in Go]]></title>
    <link href="http://kisom.github.com/blog/2012/09/06/threadsafe-counters/"/>
    <updated>2012-09-06T18:10:00-06:00</updated>
    <id>http://kisom.github.com/blog/2012/09/06/threadsafe-counters</id>
    <content type="html"><![CDATA[<p>One of my current projects requires a counter that delivers a monotonically
increasing sequence number to a number of threads; this counter has the
following properties:</p>

<ol>
<li><p>the packets that consume counter values must receive the packets in
a monotonically increasing order; the end user rejects any sequence
number that is lower than the last highest received sequence number.</p></li>
<li><p>packets are generated by several threads.</p></li>
<li><p>the sequence number is shared across all threads.</p></li>
</ol>


<p>The sequence number is particularly critical in this project; it is a library
for interfacing with and controlling a UAV (a microdrone, in fact). If the
are sent in the wrong order (resulting in the drone rejecting potentially
critical commands or executing them out of sequence), it could enter an
"unstable flight pattern" (which usually results in the drone establishing an
"inverted resting position").</p>

<!-- more -->


<p>In most languages, this sequence number would be a mutex-protected resource. For
example, in <a href="#note_1">Python</a> it would look something like:</p>

<p>Liquid error: undefined method `join' for #<String:0x007ffd7ad5d3b8></p>

<p>When this runs, you will see the numbers from 1 to 12 printed out in order,
guaranteeing that sequence numbers will be generated properly.</p>

<h2>The Go Way</h2>

<p>In Go, we use goroutines and channels to share memory by communicating (over
channels) as opposed to the more traditional communicating by sharing memory
(which requires locking and other tricks to guarantee that mutable data
maintains its integrity. What does this look like here? Let's take a look at a
code example, and then I'll walk through it. In the library, there is a struct
called <code>Drone</code> with a number of methods that operate on that struct. The
relevant part of the struct is:</p>

<p>Liquid error: undefined method `join' for #<String:0x007ffd7ad5ce90></p>

<p>We use the <code>sequencer</code> function as the sequence generator, and specify that the
channel is write-only:</p>

<p>Liquid error: undefined method `join' for #<String:0x007ffd7ad5c990></p>

<p>In the initialisation code, we create the channel and launch the sequencer (the
docs for the API the library is targeted to specifically state that the
sequence number starts at one every time the drone is reset):</p>

<p>Liquid error: undefined method `join' for #<String:0x007ffd7ad5c490></p>

<p><code>go</code> launches the function that follows it in a <em>goroutine</em>, which is
essentially a lightweight thread. The function that runs in the
goroutine can be called with arguments as normal, however it won't return
until the code exits or the gocode returns. Like most threads, you'll want
some sort of delay. In this case, the delay is caused by the blocking action
on channel sends. In other cases, we can use time.Sleep (which sleeps for
the given number of nanoseconds); a delay of a second would be accomplished
with <code>time.Sleep(1000 * time.Millisecond)</code>.</p>

<p>Lastly we need a way to access the sequence numbers:</p>

<p>Liquid error: undefined method `join' for #<String:0x007ffd7ad5bf90></p>

<p>How does this work? The core of this solution is our channel, which
stores <a href="#note_2">32-bit</a> integer values. When we create it, using
<code>make</code>, we give it a capacity of 1. The for loop in the <code>sequencer</code> function
loads new values into the channel as soon as they can be consumed; a
capacity of one means that only value is buffered into the channel at a time,
guaranteeing sequential numbering. Note that a send on the channel will block
until the channel has room for more elements, so in effect, this function will
send a value onto the channel and wait for it to be consumed. Channel receives
will similarly block until a value is read. This means our sequencer will
send the new counter value and wait for it to be consumed, and clients that
require sequence numbers will wait until one is ready.</p>

<p>All together, this might look like:</p>

<p>Liquid error: undefined method `join' for #<String:0x007ffd7ad5ba68></p>

<h3>Notes:</h3>

<p><a id="note_1"></a> <br/>
1. note that the Python multiprocessing library won't work
properly here: it creates entirely new processes.</p>

<p><a id="note_2"></a>  <br/>
2. Typically, Go programs specify an <code>int</code> instead
of an integer of a specific width. However, the specification for this
API specifically requires 32 bits to be sent on the wire; Go expects
to use <code>int</code> internally, but provdes <code>int&lt;n&gt;</code> for interfacing with the
outside world.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Undefined symbol errors in Lisp]]></title>
    <link href="http://kisom.github.com/blog/2012/07/18/undefined-symbol-errors-in-lisp/"/>
    <updated>2012-07-18T19:50:00-06:00</updated>
    <id>http://kisom.github.com/blog/2012/07/18/undefined-symbol-errors-in-lisp</id>
    <content type="html"><![CDATA[<p>The other day, I got a strange error while writing a macro (actually,
<code>deftest</code> from <a href="http://www.gigamonkeys.com">Peter Seibel's</a>
<a href="http://www.gigamonkeys.com/book/">Practical Common Lisp</a>). My
<code>defmacro</code> looked like this:</p>

<p><code>``common-lisp
(defmacro deftest (name parameters &amp;body body)
 </code>(defun ,name ,parameters</p>

<pre><code> (let ((*test-name* ,name))
   ,@body)))
</code></pre>

<p>```</p>

<p>At first glance, it looks fine. So, I defined a few tests with it
(<code>check</code> is another macro for reporting test results) and ran into a
bug:</p>

<p><code>
CL-USER&gt; (deftest test-fn () (format t "testing~%"))
; in: DEFTEST TEST-+
;     (LET ((*TEST-NAME* TEST-+))
;       (FORMAT T "ohai~%"))
;
; caught WARNING:
;   undefined variable: TEST-FN
;
; compilation unit finished
;   Undefined variable:
;     TEST-FN
;   caught 1 WARNING condition
TEST-FN
CL-USER&gt;
</code></p>

<p>I racked my brain trying to figure it out. Here's the <code>macroexpand-1</code>
of that definition:</p>

<p>```
(DEFUN TEST-FN ()
  (LET ((<em>TEST-NAME</em> TEST-FN))</p>

<pre><code>(FORMAT T "testing~%")))
</code></pre>

<p>T
```</p>

<p>Still being new to Lisp, I didn't see what was wrong with it. However,
the <code>LET</code> gives it away:</p>

<p><code>common-lisp
  (LET ((*TEST-NAME* TEST-FN))
</code></p>

<p>It tries to evaluate the symbol TEST-FN, which we haven't defined yet
(we're still building the function; as Paul Graham writes in
<a href="http://paulgraham.com/onlisp.html">On Lisp</a>, "building a function and
associating it with a certain name are two separate operations." (page
13)). Let's take a look back at the original <code>defmacro</code>: you'll notice
that we're evaluating <code>name</code> in the LET:</p>

<p>```common-lisp</p>

<pre><code> (let ((*test-name* ,name))
</code></pre>

<p>```</p>

<p>What I really wanted to do was to quote the value of name:</p>

<p>```common-lisp</p>

<pre><code> (let ((*test-name* ',name))
</code></pre>

<p>```</p>

<p>With that, the testing suite works.</p>

<p>This is one reason I'm hand typing all the examples. It's bugs like
this one that give me the best education and help me recognise when
things go sideways later.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[back to lisp]]></title>
    <link href="http://kisom.github.com/blog/2012/01/02/back-to-lisp/"/>
    <updated>2012-01-02T00:00:00-07:00</updated>
    <id>http://kisom.github.com/blog/2012/01/02/back-to-lisp</id>
    <content type="html"><![CDATA[<p>Liquid error: undefined method `join' for #<String:0x007ffd7ad5b540>
A brief stint playing with clojure made me miss common lisp, so I'm working
through <a href="http://www.paulgraham.com">Paul Graham's</a>
<a href="http://paulgraham.com/acl.html">ANSI Common Lisp</a> with a copy of
<a href="http://paulgraham.com/onlisp.html">On Lisp</a>. My last foray, I learned
from <a href="http://www.cs.cmu.edu/~dst/">David Touretzky's</a>
<a href="http://www.cs.cmu.edu/~dst/LispBook/index.html">A Gentle Introduction to Symbolic Computation</a>,
so this time I'm trying PG's book. So far I've done more useful things,
mostly by actually reading a bit more of the <a href="http://www.sbcl.org">sbcl</a>
<a href="http://www.sbcl.org/manual/">user manual</a> (from which I learned some
useful things such as <code>sb-ext:*posix-argv*</code> and <code>sb-ext:save-lisp-and-die</code>)
and by the immensely useful site
<a href="http://rosettacode.org/wiki/Rosetta_Code">Rosetta Code</a>, from which I
learned about the <a href="http://www.weitz.de/drakma/">DRAKMA</a> HTTP client
library. I've also been aided quite a bit by
<a href="http://xach.com">Zach Beane's</a> <a href="http://www.quicklisp.org/">quicklisp</a>;
in fact, one of the things I've done is to write a short
<a href="https://gist.github.com/1548276">script</a> to build an sbcl image with
quicklisp and my most commonly used libraries built-in.</p>

<!-- more -->


<script src="https://gist.github.com/1548276.js?file=build-image.lisp"></script>


<p>One of the things I love about functional programming is the idea that
instead of relying on a lot of variables, you use functions as sort of
"organic variables" that provide immutable data based on some input. The
ability to build what feels more organic, less static. I think
<a href="https://en.wikipedia.org/wiki/Steve_Yegge">Steve Yegge's</a>
blog post <a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html">Execution in the Kingdom of Nouns</a>
is spot on.</p>

<p>I anticipate this to be the year of Lisp for me, as I delve into
Common Lisp, Scheme, and Clojure.</p>
]]></content>
  </entry>
  
</feed>
