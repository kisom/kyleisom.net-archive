<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | EDOOFUS]]></title>
  <link href="http://kisom.github.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://kisom.github.com/"/>
  <updated>2012-11-21T22:57:32-07:00</updated>
  <id>http://kisom.github.com/</id>
  <author>
    <name><![CDATA[Kyle Isom]]></name>
    <email><![CDATA[coder@kyleisom.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[carefree git and hg]]></title>
    <link href="http://kisom.github.com/blog/2012/02/22/carefree-git-and-hg/"/>
    <updated>2012-02-22T16:52:00-07:00</updated>
    <id>http://kisom.github.com/blog/2012/02/22/carefree-git-and-hg</id>
    <content type="html"><![CDATA[<p>I was at an <a href="http://www.appsterdam.rs">Appsterdam</a> lunch meetup today, and
before the presentation I was talking with some people about source control.
They worked for Atlassian, and so of course bitbucket v. github came up.
(It didn't help that I was wearing a GitHub shirt. Atlassian - I want to give
you money to get a bitbucket shirt but I don't see any for sale. Why?)
Regardless of why I typically use github more, or what my usage profiles are
for the two, they were interested to hear my solution to a problem I had:
how to simplify working in various source control systems, particularly in
both mercurial and git.</p>

<!-- more -->


<p>For a long time, I used mostly git and far less mercurial. I wrote a bunch
of aliases in my <code>.zprofile</code> that looked something like:</p>

<p>Liquid error: undefined method `join' for #<String:0x007ffd7aa18928></p>

<p>For mercurial, I just entered everything normally. However, as I started to
use mercurial more, I wanted to use those aliases for both systems. I ended
up writing a bunch of shell functions to do this. They are all strict POSIX
compatible, so they work under at least <code>zsh</code>, <code>ksh</code>, and <code>bash</code>. I haven't
tested any others, so your mileage may vary. The latest version of this is
available at my <a href="https://github.com/kisom/dotconf">dotconf github repo</a>, you
can view it <a href="https://github.com/kisom/dotconf/blob/master/.sourcecon.zsh">here</a></p>

<p>The core of the code is the pair of functions:
Liquid error: undefined method `join' for #<String:0x007ffd7aa18428></p>

<p><code>get_repo_type</code> does exactly what it says it does: it outputs a number that
identifies what type of source control the repo uses. The <code>not-a_repo</code>
simple provides a shortcut for displaying the error message. All of the
commands use these two functions. The commands are implemented in a similar
style, so let's take a look at the first defined function, <code>pull</code>:</p>

<p>Liquid error: undefined method `join' for #<String:0x007ffd7aa17f28></p>

<p>Unfortunately, shell scripting isn't a terribly advanced programming language,
so there's a lot of redundancy in the code; in fact all of the commands use the
same basic template of</p>

<p>Liquid error: undefined method `join' for #<String:0x007ffd7aa17a28></p>

<p>I thought of some other ways to do this, but they all ended up being far more
complex and time-consuming than just knocking it out like this. This style is
also POSIX-compatible, meaning it can be used with really any shell.</p>

<p>Another feature of note is that I've ensured to pass through the shell variable
<code>$@</code>, which means any arguments are passed directly to the command; this lets
you still enable the full use of the specialised commands without having to
mentally switch context between just typing the shortened command and the full
one.</p>

<p>So, let's look at what commands are supported (use <code>vcshelp</code> to list them):</p>

<ul>
<li>commit</li>
<li>add</li>
<li>pull</li>
<li>push</li>
<li>checkout</li>
<li>fetch</li>
<li>clog</li>
<li>which_dvcs</li>
<li>vcdiff</li>
</ul>


<p>For the most part, they are wrappers around the $scm version of the command,
passing through any arguments as before. The last three aren't (but do pass
through any command line options as appropriate):</p>

<ul>
<li><code>clog</code> is a shortcut for 'commit log', and shows the $scm log. For mercurial,
it will pipe it to less (by default, hg doesn't).</li>
<li><code>which_dvcs</code> is a wrapper around get_repo_type to print the name of the SCM
instead of the numeric value used in the functions.</li>
<li><code>vcdiff</code> is a version control diff; like <code>clog</code>, it will pipe hg diff to less.</li>
</ul>


<p>There are a few commands that aren't documented in <code>vcshelp</code>:
* <code>co</code> is an alias for <code>checkout</code>
* <code>st</code> is a variant of status that shows only tracked files</p>

<p>I've found this system to work out pretty well for me, mostly because it
requires less mental power to handle the basic SCM workflow. It also satisfies
my coder's itch to remove unnecessary code (i.e. always having to prefix <code>git</code>
or <code>hg</code> to source control commands) by making the shell "aware" of which SCM
I'm using at the time.</p>

<p>There is, of course the caveat that <a href="http://jrick.devio.us">Josh Rickmar</a>
pointed out. I've come to grow used to a lot of the specifics of working
with the different SCMs. Two common idioms I use a lot with this setup are
<code>commit -a</code> in a git repo and <code>pull -u</code> in a mercurial repo. If you are using
an SCM, you should definitely get to know it before using it for serious
work. Of course, you can also take my code and tweak it so that it behaves
differently. The code is yours.</p>

<p>Thanks go to Chris LePetit, who suggested I write the article.
<a href="http://samuelgoodwin.tumblr.com">Samuel Goodwin</a> and
<a href="https://twitter.com/imwally">Wally Jones</a> proofread it for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[suddenly enlightenment]]></title>
    <link href="http://kisom.github.com/blog/2011/12/03/suddenly-enlightenment/"/>
    <updated>2011-12-03T00:00:00-07:00</updated>
    <id>http://kisom.github.com/blog/2011/12/03/suddenly-enlightenment</id>
    <content type="html"><![CDATA[<p>It's been almost 28 hours since I last slept, so I apologise if this
post contains a few spelling or grammatical errors. As soon as I
become aware of them, rest assured I will quickly put them to right.</p>

<p><a href="http://www.kyleisom.net/blog/2011/11/35-dot_emacs">Today's git commit</a> occurred
while I was working on getting a web development test VM / environment working. The
goal was to update a CGI script when I pushed to the dev vm. The commit log:
Liquid error: undefined method `join' for #<String:0x007ffd7aa17500></p>

<!-- more -->


<p>It took a while for me to grok what was happening with the hook, but finally it clicked.
I did a lot of reading online, and was greatly helped by the <a href="https://www.ora.com">O'Reilly</a>
book <a href="https://shop.oreilly.com/product/9780596620137.do">Version Control with Git</a>
and the <code>githooks(5)</code> man page.</p>

<p>My remote repository was a bare git repo (one initialised with <code>git init --bare</code> that I
pushed my local changes to. I created a staging directory (<code>${HOME}/stage/cgitest</code>)
and created the following hook:</p>

<pre><code>kyle@www-dev:~/code/cgitest/hooks$ cat post-update
#!/bin/sh
export GIT_DIR=/home/kyle/code/zipcgi
export GIT_WORK_TREE=/home/kyle/stage/zipcgi
git reset --hard
git checkout -f
cp ${GIT_WORK_TREE}/zipcgi.py ~/bin/cgi/
</code></pre>

<p>As a side note, make sure the script is <code>chmod +x</code>'d.</p>

<p>The reason why we have to specify the git dir is that by default,
because this is in the bare repository, git will assume the git
directory is the repository directory. The problem is, that directory
doesn't have a working tree. A working tree is required to checkout
the repository - i.e. so we have a named file to work with. To work
around this, I explicitly specify a working tree . Then I copy the CGI
script to my CGI directory.</p>

<p>Why not just symlink the file? Well, symlinks work on inodes. This
allows multiple names to refer to the same file, but it does mean that
even though the file is in the same directory and shares the same
name, it is not guaranteed the same inode number. The git checkout
can, in essence, unlink the old file and create a completely new
file. The end result is that your symlink will likely be broken,
pointing to a now non-existent inode. The safest method is just to
copy the new version on top of the old one.</p>

<p>Why do we have to manipulate the environment variables
<code>GIT_DIR</code> (which points to the directory containing the actual git
repository, more on that in a second) and <code>GIT_WORK_TREE</code>, which
represents the working tree. To really understand this, you need to
understand the difference between the working tree and the
repository. You could take the long route and read the excellent book
I mentioned above and wade through man pages (which are pretty well
written, but there is a lot of information to keep track of). An
alternative is to buckle in and keep reading for my crash course.</p>

<p>Still here? Buckled in? Let's do this. A git repository is basically a
filesystem-based database that uses hashes for identification and
great success. If you poke around in your git repository (which in a
standard local repository is in <code>${PROJECT}/.git</code>), particularly under
objects, you will see what I mean. Everything is stored as a hash
object. Git uses <a href="https://en.wikipedia.org/wiki/SHA-1">SHA-1</a>, and
under <code>.git/objects</code> you will see a list of subdirectorys. These
subdirectories (with the exception of <code>pack</code> and <code>info</code>) named after
the first byte of the SHA-1 hash (which is two bytes when stored as a
semi-human readable hex digest). Under these subdirectories, git
stores the objects as the remaining 19 bytes (again, 38 bytes when
stored as a hex digest) of the hash. The file is
zlib-compressed. Don't believe me? If you clone my
<a href="https://github.com/kisom/woofs">woofs project</a> and look up</p>

<p><code>.git/objects/bf/2f7383ca7343f85f1308fc6dc3c34dbd047d90</code>.</p>

<p>Try the following python code:</p>

<pre><code>import zlib
print zlib.decompress(open('2f7383ca7343f85f1308fc6dc3c34dbd047d90').read())
</code></pre>

<p>You should see a working version of the script (and the latest version
as of this writing). This is how git sees everything. (If you want to
see what git sees a file as, use <code>git hash-object &lt;FILE&gt;</code>.)</p>

<p>The working directory is where you, the developer or end user,
interact with the contents of the database. This is where things can
be staged to be committed, and in a bare repo (typically found
on remote repos), there won't be a working directory because you
aren't working directly on that copy of the repo. Try this:</p>

<pre><code>mkdir -p ~/tmp/stage/woofs_working
export GIT_DIR=~/Code/woofs/.git 
export GIT_WORK_TREE=~/tmp/stage/woofs_working
cd ~
git reset --hard
ls ~/tmp/stage/woofs_working
</code></pre>

<p>Voilà! You should see the contents of the repo there. (I'd recommend
either closing out that terminal session or running</p>

<pre><code>unset GIT_DIR GIT_WORK_TREE
</code></pre>

<p>to prevent problems later on. Also, while I'm using a repo I chose at
random from my <code>~/Code</code> directory, you could (and should) be trying
with a repo of your own.</p>

<p>It should be clear now why I had to explicitly specify the two. The
next two commands just reset the working directory to the lastest
commit (i.e. the one that was just pushed) and check out a fresh copy,
to make sure everything that should be present is present.</p>

<p>This turned out to be a longer post than I had expected, but my hope
is that it helps other people quickly get their hooks operational. The
cool thing about hooks is they are just executable shells scripts,
which means:</p>

<ol>
<li>the script's <code>${PWD}</code> is the hooks directory in the git repo.</li>
<li>the <code>${GIT_DIR}</code> is by default '.' and is the repo directory. for
example, if we had a bare woofs repo, it would be something like
<code>/home/kyle/code/woofs</code>, while in a local repo it would be
<code>/home/kyle/code/woofs/.git</code>.</li>
<li>because it's just a shell script, you can use any language you can
use a shebang for.</li>
</ol>


<p>Git hooks are a powerful tool and can greatly boost your productivity,
automatically deploy code, and help us fight SkyNet. You should
consider using them in your next project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[generating patchfiles with git and hg]]></title>
    <link href="http://kisom.github.com/blog/2011/09/28/generating-patchfiles-with-git-and-hg/"/>
    <updated>2011-09-28T00:00:00-06:00</updated>
    <id>http://kisom.github.com/blog/2011/09/28/generating-patchfiles-with-git-and-hg</id>
    <content type="html"><![CDATA[<p>UPDATE: originally this post was only about doing this in git. Since I use
mercurial almost as much as I use git, I decided to look into how to do it
with mercurial too.</p>

<p>I recently was explaining to someone that as a coder, I do (or should do)
a lot more than just code. I figured since I hadn't written anything here in
a while, I'd put my thoughts down here.</p>

<p>i found myself needing to generate a patchfile today from a git repo. it turns
out to be a very easy task.</p>

<!-- more -->


<ul>
<li><p>first, commit to a clean working directory. i'll asume you are on the
'master' (git) or 'tip' (hg) branch, but s/master/$branch/ as appropriate.</p></li>
<li><p>if you have only one commit between you and the commit you need to diff
against:
Liquid error: undefined method `join' for "\ngit format-patch master^ --stdout > my.patch`\n":String
or
Liquid error: undefined method `join' for "\nhg export tip > my.patch  <br/>\n":String</p></li>
<li><p>otherwise, substitute in the appropriate commit</p></li>
<li><p>to apply the patch, it's
Liquid error: undefined method `join' for "\ngit apply --stat my.patch\n":String
or
Liquid error: undefined method `join' for "\nhg patch my.patch\n":String</p></li>
</ul>


<p>I did say it was a very easy task... You'll notice mercurial makes this easier
(or at least I think so) than git.</p>
]]></content>
  </entry>
  
</feed>
