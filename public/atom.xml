<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[EDOOFUS]]></title>
  <link href="http://kisom.github.com/atom.xml" rel="self"/>
  <link href="http://kisom.github.com/"/>
  <updated>2012-11-21T22:57:32-07:00</updated>
  <id>http://kisom.github.com/</id>
  <author>
    <name><![CDATA[Kyle Isom]]></name>
    <email><![CDATA[coder@kyleisom.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[:syntax off]]></title>
    <link href="http://kisom.github.com/blog/2012/10/17/syntax-off/"/>
    <updated>2012-10-17T02:02:00-06:00</updated>
    <id>http://kisom.github.com/blog/2012/10/17/syntax-off</id>
    <content type="html"><![CDATA[<p>Recently, I made a major change to my <code>.vimrc</code>: I turned syntax off. I
struggled with this choice, since I used to rather enjoy the shininess
of a well-done vim colour scheme. It&#8217;s been about two weeks now, and I
have no regrets. How did I end up here?</p>

<!-- more -->


<p>It started when I gave the <a href="https://research.swtch.com/acme">acme</a> editor
a try. The acme editor uses no syntax highlighting, as per Rob Pike&#8217;s
preferences. I spent a few days playing with acme, mostly hacking on some
<a href="http://golang.org">Go</a> code. The lack of syntax highlighting was a bit of
a shock at first, but I found over a day or two that I began to get used
to it. I found that I began to focus more on the code and less on the colours.
Syntax highlighting had, for me, been somewhat of a crutch. I was relying on
it to immediately highlight code errors. I found that I began to read the
code closer, to hold the program in my head, and to write more judicious
code.</p>

<p>The best way I can describe it is to compare it to reading a book. When I
read a book, I don&#8217;t want parts of speech highlighted in different colours.
What I want to do is to read the book, to take in the information. I find
that writing code is much the same for me. I don&#8217;t want to focus on syntactic
elements; not relying on colouring not only makes me write more careful and
considered code, but it also forces me to pay more attention to the program.
When reading source, a similar effect is had - I pay attention to what the
code is doing rather than the individual elements.</p>

<p>I&#8217;ve had quite a few discussions on this subject in IRC, and there have been
several interesting points about this. Before I look at some of the ideas
thrown around, I&#8217;d like to note that the conclusion I&#8217;ve come to is that
this is definitely not for everyone. I happen to be at a point in my coding
career where syntax isn&#8217;t a concern for me, but other developers that I
respect and are quite talented find syntax highlighting to be useful.  To
each their own; I have just found an alternate system that works for me.
Part of my background is not always coding on a computer; there have been
several points in my life where I wasn&#8217;t always able to have access to a
computer, and therefore wrote code on legal pads or read through printouts
of code. In my generation this appears to be quite rare, and so you have a
lot of people who aren&#8217;t used to spending a lot of time reading and writing
code without the aid of syntax highlighting.</p>

<p>One of the points that was brought up is that reading and writing code is
not like reading and writing in natural languages. I can definitely understand
this viewpoint, but I treat computer langauges internally very similar to
spoken languages. Another point was that highlighting strings is useful, as
they tend to be in a different (i.e. natural) language as opposed to the rest
of the program. I think this is definitely an interesting idea that I would
like to pursue. I&#8217;d imagine it might be more useful to use an italicised face
for character strings. This will require some time spent learning the vim
theme syntax, which shouldn&#8217;t be difficult &#8211; it is rather a question of time.</p>

<p>Coincidentally, shortly after turning off syntax highlighting, I revamped my
<code>.vimrc</code>, based heavily on the one from <a href="https://www.conformal.com">Conformal&#8217;s</a>
<a href="https://opensource.conformal.com/wiki/vim">wiki vim page</a>. Between these two
changes, I&#8217;ve had a very productive past two weeks writing mostly C with a
smattering of Go.</p>

<p>If you made it this far, I&#8217;d be interested to hear what your thoughts on the
subject are - feel free to email me at kyle at tyrfingr dot is.</p>

<p>I&#8217;d like to thank Jeremy for proofreading this for me ahead of time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thread-Safe Counters in Go]]></title>
    <link href="http://kisom.github.com/blog/2012/09/06/threadsafe-counters/"/>
    <updated>2012-09-06T18:10:00-06:00</updated>
    <id>http://kisom.github.com/blog/2012/09/06/threadsafe-counters</id>
    <content type="html"><![CDATA[<p>One of my current projects requires a counter that delivers a monotonically
increasing sequence number to a number of threads; this counter has the
following properties:</p>

<ol>
<li><p>the packets that consume counter values must receive the packets in
a monotonically increasing order; the end user rejects any sequence
number that is lower than the last highest received sequence number.</p></li>
<li><p>packets are generated by several threads.</p></li>
<li><p>the sequence number is shared across all threads.</p></li>
</ol>


<p>The sequence number is particularly critical in this project; it is a library
for interfacing with and controlling a UAV (a microdrone, in fact). If the
are sent in the wrong order (resulting in the drone rejecting potentially
critical commands or executing them out of sequence), it could enter an
&#8220;unstable flight pattern&#8221; (which usually results in the drone establishing an
&#8220;inverted resting position&#8221;).</p>

<!-- more -->


<p>In most languages, this sequence number would be a mutex-protected resource. For
example, in <a href="#note_1">Python</a> it would look something like:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a0ef0b8></p>

<p>When this runs, you will see the numbers from 1 to 12 printed out in order,
guaranteeing that sequence numbers will be generated properly.</p>

<h2>The Go Way</h2>

<p>In Go, we use goroutines and channels to share memory by communicating (over
channels) as opposed to the more traditional communicating by sharing memory
(which requires locking and other tricks to guarantee that mutable data
maintains its integrity. What does this look like here? Let&#8217;s take a look at a
code example, and then I&#8217;ll walk through it. In the library, there is a struct
called <code>Drone</code> with a number of methods that operate on that struct. The
relevant part of the struct is:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a0ee9b0></p>

<p>We use the <code>sequencer</code> function as the sequence generator, and specify that the
channel is write-only:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a0ee320></p>

<p>In the initialisation code, we create the channel and launch the sequencer (the
docs for the API the library is targeted to specifically state that the
sequence number starts at one every time the drone is reset):</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a0edd58></p>

<p><code>go</code> launches the function that follows it in a <em>goroutine</em>, which is
essentially a lightweight thread. The function that runs in the
goroutine can be called with arguments as normal, however it won&#8217;t return
until the code exits or the gocode returns. Like most threads, you&#8217;ll want
some sort of delay. In this case, the delay is caused by the blocking action
on channel sends. In other cases, we can use time.Sleep (which sleeps for
the given number of nanoseconds); a delay of a second would be accomplished
with <code>time.Sleep(1000 * time.Millisecond)</code>.</p>

<p>Lastly we need a way to access the sequence numbers:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a0ed7b8></p>

<p>How does this work? The core of this solution is our channel, which
stores <a href="#note_2">32-bit</a> integer values. When we create it, using
<code>make</code>, we give it a capacity of 1. The for loop in the <code>sequencer</code> function
loads new values into the channel as soon as they can be consumed; a
capacity of one means that only value is buffered into the channel at a time,
guaranteeing sequential numbering. Note that a send on the channel will block
until the channel has room for more elements, so in effect, this function will
send a value onto the channel and wait for it to be consumed. Channel receives
will similarly block until a value is read. This means our sequencer will
send the new counter value and wait for it to be consumed, and clients that
require sequence numbers will wait until one is ready.</p>

<p>All together, this might look like:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a0ed100></p>

<h3>Notes:</h3>

<p><a id="note_1"></a> <br/>
1. note that the Python multiprocessing library won&#8217;t work
properly here: it creates entirely new processes.</p>

<p><a id="note_2"></a>  <br/>
2. Typically, Go programs specify an <code>int</code> instead
of an integer of a specific width. However, the specification for this
API specifically requires 32 bits to be sent on the wire; Go expects
to use <code>int</code> internally, but provdes <code>int&lt;n&gt;</code> for interfacing with the
outside world.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Lisp Command Line Programs Using SBCL]]></title>
    <link href="http://kisom.github.com/blog/2012/08/17/lisp-cli/"/>
    <updated>2012-08-17T18:11:00-06:00</updated>
    <id>http://kisom.github.com/blog/2012/08/17/lisp-cli</id>
    <content type="html"><![CDATA[<p>One of the challenges I had with Common Lisp initially was using it write
standalone programs. I&#8217;ve gotten a chance now to build several, and I&#8217;ll
share some of the stuff I&#8217;ve learned. I&#8217;m still fairly new to Lisp, and
I&#8217;m certain there are a number of drawbacks, but this helped make Lisp more
useful to me and there to start using it more. This does assume you have a
Quicklisp-enabled Common Lisp environment.</p>

<!-- more -->


<p>The first step is to write in the code to parse command line options.
Fortunately, There is a Lisp implementation of <a href="getopt!">Getopt</a>
available via Quicklisp (or via it&#8217;s author).</p>

<p>Just as with the C and Python versions of the library (and possibly
others), the Getopt library provides the <code>getopt</code> function. The first
thing you probably want to do is define your options. The flag
definition is a little different and is a list of lists; each sublist
has two elements, &#8216;(flag argument-specifier. These specifiers are one of:</p>

<ul>
<li><code>:none</code> - the option takes no arguments</li>
<li><code>:optional</code> - the option may take an argument</li>
<li><code>:required</code> - option requires an argument</li>
</ul>


<p>Note that if an option requires an argument, and one isn&#8217;t passed, the
option is ignored. For example, if we had <code>'("f" :required)</code> in our
options, and the program was called with <code>/path/to/foo -f</code>, the <code>f</code> would
just be ignored and skipped over.</p>

<p>As an example, let&#8217;s write a program that fetches a web page, similar
to <a href="http://curl.haxx.se/">curl</a> or
<a href="http://www.gnu.org/software/wget/">wget</a>. We&#8217;ll use the options <code>-h</code>
to print a help message and <code>-o &lt;filename&gt;</code> to write the url to a
file. For simplicity&#8217;s sake, we&#8217;ll only accept the first argument as
the url to download.</p>

<p>A typical session might look like this:</p>

<pre><code>&lt;onosendai: ~&gt; $ url-fetch -o macro.lisp http://weitz.de/macros.lisp
&lt;onosendai: ~&gt; $ ls macros.lisp
macros.lisp
</code></pre>

<p>This is a very basic version to highlight building a CLI, so it
doesn&#8217;t do anything fancy like change &#8216;weitz.de/macros.lisp&#8217; to
&#8216;http://weitz.de/macros.lisp&#8217; (drakma requires the protocol to be
specified), and the sample code doesn&#8217;t handle errors well: it will
just dump to the debugger. The topic of error handling is best
described <a href="http://gigamonkeys.com/book/beyond-exception-handling-conditions-and-restarts.html">elsewhere</a>,
and this example program is just the bare minimum to illustrate the
point. With those caveats, let&#8217;s look at an example <code>main</code> function to
handle command line arguments:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7c120940></p>

<p>Setting <code>argv</code> to everything after the first argument will skip the
program name; this is just for convenience and isn&#8217;t strictly
required. It does, however, make the car of the argument list the
first argument passed in. As <code>getopt</code> returns multiple values, we&#8217;ll
want to use <code>multiple-value-bind</code> to get at the opts and args. Note
that <code>args</code> is a list of strings containing the arguments, and <code>opts</code>
is an assoc list. For example, a typical return might be:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7c11f400></p>

<p>If no args are passed in, a help message is printed (which also
exits):</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7c114730></p>

<p>This function is fairly standard, except possibly for the last
line. <code>sb-ext</code> is a package containing SBCL&#8217;s extensions. We saw this
package earlier with <code>sb-ext:*posix-argv*</code>, which is simply a list of
all the arguments passed in. In this case, <code>sb-ext:quit</code> exits from the
image; the <code>unix-status</code> keyword sets the standard UNIX return
value. You can use this to safely terminate the image.</p>

<p>I&#8217;ve elided the actual download components, but assuming they are in
place (using the function names in the main function), we can build
our image. The relevant function is
<a href="http://www.sbcl.org/manual/Saving-a-Core-Image.html"><code>sb-ext:save-lisp-and-die</code></a>,
and it&#8217;s usage is fairly simple:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7c1124a8></p>

<p>The <code>executable</code> keyword creates a standalone executable when
true, and the <code>toplevel</code> keyword specifies the function to run
when the image starts up.</p>

<p>We can write a utility function to take a list of
<a href="http://www.quicklisp.org/">Quicklisp</a> packages, an image name, and a
toplevel function and use that to build an image.</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7c0dcec0></p>

<p>This is a fairly rough guide, but it should help to get you
started. The example code is
<a href="https://bitbucket.org/kisom/url-fetch/">available on Bitbucket</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A System of Useful Output]]></title>
    <link href="http://kisom.github.com/blog/2012/08/16/system-of-output/"/>
    <updated>2012-08-16T06:30:00-06:00</updated>
    <id>http://kisom.github.com/blog/2012/08/16/system-of-output</id>
    <content type="html"><![CDATA[<p>In a SILC channel I frequent, I was showing <a href="http://saolsen.tumblr.com">Steve Olsen</a>
some output from a daemon I have running. His question to me was,</p>

<blockquote><p>&#8220;whats with the [+] in your logs?&#8221;</p></blockquote>

<p>A fair question, as every line of the output I sent him had that before it.
So, I&#8217;d like to present my system for displaying output. Maybe you&#8217;ll find it
useful.</p>

<!-- more -->


<p>In my code, I tend to preface every line with one of a few triglyphs:</p>

<p>Liquid error: undefined method `join&#8217; for &#8220;\n[+]\n[!]\n[-]\n[*]\n&#8221;:String</p>

<p>For example, running my <a href="https://gist.github.com/3277707">HSTS check</a> utility:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a04fe50></p>

<p>In theory, all output should start with <code>[+]</code> - this is the symbol I use for
nominal output messages, i.e. typical LOG_NOTICE output. It is just an
informational message letting me know what my code is doing. Sometimes, during
the debug process, the <code>[-]</code> triglyph is used:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a04eeb0></p>

<p>These are just debug messages that don&#8217;t need to be in the production code
but are useful during development. They are particularly important because
I tend to debug using output messages as much as I can, without having to
resort to using gdb/pdb/&#8230; (although I still use both heavily, particularly
when the debug messages aren&#8217;t quite giving me what I need or I want to step
through code).</p>

<p>For itemised lists, I use the <code>[*]</code> triglyph:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a04d6a0></p>

<p>Lastly, I denote errors with <code>[!]</code>:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a0474f8></p>

<p>In summary:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a045298></p>

<p>This system lets me glance at a log file or terminal output and by scanning
the left-hand column, immediately get a sense for what the code is doing.
I used to just output similar to:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a043ba0></p>

<p>However, I&#8217;ve found my current system is more succinct and just as greppable.</p>

<p>I&#8217;d be interested to hear what other people use for similar effects, if they&#8217;re
using anything at all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['Just Ship It' v. 'Proudifying' Code]]></title>
    <link href="http://kisom.github.com/blog/2012/08/15/just-ship-it-v-proudifying-code/"/>
    <updated>2012-08-15T18:17:00-06:00</updated>
    <id>http://kisom.github.com/blog/2012/08/15/just-ship-it-v-proudifying-code</id>
    <content type="html"><![CDATA[<h2>Just Ship It v. Proudifying Code</h2>

<p>I was recently working on a <a href="http://kisom.github.com/lobsterpie">project</a>
that highlighted some software development concepts that have been on my
mind lately. Specifically, the balance between writing the code you know
you should be writing and writing the code you want want to be writing
(in this case, I&#8217;m referring to writing code for the same end state and
looking at how to get there). This might also be considered the balance
(clash) between a &#8220;just ship it&#8221; mentality and &#8220;proudifying&#8221; code (I&#8217;ll
explain that in a minute). I&#8217;ll develop these ideas through the discussion
of my work flow in developing the afore-mentioned project.</p>

<!-- more -->


<p>Lately, I&#8217;ve been using <a href="https://lobste.rs">lobste.rs</a> as my main news
aggregator site, as I find it has a very high signal-to-noise ratio.
However, I still follow a bot on Twitter that posts links from the
infamous <a href="http://news.ycombinator.com">Hacker News</a>, and I wanted to
write something similar for <a href="https://lobste.rs">lobste.rs</a> because the
site has a low user count now and news stories are sometimes few and far
between, relatively speaking; I don&#8217;t always remember to check the site
regularly. At the same time, I&#8217;ve been trying to pick Common Lisp back up,
a language I&#8217;ve been fond of but for practical reasons, I&#8217;ve been using
mostly Python and C (due to work). I&#8217;d been writing a lot of Clojure as
well, but the JVM has turned into a showstopper for me. Clojure did,
however, reawaken a desire to do more in Lisp - hence my turning to CL.</p>

<p>As I started trying to write the bot, I managed to get most of the bot
done except for one critical component: posting to twitter. It turns
out none of the available Twitter or OAuth libraries were working for me,
and I started trying to write my own OAuth code. This, by the way, is
fiendishly hard to do right, especially in a language you aren&#8217;t terribly
familiar with. In addition to trying to get the OAuth side working, I was
trying to learn more syntax in the language and become familiar with some
of the available tools. While I did learn quite a bit, and had a generally
good time writing the rest of the bot, the OAuth component turned out to
be maddeningly difficult for me. I was getting very close, including
being able to duplicate the components in the Twitter authentication example
page and the data from the OAuth tool page. I spent close to 15 hours just
working on the OAuth part alone, and felt like I was getting nowhere. With
apologies to the author of the infamous
<a href="http://stackoverflow.com/a/1732454">Stack Overflow post</a> post,
my mental state could be summed up as:</p>

<blockquote><p>he comes he comes do not fi​ght he com̡e̶s, ̕h̵i​s un̨ho͞ly radiańcé
destro҉ying all enli̍̈́̂̈́ghtenment, auth tokens lea͠ki̧n͘g fr̶ǫm ̡yo​͟ur eye͢s̸ ̛l̕ik͏e
liq​uid pain, the song of oauth he̸aders and HM​AC signatures will
exti​nguish the voices of mor​tal man from the sp​here I
can see it can you see ̲͚̖͔̙î̩́t̲͎̩̱͔́̋̀ it is beautiful t​he final snuffing of the
lies of Man ALL IS LOŚ͖̩͇̗̪̏̈́T ALL I​S LOST the pon̷y he comes he c̶̮omes
he comes the ich​or permeates all MY FACE MY FACE ᵒh god no NO
NOO̼O​O NΘ stop the an​*̶͑̾̾​̅ͫ͏̙̤g͇̫͛͆̾ͫ̑͆l͖͉̗̩̳̟̍ͫͥͨe̠̅s ͎a̧͈͖r̽̾̈́͒͑e n​ot rè̑ͧ̌aͨl̘̝̙̃ͤ͂̾̆ ZA̡͊͠͝LGΌ
ISͮ̂҉̯͈͕̹̘̱ TO͇̹̺ͅƝ̴ȳ̳ TH̘Ë͖́̉ ͠P̯͍̭O̚​N̐Y̡ H̸̡̪̯ͨ͊̽̅̾̎Ȩ̬̩̾͛ͪ̈́̀́͘ ̶̧̨̱̹̭̯ͧ̾ͬC̷̙̲̝͖ͭ̏ͥͮ͟Oͮ͏̮̪̝͍M̲̖͊̒ͪͩͬ̚̚͜Ȇ̴̟̟͙̞ͩ͌͝S̨̥̫͎̭ͯ̿̔̀ͅ</p></blockquote>

<p>Finally, sometime after midnight on a sleepless night, I turned to Python.
Python is my workhorse language (I have a large number of Python projects
on both Github and Bitbucket). In about forty-five minutes, I was able to
get a working (albeit somewhat kludgy) version of the bot working. Much of
this was due to the confusion caused when I originally installed the
<code>twitter</code> module instead of the <code>python-twitter</code> module: both use the same
name but they have different interfaces. I posted the link to the bot&#8217;s
<a href="https://www.twitter.com/lobsternews">Twitter account</a> and decided to clean
up the code before I made the <a href="https://bitbucket.org/kisom/lobsterpie">repository</a>
public. As it was now after one o&#8217;clock in the morning, I put that off until
the bus ride to work.</p>

<p>To be fair, there are a couple of reasons for the fact that, starting from
scratch, I was able to get a working version of the bot in Python:</p>

<ol>
<li>I am well-versed in the ways of Python,</li>
<li>I&#8217;ve written feed parsing, Twitter interaction, and database code
in Python before,</li>
<li>There are a number of well-documented libraries for performing these
tasks,</li>
<li>I knew both of the existence of and how to use the libraries before I&#8217;d
started writing the bot, and</li>
<li>I wrote the first draft with only minor regard to style.</li>
</ol>


<p>As an example of the hackish, &#8220;just ship it&#8221; mentality of the first draft,
I had several functions I never ended up using that I removed in the
cleanup stage.</p>

<p>On the bus the next morning, I gave the code proper the proper attention,
running it through the Python <a href="http://www.python.org/dev/peps/pep-0008/">pep8</a>
code formatting tool and the <a href="http://www.logilab.org/857">pylint</a>
utility, added documentation and useful output, and made the code a bit
more resilient and robust. Again, familiarity with the language and the
Way of Python, this was a fairly quick process. In another hour, I had
the code cleaned up and wrote a database tool specific to the project to
faciliate testing and migrating the code to another machine.</p>

<p>I do take pride in my work, so both source files are 100% PEP8 compliant
and score 10.00/10.00 in pylint. Here&#8217;s the crux of the concepts central
to this post: I used &#8220;just ship it&#8221; to get a working version that was good
enough to last through the morning, but I made my first priority once the
code was live to get it cleaned. The benefits of clean code are many,
not the least of which is maintainability, so the question is: what is
the transition point? It would also be prudent to devise a strategy for
cleaning up the codebase in most applications: lobsterpie is just under
one hundred lines of actual code at this point, so it&#8217;s all well and
good to utilise an immediate, clean-the-entire-codebase (the all of one
file that comprises the project). Real-world projects are considerably
larger and more pragmatically messy; that is, they tend to suffer from
the get-it-done mentality out of a practical necessity for working code.
At what point do you transition mentalities, or does one mentality take
precedent? What sorts of strategies can be employed?</p>

<p>In the past, I&#8217;ve rotated sections of projects between &#8220;development&#8221; mode
and &#8220;maintenance&#8221; mode. The difference being that code under development
is an area I am focusing new features on. Code that is under maintenance
is being cleaned up, possibly refactored. I find this provides a
side-benfit: when I run into road blocks on the development code, I can
put the problem on the back burner and mull over it while carrying out
the typically more mundane task of cleaning up code. It also gives me work
to do while trying to solve the complex problems of my code while improving
code quality.</p>

<p>There is also a balance to be had between developing your skills in a new
language and using the language(s) you know best. While I learned a lot of
relevant Common Lisp skills, including not only the language and library
but general workflow, at the end of the day I still didn&#8217;t have working
code. I&#8217;d set a goal for myself: if by the deadline, I wasn&#8217;t making
progress (and progress had more or less halted on the OAuth part), I forced
myself to switch over to Python. It is hard, sometimes, to determine where
this switchover point should be. This is often exacerbated  on side
projects, where there isn&#8217;t a hard deadline for the code to be finished
and no client / manager pushing for it to get done. For this, I don&#8217;t
have any easy answers and even fewer examples as I have a predisposition
towards a bullheaded nature of stubbornly trying to slog through things.
This sometimes works in my favour, in terms of things learned. Quite
often, it kills projects.</p>

<p>At the end of the day, I want to have working, proudifying code. I said
I&#8217;d explain that word; my friend <a href="http://www.ryaniam.com">Ryan</a> was
trying to help me figure out the word I was looking for in its place,
and our conversation led his neologism. It essentially means, code that
instills or evokes a sense of pride. Code that I don&#8217;t mind showing people,
as opposed to code I don&#8217;t mind showing people the façade of. For example,
showing people the repository and not just showing them the cool application
or website the code powers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Undefined symbol errors in Lisp]]></title>
    <link href="http://kisom.github.com/blog/2012/07/18/undefined-symbol-errors-in-lisp/"/>
    <updated>2012-07-18T19:50:00-06:00</updated>
    <id>http://kisom.github.com/blog/2012/07/18/undefined-symbol-errors-in-lisp</id>
    <content type="html"><![CDATA[<p>The other day, I got a strange error while writing a macro (actually,
<code>deftest</code> from <a href="http://www.gigamonkeys.com">Peter Seibel&#8217;s</a>
<a href="http://www.gigamonkeys.com/book/">Practical Common Lisp</a>). My
<code>defmacro</code> looked like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">defmacro</span> <span class="nv">deftest</span> <span class="p">(</span><span class="nv">name</span> <span class="nv">parameters</span> <span class="k">&amp;body</span> <span class="nv">body</span><span class="p">)</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="nb">defun</span> <span class="o">,</span><span class="nv">name</span> <span class="o">,</span><span class="nv">parameters</span>
</span><span class='line'>     <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="vg">*test-name*</span> <span class="o">,</span><span class="nv">name</span><span class="p">))</span>
</span><span class='line'>       <span class="o">,@</span><span class="nv">body</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>At first glance, it looks fine. So, I defined a few tests with it
(<code>check</code> is another macro for reporting test results) and ran into a
bug:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="nv">CL-USER&gt;</span> <span class="p">(</span><span class="nv">deftest</span> <span class="nv">test-fn</span> <span class="p">()</span> <span class="p">(</span><span class="nb">format</span> <span class="no">t</span> <span class="s">&quot;testing~%&quot;</span><span class="p">))</span>
</span><span class='line'><span class="c1">; in: DEFTEST TEST-+</span>
</span><span class='line'><span class="c1">;     (LET ((*TEST-NAME* TEST-+))</span>
</span><span class='line'><span class="c1">;       (FORMAT T &quot;ohai~%&quot;))</span>
</span><span class='line'><span class="c1">; </span>
</span><span class='line'><span class="c1">; caught WARNING:</span>
</span><span class='line'><span class="c1">;   undefined variable: TEST-FN</span>
</span><span class='line'><span class="c1">; </span>
</span><span class='line'><span class="c1">; compilation unit finished</span>
</span><span class='line'><span class="c1">;   Undefined variable:</span>
</span><span class='line'><span class="c1">;     TEST-FN</span>
</span><span class='line'><span class="c1">;   caught 1 WARNING condition</span>
</span><span class='line'><span class="nv">TEST-FN</span>
</span><span class='line'><span class="nv">CL-USER&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I racked my brain trying to figure it out. Here&#8217;s the <code>macroexpand-1</code>
of that definition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nv">DEFUN</span> <span class="nv">TEST-FN</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">LET</span> <span class="p">((</span><span class="vg">*TEST-NAME*</span> <span class="nv">TEST-FN</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">FORMAT</span> <span class="no">T</span> <span class="s">&quot;testing~%&quot;</span><span class="p">)))</span>
</span><span class='line'><span class="no">T</span>
</span></code></pre></td></tr></table></div></figure>


<p>Still being new to Lisp, I didn&#8217;t see what was wrong with it. However,
the <code>LET</code> gives it away:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'>  <span class="p">(</span><span class="nv">LET</span> <span class="p">((</span><span class="vg">*TEST-NAME*</span> <span class="nv">TEST-FN</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>It tries to evaluate the symbol TEST-FN, which we haven&#8217;t defined yet
(we&#8217;re still building the function; as Paul Graham writes in
<a href="http://paulgraham.com/onlisp.html">On Lisp</a>, &#8220;building a function and
associating it with a certain name are two separate operations.&#8221; (page
13)). Let&#8217;s take a look back at the original <code>defmacro</code>: you&#8217;ll notice
that we&#8217;re evaluating <code>name</code> in the LET:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'> <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="vg">*test-name*</span> <span class="o">,</span><span class="nv">name</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>What I really wanted to do was to quote the value of name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'> <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="vg">*test-name*</span> <span class="ss">&#39;,name</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>With that, the testing suite works.</p>

<p>This is one reason I&#8217;m hand typing all the examples. It&#8217;s bugs like
this one that give me the best education and help me recognise when
things go sideways later.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing simple-email]]></title>
    <link href="http://kisom.github.com/blog/2012/06/26/introducing-simple-email/"/>
    <updated>2012-06-26T20:04:00-06:00</updated>
    <id>http://kisom.github.com/blog/2012/06/26/introducing-simple-email</id>
    <content type="html"><![CDATA[<p>Recently, I was planning out a new <a href="http://www.clojure.org">Clojure</a> project,
and one of the desiderata was the ability to email out alerts. After doing a
bit of searching, I couldn&#8217;t find any suitable libraries. They either didn&#8217;t
work, or maintained global state (which I wanted to avoid for just firing
off simple emails). However, I did run across <a href="http://will.groppe.us/post/406065542/sending-email-from-clojure">a post</a>
talking about the
<a href="http://commons.apache.org/">Apache Commons</a> <a href="http://commons.apache.org/email/">Email</a>
library. I have no Java background and I&#8217;m fairly new to Clojure, so figuring out
how to do some of the things I wanted was a bit interesting.</p>

<p>What I set out to write was a simple email client that could offer a few basic features:</p>

<ul>
<li>a programmatic way to send emails to one or a list of recipients</li>
<li>a way to avoid keeping shared state</li>
<li>the ability to both synchronously and asynchronously send email</li>
<li>sending plaintext emails (I personally hate HTML email)</li>
</ul>


<p>The result is <code>simple-email</code>; it is available via
<a href="https://github.com/kisom/simple-email">Github</a> and
<a href="https://clojars.org/simple-email">Clojars</a>.</p>

<p>One of the central ideas to my planning was that an exception should not nuke
the entire code. In this case, I think exceptions have been abused. Failure to
send email is not an exceptional condition, at least not in my book. That is a
routine and easily recoverable situation. Therefore, in this library all exceptions
are caught, with the message and cause being sent back in the results.</p>

<p>I&#8217;ve avoided keeping state by using a closure; when you want to send an email
the values used to set up the mail server are applied each time. State is
essentially simulated this way.</p>

<p>Now that we&#8217;ve gone over the background, let&#8217;s take a look at how to use the
library.</p>

<p>At the time I wrote this, the current version of <code>simple-email</code> is <code>1.0.2</code> so
in your <code>project.clj</code>, add <code>[simple-email "1.0.2"]</code> to your <code>:dependencies</code>. Then,
in your code, you can <code>(:require [simple-email.core])</code>.</p>

<p>The first step is to set up a mail server. The syntax for this is</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a2c8c18></p>

<p>It is designed to be used in a <code>def</code>, i.e.</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a2c8380></p>

<p>Alternatively, you can store this information in environment variables. The
function <code>mail-server-from-env</code> will do this. The relevant environment variables
are</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a2c7c50></p>

<p><code>mail-server-from-env</code> will attempt to make sense of whatever is in the
<code>MAIL_SSL</code> variable; &#8220;YES&#8221;, &#8216;yes&#8221;, &#8220;TRUE&#8221;, &#8220;true&#8221;, and 1 are all parsed
as true; everything else is false. <code>mail-server-from-env</code> takes an optional
argument that specifies the prefix to use for those variables, i.e. calling
<code>(mail-server-from-env "MY_MAIL")</code> will search for <code>MY_MAIL_MAIL_HOST</code> etc&#8230;</p>

<p>As mentioned before, the result is a closure that should now be passed to
the relevant functions. There are four forms:</p>

<ul>
<li><code>send-to</code> and <code>send-to-async</code> are the forms for sending an email to a single
recipient.</li>
<li><code>send-mail</code> and <code>send-mail-async</code> are the forms for sending an email to
multiple recipients.</li>
</ul>


<p>All four forms take the mail server returned from <code>mail-server</code> (or
<code>mail-server-from-env</code>) as the first argument.</p>

<p><code>send-to</code> and <code>send-to-async</code> take three additional string arguments:
the recipient address, the subject, and the message.</p>

<p><code>send-mail</code> and <code>send-mail-async</code> additionally take a vector or list argument
specifying a collection of strings identifying recipient email addresses, and
two string arguments specifying the subject and message.</p>

<p><code>send-to</code> and <code>send-mail</code> are synchronous and will block until the mail is
sent; they return a hash-map with the following keys:</p>

<ul>
<li><code>:ok</code>: true if the mail was successfully sent or false if there was an exception</li>
<li><code>:message</code>: the message from the exception on error, nil on success</li>
<li><code>:cause</code>: the cause of the exception on error, nil on success</li>
</ul>


<p>For example, if the mail was sent successfully, they would return something like</p>

<p>Liquid error: undefined method `join&#8217; for &#8220;\n{ :ok true :message nil :cause nil }\n&#8221;:String</p>

<p>Note that the call will fail if SSL is being used and the SSL certificate cannot be
verified; I&#8217;m working on understanding the underlying Java behind this to identify
a solution but I don&#8217;t have one at this time.</p>

<p>The asynchronous forms use Clojure agents to send the email asynchronously,
and return those agents for you to query at your leisure.</p>

<p>This is the first library I&#8217;ve submitted to Clojars and feedback is definitely welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Development on OpenBSD]]></title>
    <link href="http://kisom.github.com/blog/2012/06/11/clojure-development-on-openbsd/"/>
    <updated>2012-06-11T18:24:00-06:00</updated>
    <id>http://kisom.github.com/blog/2012/06/11/clojure-development-on-openbsd</id>
    <content type="html"><![CDATA[<p>I was trying to get <a href="http://www.gnu.org/software/emacs/">emacs24</a> installed on
my <a href="http://www.openbsd.org">OpenBSD</a> box to work on some
<a href="http://www.clojure.org">Clojure</a>. Here&#8217;s a quick rundown on getting started.</p>

<!-- more -->


<h2>Dependencies, or gathering provisions for the journey</h2>

<p>As with dealing with most of the GNU software packages, you&#8217;ll want to install
devel/autoconf and textproc/textutils. Clojure requires java, so install the
JDK and JRE:</p>

<p><code>pkg_add -vi jdk jre autoconf textutils</code></p>

<h2>Installing emacs24, or taming the beast</h2>

<p>First things first, you&#8217;ll want to download the emacs24 tarball. I had to tweak
the autoconf source, so after you apply the
<a href="http://kisom.github.com/downloads/patch/emacs24-openbsd-configure.patch">patch</a> (i.e., if the
emacs source is in ~/src/emacs-src, you&#8217;ll need to
<code>cd src &amp;&amp; patch -p1 &lt; emacs24-openbsd-configure.patch</code>) run autoconf on the
directory (<code>cd /path/to/emacs-source &amp;&amp; autoconf</code>). If you get a warning about
needing to provide an AUTOCONF_VERSION variable, then
<code>ls /usr/local/bin/autoconf-*</code> and <code>export AUTOCONF_VERSION=NN</code> where NN is
the highest number listed.</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5457c0></p>

<p>Emacs may be built with the standard <code>./configure &amp;&amp; make &amp;&amp; make install</code> to
install to /usr/local.</p>

<h2>leiningen and clojure, or whereupon the wizards are summoned forth</h2>

<p>This takes a while, so while you are building emacs, go ahead and install
clojure via <a href="https://github.com/technomancy/leiningen">leiningen</a>:</p>

<p><code>curl https://raw.github.com/technomancy/leiningen/stable/bin/lein &gt; lein</code></p>

<p>Copy lein somewhere on your path (e.g. ~/bin/lein) and make it executable
 - <code>chmod +x ~/bin/lein</code>.</p>

<p>You&#8217;ll want to install <a href="https://gihub.com/technomancy/swank-clojure">swank</a>.
As of this writing, the latest versions of clojure and swank-clojure are
1.4.0 and 1.4.2, respectively.</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a545040></p>

<p>Once lein has finished, let&#8217;s create a temporary project to test swank and
slime:</p>

<p><code>cd ~/tmp &amp;&amp; lein new testproject</code></p>

<p>Once emacs has finished installing, I recommend using bbatsov&#8217;s
<a href="https://github.com/bbatsov/prelude">prelude</a> - if you have git, you only
need to run</p>

<p><code>curl -L https://github.com/bbatsov/prelude/raw/master/utils/installer.sh | sh</code></p>

<p>Otherwise, you&#8217;ll need to install package.el - see
<a href="http://tromey.com/elpa/">ELPA</a>. I use
<a href="http://www.marmalade-repo.org">marmalade</a> instead of the vanilla ELPA install;
either way you will need to install
<a href="https://github.com/technomancy/clojure-mode/">clojure-mode</a>.</p>

<h2>Putting it to good use, or wherein the rubber meets the road</h2>

<p>Now fire up emacs. If you have the package manager installed (i.e. via prelude
or ELPA), check the list of available packages (<code>M-x package-list-packages</code>)
and install clojure-mode. Pull up ~/tmp/testproject/src/testproject/core.clj
and create a quick test function:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a544870></p>

<p>Fire up swank via <code>M-x clojure-jack-in</code>. If you get a long list of errors
with the last couple lines contains &#8220;NPT ERROR: Cannot open library&#8221;, you
need to fix your jdk install:</p>

<p><code>ln -s /usr/local/jdk-1.7.0/jre/lib/amd64/libnpt.so /usr/local/lib/libnpt.so</code></p>

<p>You may need to change the jdk-1.7.0 directory above to the one relevant to
your system. (Thanks to Beau Holton for helping me to figure this one out!)</p>

<p>Once swank loads, invoke the SLIME compiler on the core.clj buffer via
<code>C-c C-k</code>. Once you see</p>

<p><code>user&gt;</code></p>

<p>run <code>(testproject.core/test-swank)</code>:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a533b38></p>

<p>It may be useful to peruse the
<a href="http://common-lisp.net/project/slime/doc/html/">SLIME manual</a>.</p>

<p>Happy hacking!</p>

<p>Screenshots for the interested:</p>

<p><a href="http://kisom.github.com/images/clojure-openbsd.png"><img src="http://kisom.github.com/images/clojure-openbsd_thumb.png" alt="Clojure + SLIME in emacs24 on OpenBSD" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So, You Want To Unit Test in Xcode (Part 2)]]></title>
    <link href="http://kisom.github.com/blog/2012/03/16/so-you-want-to-unit-test-in-xcode-part-2/"/>
    <updated>2012-03-16T12:13:00-06:00</updated>
    <id>http://kisom.github.com/blog/2012/03/16/so-you-want-to-unit-test-in-xcode-part-2</id>
    <content type="html"><![CDATA[<p>In the <a href="http://kisom.github.com/blog/2012/03/15/so-you-want-to-unit-test-in-xcode">last post</a>, I
talked about getting unit testing set up in Xcode, why you should write
unit tests, and what kinds of things you should unit test. Now, I&#8217;d like
to talk a bit more about <em>how</em> to write unit tests. If you come from a
background doing unit testing, as I did, it&#8217;s very straightforward. If not,
I&#8217;ll spend a little time explaining things a bit more.</p>

<!-- more -->


<p>When you generate a test case, you get a test class (which is a subclass of
<code>SenTestCase</code>). Just like any other class, you can declare members and methods,
which are used to perform helper tasks and carry state.</p>

<p>A very basic codebase only requires test methods.
<a href="https://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/UnitTesting/00-About_Unit_Testing/about.html">OCUnit</a>
will load any method prefixed by <code>test</code>. These methods must return <code>void</code> and
take no parameters. After setting up the test in the method, you can use the
<code>ST...</code> macros to actually test the results. Here&#8217;s a contrived example:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7c2d3cd8></p>

<p>There are a number of test macros, which are listed in
<a href="https://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/UnitTesting/AB-Unit-Test_Result_Macro_Reference/result_macro_reference.html#//apple_ref/doc/uid/TP40002143-CH9-SW1">Appendix B</a>
of the <a href="https://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/UnitTesting/00-About_Unit_Testing/about.html">Xcode Unit Testing Guide</a>.</p>

<p>A real example taken from <a href="https://github.com/kisom/flexargs">FlexArgs</a>:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7c2cf3e0></p>

<p>This test is set up to verify that the dictionary returned by <code>DNFlexArgs</code> is
what we&#8217;d expect it to be. <code>[flexargs initParserWithNSArray:]</code> expects an
<code>NSArray</code> of NSStrings to be passed to it, I&#8217;ve initialised an <code>NSArray</code> of
<code>NSString</code>s. Because <code>DNFlexArgs</code> returns an <code>NSDictionary</code>, I&#8217;ve set up one
with the expected results. Then I setup the instance, pass it the initial
test arguments, and retrieve the results. The last step is to assert that the
returned <code>NSDictionary</code> matches the expected one. I&#8217;ve made sure to hit one of
each kind of possible argument that can be passed in.</p>

<p>In the last post, I listed some questions to help develop tests:</p>

<blockquote><ul>
<li>Right now, I&#8217;m only testing what I expect possible input <em>could</em> be. What
if someone passes in just <code>arg</code> or <code>arg=</code> - do I know that my code will handle
that gracefully?</li>
<li>What happens if I pass in an overflowed numeric value? I&#8217;ve tried to prepare
for this by using <code>long long</code> values, but how do I know my code is doing the
right thing?</li>
<li>What if I craft a special string that does something shifty, like embedding
a null byte? What happens then? What if the string has more than one <code>=</code> in it?</li>
<li>What happens if I <a href="http://pages.cs.wisc.edu/~bart/fuzz/">feed the parser random data</a>?</li>
</ul>
</blockquote>

<p>If you look in the source, you&#8217;ll see I&#8217;ve covered all but the last. That&#8217;s
because I haven&#8217;t yet found a good fuzzing library for Objective-C. However,
the new tests allowed me to make a few improvements to and verifications of
FlexArgs:</p>

<ul>
<li>I&#8217;ve verified that having an argument with no <code>=value</code> yields a boolean
value (i.e. <code>arg</code> results in an <code>arg = 1;</code>)</li>
<li>I&#8217;ve verified that having an argument with an empty value (i.e. <code>arg=</code>)
yields an empty string value (i.e. <code>arg = @"";</code>)</li>
<li>I was able to add support for multiple <code>=</code> in the class. Previously, only
the part of the value after the first <code>=</code> and before any other <code>=</code>&#8217;s was
captured. For example, passing <code>foo=bar=baz</code> resulted in <code>foo = @"bar";</code>
and <code>operator===</code> resulted in <code>operator = @"";</code>. Now, I get <code>foo = @"bar=baz";</code>
and <code>operator = @"==";</code>.</li>
<li>I was able to verify that passing a null byte in the middle of the string
just cut the string off at the null byte instead of causing problems.</li>
</ul>


<p>You can see the new code coverage output (as detailed in the
<a href="http://kisom.github.com/blog/2012/03/15/so-you-want-to-unit-test-in-xcode/">last post</a>)
<a href="http://kisom.github.com/downloads/FlexArgsCoverage2/">here</a>.</p>

<h2>More advanced test cases with <code>setUp</code>, <code>tearDown</code>, and class members</h2>

<p>OCUnit gives us more control over our test cases. Just like any other class,
we can include our own members in the class by putting their definitions
and any <code>@property</code> declarations in the interface. For example, if we&#8217;re
testing network code, we might want to create a socket.</p>

<p>If your members need to be set up for every test, or if certain preparation
needs to be done before each test (like clearing out a temporary directory),
you can reduce code duplication by putting the code in the <code>setUp</code> and
<code>tearDown</code> methods. The <code>setUp</code> method is called before each test method,
and the <code>tearDown</code> method is called after each. If you&#8217;re calling the same
code before each test, you might consider moving them. If most of your tests
are calling the same code and a few aren&#8217;t, consider creating a new test case
for the ones that don&#8217;t, and moving the duplicate code into these methods and
members.</p>

<h2>guard-xcode</h2>

<p>In the <a href="http://kisom.github.com/blog/2012-03-15/so-you-want-to-unit-test-in-xcode/">last post</a>, I
mentioned <a href="https://github.com/guard/guard/">guard</a>. What is guard?</p>

<blockquote><p>Guard is a command line tool to easily handle events on file system modifications.</p></blockquote>

<p>We can use this to trigger a build every time a source file is changed.
Unfortunately, I couldn&#8217;t find any good Guards (the term for specific tasks to
be done on a changed-file event) to handle running configurable builds. To
address this, I wrote a Guard called <code>guard-xcode</code>, which kicks off an Xcode
based on the options you configure it with. The source is, of course,
<a href="https://github.com/kisom/guard-xcode">on Github</a> and it&#8217;s on
<a href="https://rubygems.org/gems/guard-xcode">RubyGems.org</a>, so it can be installed
via <code>gem</code> or <code>bundle install</code>. The <a href="https://github.com/kisom/guard-xcode/blob/master/README.md">README</a>
explains how to get started.</p>

<p>For FlexArgs, the setup is fairly straightforward. I already have
<a href="http://growl.info/downloads#generaldownloads">growl-notify</a> installed, so all
I have to do is create my Gemfile:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7c2ccbe0></p>

<p>I&#8217;m using <a href="http://rvm.beginrescueend.com">rvm</a>, so I&#8217;ve already got the
<code>bundle</code> gem installed. You can install it with <code>gem install bundle</code> if you
need to. The next step is to run <code>bundle install</code>, and then <code>guard init xcode</code>.
Of course, the Guardfile doesn&#8217;t know the name of your target, so you&#8217;ll need
to open the Guardfile and edit it. Mine looks like this:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7c2ca840></p>

<p>Now all you need to do is run <code>guard</code> in your project root. Once files change,
<code>guard</code> will kick off a build. I&#8217;ve set <code>:quiet =&gt; true</code>, so I only get Growl
notifications if the build has warnings or errors.</p>

<h2>Some final ideas for a test-based development cycle</h2>

<p>There&#8217;s a few options you can set in your project build settings that I&#8217;ve
found quite useful:</p>

<ol>
<li>Setting <strong>Test After Build</strong> to <strong>Yes</strong> runs tests anytime a build is done.</li>
<li>Setting <strong>Treat Warnings as Errors</strong> to <strong>Yes</strong> adds more emphasis to
writing good code.</li>
<li>Adding the Test product to the main build makes testing easier as well, and
means you can set your build target to the main target, and still test.</li>
</ol>


<h2>Conclusion</h2>

<p>This concludes the two-part series on Unit Testing in Xcode. I&#8217;ve tried to
document what I learned trying to get testing set up, and hopefully other
people will find it helpful as well.</p>

<h2>References</h2>

<ul>
<li><a href="https://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/UnitTesting/00-About_Unit_Testing/about.html">XCode Unit Testing Guide</a></li>
<li><a href="http://www.infinite-loop.dk/blog/2011/12/code-coverage-with-xcode-4-2/">Code Coverage with Xcode 4.2</a></li>
<li><a href="https://github.com/kisom/flexargs/zipball/blog-post2">FlexArgs tag for this project</a></li>
<li>guard-xcode on <a href="https://github.com/kisom/guard-xcode">Github</a> and <a href="http://rubygems.org/gems/guard-xcode">RubyGems</a></li>
<li><a href="https://github.com/guard/guard">Guard on Github</a></li>
<li><a href="http://growl.info/downloads#generaldownloads">growl-notify</a></li>
<li><a href="http://rvm.beginrescueend.com">rvm</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So, You Want To Unit Test in Xcode]]></title>
    <link href="http://kisom.github.com/blog/2012/03/15/so-you-want-to-unit-test-in-xcode/"/>
    <updated>2012-03-15T19:19:00-06:00</updated>
    <id>http://kisom.github.com/blog/2012/03/15/so-you-want-to-unit-test-in-xcode</id>
    <content type="html"><![CDATA[<p>One of my personal preferences when testing
<a href="http://heim.ifi.uio.no/~trygver/themes/mvc/mvc-index.html">MVC</a> code is to
test my model using a commandline test driver, so when
<a href="http://samuelgoodwin.tumblr.com">Samuel Goodwin</a>
and I were talking about testing code and he brought that up, we started
discussing ways to more effectively write those commandline drivers. Long story
short, we decided a useful strategy would be able to provide a library to parse
arguments like &#8216;key=value&#8217; into a dictionary. Since we will be doing a lot of
iOS app work, and quite possibly desktop Cocoa work later on, we decided
writing a class to do this in Objective-C would be useful, and about 24 hours
later, <a href="https://github.com/kisom/flexargs/">FlexArgs</a> was dumped onto the
world. But that&#8217;s not what I want to talk about here. Rather, I&#8217;d like to
discuss what I&#8217;ve learned about unit testing in Objective-C. As a developer
who does a lot of testing in C and Python already, I immediately made it a
priority to learn how to do this. In this post, I&#8217;ll go over basic unit
testing, doing code coverage, and writing better tests. I&#8217;m particularly
aiming this post at people who know how to code and test, but want to do it
more effectively in Objective-C or want to learn how to get started.</p>

<!-- more -->


<p>Through version 0.9.0, which was a functional version of the code missing a few
other pieces, I was using the autotools suite to manage the build. (Why? I know
autotools, and can set up the build environment quickly, whereas I don&#8217;t use
Xcode enough to be terribly good at it.) Unfortunately, I couldn&#8217;t find any
good libraries to do it. One of the goals of the project was to learn Objective-C
better, so I buckled down and imported the project into Xcode. I subscribe to
the idea that it&#8217;s a good idea to start writing tests before you write code,
so writing tests after the bulk of the code was written felt a little janky.
I digress.</p>

<p>First things you&#8217;ll need to do is add a new target (<code>File</code>-><code>New</code>-><code>Target</code>)
and name it <code>(@"%@Tests", ProjectName)</code> (ex. MyClassTests), and save it.
Because this is a library I want to give other people, it&#8217;s set up as a CLI
application with a minimal main that gives an example of how to use code, and
so we don&#8217;t really need coverage for that. However, the test suite should be
exercising large portions of our code, so setting up code coverage for that is
a good way to make sure your tests are exercising your code fully.</p>

<p>I&#8217;d like to point out here that while code coverage is great for making sure
all of your code is being touched, it&#8217;s not a replacement for well-thought-out
tests. It&#8217;s a useful tool in the tool box while you&#8217;re developing code, and
great for profiling code to determine bottlenecks (but not
<a href="http://c2.com/cgi/wiki?PrematureOptimization">prematurely</a>!), but you still
need to make sure you&#8217;re testing your code fully. I try to take the time to
consider edge cases, places where the code might act inappropriately, and try
to implement some fuzzing to throw unexpected things at the code.</p>

<p>You can set up your main target to run tests as well. You&#8217;ll need to
edit the scheme:</p>

<p><img src="http://kisom.github.com/images/unit_testing_xcode/xcode4_edit_scheme.png" alt="editing the scheme in xcode4" /></p>

<p>Once there, select <code>Test</code>, and click the <code>+</code> to add the test case bundle.</p>

<p>Now, we can set up code coverage. Under the project settings, select the test
target. Under the build settings, change the <strong>Generate Test Coverage Files</strong>
and <strong>Instrument Program Flow</strong> options to <strong>Yes</strong>. Now the fun part is adding
in <code>libprofile_rt.dylib</code>. I found it under
<code>/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib</code>
in OS X 10.8. Under the <code>Build Phases</code> tab, you&#8217;ll need to add this to the
<code>Link Binary with Libraries</code> section. Once you start running tests, you&#8217;ll start
getting coverage data.</p>

<p>I lied about there being only one fun part. The other fun part is getting that
data, which you will find in the <code>Projects</code> tab in the Organiser. There is a
line called <code>Derived Data</code> with an arrow next to it to open that folder in
Finder. You&#8217;ll want to open that folder in your terminal emulator of choice.
For FlexArgs, I had to navigate to
<code>DERIVED_DATA/Intermediates/FlexArgs.build/Debug/FlexArgsTest.build/Objects-normal/x86_64/</code>.
There, you should see some files named <em>.gcno, </em>.gcda, and so forth.</p>

<p>At this point you&#8217;ll want to install <code>lcov</code> which is, most fortuitously, in
HomeBrew. <code>lcov</code> gives us pretty HTML output of our code coverage (via the
included <code>genhtml</code> program). You&#8217;ll also want to stick this small script in
your path:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5e5068></p>

<p>The first argument is the name of output file to generate, and is also used
to generate the title for the HTML output. The second is the output directory
to store the files in. Once you&#8217;ve run your tests, run that script and check
out the results. For my code, it built <a href="http://kisom.github.com/downloads/FlexArgsCoverage/">this page</a>.
Note that this is with two tests that don&#8217;t yet test the full functionality
(specifically <code>+(id)parserWithNSArray:(NSArray *)inargv</code> and
<code>-(id)initParser:(char **)inargv nargs:(int)nargs</code>), so you can see that the
output highlights those lines. If you take a look at the <a href="https://github.com/kisom/FlexArgs">FlexArgs</a>
source at <a href="https://github.com/kisom/flexargs/tree/bec86374f3876e8a8c44a17849a3f49c76245d1e">commit bec86374f3</a>
or the helpful tag <code>blog-post</code> (you can grab a <a href="https://github.com/kisom/flexargs/zipball/blog-post">zipfile snapshot</a>)
you&#8217;ll see I only have two tests, and they both touch basic functionality.</p>

<p>Intelligent and well-planned and executed tests offer many benefits:</p>

<ol>
<li>Validate the program&#8217;s logic</li>
<li>Drive development by letting you see what&#8217;s not implemented yet</li>
<li>Perform <a href="https://en.wikipedia.org/wiki/Regression_testing">regression tests</a>
to let you know if changes broke your code, or if they&#8217;ve broken other parts
of the codebase</li>
<li>Test edge cases to make sure your code doesn&#8217;t do anything unexpected</li>
<li>Assist in identifying possible security issues.</li>
</ol>


<p>So given this code, what kinds of tests could I write to improve the functionality?</p>

<ul>
<li>Right now, I&#8217;m only testing what I expect possible input <em>could</em> be. What
if someone passes in just <code>arg</code> or <code>arg=</code> - do I know that my code will handle
that gracefully?</li>
<li>What happens if I pass in an overflowed numeric value? I&#8217;ve tried to prepare
for this by using <code>long long</code> values, but how do I know my code is doing the
right thing?</li>
<li>What if I craft a special string that does something shifty, like embedding
a null byte? What happens then? What if the string has more than one <code>=</code> in it?</li>
<li>What happens if I <a href="http://pages.cs.wisc.edu/~bart/fuzz/">feed the parser random data</a>?</li>
</ul>


<p>As you can see, there&#8217;s a lot to think about. While writing tests ahead of time
to verify basic functionality is a great idea (I wrote about
<a href="http://www.kyleisom.net/blog/2011/07/04/rgtdd/">README-Generated Test-Drive Development</a>
previously), your tests need to go further to fully verify your code. Just by
looking at the questions above and thinking about the tests, I can already
see that my code needs some work to address some of those questions. I can
write the tests to validate the changes I&#8217;ll need to make.</p>

<p>I mentioned at the beginning that I like to test models using command line
test drivers. What this means is that I write a small command line target that
I can call from something like <code>make tests</code> or even <code>python testrunner.py</code> so
I can constantly run my tests. This way, I don&#8217;t need to worry about the view
or the controllers to develop the model. This follows my ideal of developing
model first, and letting the controller and view follow from that. In Xcode,
we can do this from the commandline inside the project using
<code>xcodebuild -target FlexArgsTest -configuration Debug clean build</code>.
Before you run this, set <em>Test After Build</em> to <em>Yes</em> in the Build Settings
to ensure the tests will run after building. (At some point, I&#8217;ll write a
<a href="https://github.com/guard/guard">Guardfile</a> to automate testing.)</p>

<p>I hope you find this useful. Now, if you&#8217;ll excuse me - I have more tests to write&#8230;</p>

<p>Update: I&#8217;ve written a <a href="http://kisom.github.com/blog/2012/03/16/so-you-want-to-unit-test-in-xcode-part-2/">part 2</a>,
which covers a bit more and includes <del>black magic where the dark lord has destroyed
my soul and brought death, destruction, and chaos upon the world</del> a Ruby
gem I wrote to assist in testing.</p>

<h3>References</h3>

<ul>
<li><a href="https://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/UnitTesting/00-About_Unit_Testing/about.html">XCode Unit Testing Guide</a></li>
<li><a href="http://www.infinite-loop.dk/blog/2011/12/code-coverage-with-xcode-4-2/">Code Coverage with Xcode 4.2</a></li>
<li><a href="http://drdobbs.com/tools/206105233">Regression Testing</a></li>
<li><a href="http://pages.cs.wisc.edu/~bart/fuzz/">Fuzzing</a></li>
<li><a href="http://www.kyleisom.net/blog/2011/07/04/rgtdd/">README-Generated Test-Driven Development</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autonomous Vehicles]]></title>
    <link href="http://kisom.github.com/blog/2012/02/26/autonomous-vehicle/"/>
    <updated>2012-02-26T17:33:00-07:00</updated>
    <id>http://kisom.github.com/blog/2012/02/26/autonomous-vehicle</id>
    <content type="html"><![CDATA[<p>I just finished up the first unit of <a href="http://www.udacity.com">Udacity&#8217;s</a>
<a href="">CS373 (Programming a Robotic Car)</a>.
It&#8217;s been a lot of fun, and reminds me of why I love Python so
much. In this post, I&#8217;m just going to go over what the end result of
the first week has been.</p>

<!-- more -->


<p><a href="http://xkcd.com/353/"><img src="http://imgs.xkcd.com/comics/python.png" alt="Obligatory XKCD" /></a></p>

<p>(Obligatory xkcd&#8230;)</p>

<p>This unit was all Monte Carlo localisation, which generates
probability distributions as to where the robot is in the world. This,
of course, is all very simplified but it is still quite a fascinating
learning experience.</p>

<p>The final homework question has us determining a probability
distribution (i.e. a matrix of probabilities guessing where the robot
is in the world) based on sensor readings and movements in a world of
red / green cells. For example, one of the first the worlds we&#8217;re
given in the examples looks like this:</p>

<p><img src="http://kisom.github.com/images/cs373/unit1/simple_world.png" alt="simple world example" /></p>

<p>You can see each cell in the world has a colour, and the robot&#8217;s
worldview consists of a 2D matrix of probabilities.</p>

<p>Given a list of sensor readings, i.e. <code>['green', 'red']</code> and a list
of corresponding motions in the form [y, x] such that <code>[1, 0]</code> is a
movement downwards and <code>[0, 1]</code> is a movement right, the robot should
be able to figure out where in the world it is. All the example code
in the class is done as simple functions operating in the <code>'__main__'</code>
namespace, but I used a Robot class to simulate everything. Testing
was painful, because I had to hand-type in most of the reference
probability distributions. Then,
<a href="https://bitbucket.org/kisom/cs373/changeset/70b3d80194ee">early Sunday morning</a>
(actually late Saturday night), I discovered the
<a href="http://pypi.python.org/pypi/colorama"><code>colorama</code></a> module, which
faciliates pretty terminal outputs (i.e. colors, bolding, etc&#8230;) I
was able to write a method to print out the map (aka the <code>.showmap()</code>
method in the screenshots) that made testing where the robot was a lot
more fun.</p>

<p>The red/green world felt very contrived. I had a pretty good unit
testing framework set up, so I decided to test my code using a road
test: I built a world with three lanes that used black to represent
the asphalt, yellow to indicate lane markers, and white to indicate
the shoulder marker. I simulated having the robot start at the
shoulder, drive forward and then switch to the middle lane. I expected
the robot should believe itself to be somewhere in the middle
lane.</p>

<p>The world looks something like this:</p>

<p><img src="http://kisom.github.com/images/cs373/unit1/road_test_world.png" alt="road test world" /></p>

<p>With that in mind, I wrote the road test:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5fde88></p>

<p>The <code>translate_drive</code> function maps the <code>motions</code> and <code>measurements</code>
into a pretty output form to make it more intuitive as to what&#8217;s being
simulated:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5fd820></p>

<p>Here&#8217;s an example of the road test in action:</p>

<p><img src="http://kisom.github.com/images/cs373/unit1/road_test.png" alt="road test screenshot" /></p>

<p>As expected, the robot thinks it is somewhere in the middle lane.</p>

<p>Next week, we start learning
<a href="https://en.wikipedia.org/wiki/Particle_filter">particle filters</a>
and <a href="https://en.wikipedia.org/wiki/Kalman_filter">kalman filters</a>.</p>

<p>I&#8217;m actively working to develop a physical AGV (autonomous ground
vehicle). The objective is to develop a platform I can use to build
later, more practical robots on; the AGV platform will be focused on
navigation. As part of this task, I&#8217;m also working to translate the
Python code to C++ (suitable for the Arduino, for example).</p>

<p>Stay tuned!</p>

<h3>References:</h3>

<ul>
<li><a href="http://robots.stanford.edu/papers/thrun.robust-mcl.html">Robust Monte Carlo Localization for Mobile Robots</a></li>
<li><a href="https://bitbucket.org/kisom/cs373">Python versions of the repo)</a> (private until the 28th)</li>
<li><a href="https://github.com/kisom/cs373">C++ version</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[carefree git and hg]]></title>
    <link href="http://kisom.github.com/blog/2012/02/22/carefree-git-and-hg/"/>
    <updated>2012-02-22T16:52:00-07:00</updated>
    <id>http://kisom.github.com/blog/2012/02/22/carefree-git-and-hg</id>
    <content type="html"><![CDATA[<p>I was at an <a href="http://www.appsterdam.rs">Appsterdam</a> lunch meetup today, and
before the presentation I was talking with some people about source control.
They worked for Atlassian, and so of course bitbucket v. github came up.
(It didn&#8217;t help that I was wearing a GitHub shirt. Atlassian - I want to give
you money to get a bitbucket shirt but I don&#8217;t see any for sale. Why?)
Regardless of why I typically use github more, or what my usage profiles are
for the two, they were interested to hear my solution to a problem I had:
how to simplify working in various source control systems, particularly in
both mercurial and git.</p>

<!-- more -->


<p>For a long time, I used mostly git and far less mercurial. I wrote a bunch
of aliases in my <code>.zprofile</code> that looked something like:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a577d88></p>

<p>For mercurial, I just entered everything normally. However, as I started to
use mercurial more, I wanted to use those aliases for both systems. I ended
up writing a bunch of shell functions to do this. They are all strict POSIX
compatible, so they work under at least <code>zsh</code>, <code>ksh</code>, and <code>bash</code>. I haven&#8217;t
tested any others, so your mileage may vary. The latest version of this is
available at my <a href="https://github.com/kisom/dotconf">dotconf github repo</a>, you
can view it <a href="https://github.com/kisom/dotconf/blob/master/.sourcecon.zsh">here</a></p>

<p>The core of the code is the pair of functions:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a577658></p>

<p><code>get_repo_type</code> does exactly what it says it does: it outputs a number that
identifies what type of source control the repo uses. The <code>not-a_repo</code>
simple provides a shortcut for displaying the error message. All of the
commands use these two functions. The commands are implemented in a similar
style, so let&#8217;s take a look at the first defined function, <code>pull</code>:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a576fc8></p>

<p>Unfortunately, shell scripting isn&#8217;t a terribly advanced programming language,
so there&#8217;s a lot of redundancy in the code; in fact all of the commands use the
same basic template of</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a576898></p>

<p>I thought of some other ways to do this, but they all ended up being far more
complex and time-consuming than just knocking it out like this. This style is
also POSIX-compatible, meaning it can be used with really any shell.</p>

<p>Another feature of note is that I&#8217;ve ensured to pass through the shell variable
<code>$@</code>, which means any arguments are passed directly to the command; this lets
you still enable the full use of the specialised commands without having to
mentally switch context between just typing the shortened command and the full
one.</p>

<p>So, let&#8217;s look at what commands are supported (use <code>vcshelp</code> to list them):</p>

<ul>
<li>commit</li>
<li>add</li>
<li>pull</li>
<li>push</li>
<li>checkout</li>
<li>fetch</li>
<li>clog</li>
<li>which_dvcs</li>
<li>vcdiff</li>
</ul>


<p>For the most part, they are wrappers around the $scm version of the command,
passing through any arguments as before. The last three aren&#8217;t (but do pass
through any command line options as appropriate):</p>

<ul>
<li><code>clog</code> is a shortcut for &#8216;commit log&#8217;, and shows the $scm log. For mercurial,
it will pipe it to less (by default, hg doesn&#8217;t).</li>
<li><code>which_dvcs</code> is a wrapper around get_repo_type to print the name of the SCM
instead of the numeric value used in the functions.</li>
<li><code>vcdiff</code> is a version control diff; like <code>clog</code>, it will pipe hg diff to less.</li>
</ul>


<p>There are a few commands that aren&#8217;t documented in <code>vcshelp</code>:
* <code>co</code> is an alias for <code>checkout</code>
* <code>st</code> is a variant of status that shows only tracked files</p>

<p>I&#8217;ve found this system to work out pretty well for me, mostly because it
requires less mental power to handle the basic SCM workflow. It also satisfies
my coder&#8217;s itch to remove unnecessary code (i.e. always having to prefix <code>git</code>
or <code>hg</code> to source control commands) by making the shell &#8220;aware&#8221; of which SCM
I&#8217;m using at the time.</p>

<p>There is, of course the caveat that <a href="http://jrick.devio.us">Josh Rickmar</a>
pointed out. I&#8217;ve come to grow used to a lot of the specifics of working
with the different SCMs. Two common idioms I use a lot with this setup are
<code>commit -a</code> in a git repo and <code>pull -u</code> in a mercurial repo. If you are using
an SCM, you should definitely get to know it before using it for serious
work. Of course, you can also take my code and tweak it so that it behaves
differently. The code is yours.</p>

<p>Thanks go to Chris LePetit, who suggested I write the article.
<a href="http://samuelgoodwin.tumblr.com">Samuel Goodwin</a> and
<a href="https://twitter.com/imwally">Wally Jones</a> proofread it for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analytics Win]]></title>
    <link href="http://kisom.github.com/blog/2012/02/21/analytics-win/"/>
    <updated>2012-02-21T12:15:00-07:00</updated>
    <id>http://kisom.github.com/blog/2012/02/21/analytics-win</id>
    <content type="html"><![CDATA[<p>Inexplicably, for the longest time I was reticent to enable any sort of
analytics on my personal site. Partially because, to be honest, it&#8217;s not
as if my blog is well read (or so I assume, but soon I&#8217;ll have numbers
to back that claim up). As I try to get more involved in the world, I&#8217;ve
found my site is useful as a portfolio of sorts - not so much in the way
of &#8220;look at my sexy site&#8221; as &#8220;here&#8217;s the cool things I do&#8221;. I&#8217;ve noticed
that <a href="https://github.com">GitHub</a> has had some DDoS issues lately, and as
I host this site on my <a href="http://pages.github.com/">GitHub pages</a>, I wanted
to minimise any potential downtimes. I&#8217;d also noticed that some of my
pages were a bit on the slow side to load, as <a href="http://octopress.org/">Octopress</a>
appears to load quite a bit of javascript. I admit to being a fan of many of
the asides, and to have written some of my own.</p>

<!-- more -->


<p>In order to improve this situation, I took two steps:</p>

<ol>
<li>I enabled Google Analytics:
while I&#8217;m not a particular fan of feeding the privacy black hole with even more
data, it appears to be the only viable option at this time. I have been eyeing
<a href="http://haveamint.com/">Mint</a>, but I am abstaining from purchasing anything new
until I leave the Netherlands (in a little over a week) just to stay on the
safe side of my bank account. (30 USD may not sound like much, but that&#8217;s about
two days worth of döner or shawarma for dinner.)</li>
<li>I set up the site on CloudFlare.</li>
</ol>


<p>What I didn&#8217;t realise is that several of my older posts actually rank high on
Google&#8217;s search results; however, the link on Google points to the old url
from when I was using <a href="http://blaze.blackened.cz">blazeblogger</a>. Because the
content is actually useful documentation, I was able to set up redirects so
that the page is back online and people can use the information now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on Mountain Lion]]></title>
    <link href="http://kisom.github.com/blog/2012/02/17/thoughts-on-mountain-lion/"/>
    <updated>2012-02-17T20:16:00-07:00</updated>
    <id>http://kisom.github.com/blog/2012/02/17/thoughts-on-mountain-lion</id>
    <content type="html"><![CDATA[<p>One of the great things about paradigm shifts is we can throw out the old
and start from scratch, getting rid of all the old cruft that&#8217;s built up over
time. Computers are no different, and the tablet revolution has allowed us
to rethink a few things. It looks like Apple is finally converging some of the
lessons learned with iOS and OS X. So, let&#8217;s take a look at some of these
ideas:</p>

<!-- more -->


<h3>The App Store as a sole source of software</h3>

<p>I&#8217;ve heard a lot of complaints about this. The fact of the matter is that for
the average user, this makes sense. It limits the exposure due to malware. For
users who need expanded privileges, it is <em>extremely</em> easy to do. This follows
a principle of secure by default and requiring a decision on the user&#8217;s part
to open up their system. Does Apple benefit? Surely. However, in this case the
decision also benefits users.</p>

<h3>Messages</h3>

<p>We are surrounded by a variety of chat systems. On mobile phones, SMS reigns
supreme; while on the desktop, there are more chat protocols than you can
shake a stick at. Bringing Messages onto the desktop starts to unify the
two systems. While Jabber and AIM / OSCAR are two very common protocols, it
would be good to see Twitter and perhaps even IRC. (While I would love to
see SILC supported, I don&#8217;t expect to see that anytime soon). One other thing
missing is OTR support. While the iMessage compatibility is interesting, lack
of Twitter and OTR support make it not compelling enough for me to switch over
as my chat client<a href="#footnotes">*</a>.</p>

<h3>XCode</h3>

<p>Apple is now providing a much smaller download with just the compiler and
commandline tools needed to use <a href="http://mxcl.github.com/homebrew/">Homebrew</a>
or other package management systems.</p>

<h3>Conclusion</h3>

<p>We&#8217;re starting to see some of the benefits of tablet revolution folded back
into the desktop and laptop realm. For normal users, these changes create a
more streamlined experience and improve the overall security of the system.
For developers, there are some changes to simplify non-iOS / Cocoa developers&#8217;
setups. I think this is a step in the right direction.</p>

<p>Except that it&#8217;s called &#8220;Mountain Lion.&#8221;</p>

<h3><a name="footnotes">Footnotes</a></h3>

<ol>
<li>I currently use <a href="http://www.adium.im/">Adium</a> for my chat and twitter client.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Aquamacs for Clojure]]></title>
    <link href="http://kisom.github.com/blog/2012/02/02/setting-up-aquamacs-for-clojure/"/>
    <updated>2012-02-02T20:03:00-07:00</updated>
    <id>http://kisom.github.com/blog/2012/02/02/setting-up-aquamacs-for-clojure</id>
    <content type="html"><![CDATA[<p>It took me a bit to get my <a href="http://www.aquamacs.org">Aquamacs</a> install
up and ready to do <a href="http://www.clojure.org">Clojure</a>
and <a href="http://common-lisp.net/project/slime/">SLIME</a>, so I figured I&#8217;d jot
some notes down for future me and anyone who happens to be listening.</p>

<!-- more -->


<p>I assume Aquamacs has been downloaded and
<a href="https://github.com/technomancy/leiningen">leiningen</a> is installed. First,
in a terminal, you&#8217;ll need to install swank-clojure. As of today, the
current version is 1.4.0, but I strongly recommend you check the README
to see if there&#8217;s a new version out. In the shell,
<code>lein plugin install swank-clojure "1.4.0"</code>.</p>

<p>I use <a href="http://marmalade-repo.org/">Marmalade</a> for package management, so
the first thing to do is to add Marmalade to Aquamacs. Open up
<code>"~/Library/Preferences/Aquamacs\ Emacs/Preferences.el"</code> in your editor
of choice (I used <a href="https://code.google.com/p/macvim/">MacVim</a>), and add
the folowing:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a2c8740></p>

<p>I&#8217;m assuming you don&#8217;t have <code>package.el</code> installed yet, so make sure to
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a2c8010></p>

<p>Now fire up Aquamacs (or evaluate the additions to <code>Preferences.el</code> with
<code>C-x C-e</code>. <code>clojure-mode</code> needs to be installed, either via <code>M-x package-list-packages</code>,
and marking <code>clojure-mode</code> for installation (with <code>i</code>) and installing
(with <code>x</code>), or with <code>M-x package-refresh-contents</code> followed by
<code>M-x package-install clojure-mode</code>. I also like <code>paredit</code> but you
might not, it takes some getting used to.</p>

<p>Now, open up a file in your lein&#8217;d project and use <code>M-x clojure-jack-in</code>.
You might see some errors pop up in your <code>*Compile-Log*</code> buffer, but you
should be very shortly greeted with a REPL.</p>

<p>Happy hacking!</p>

<h2>The End Result</h2>

<p>Here&#8217;s a screenshot of how it turned out (click to view it full-size):
<a href="http://kisom.github.com/images/aquamacs-clojure.png"><img src="http://kisom.github.com/images/aquamacs-clojure.t.png" alt="aquamacs-clojure thumbnail" /></a></p>

<p>I usually run aquamacs full-screen with two panes, left-side for editing
source code and right-size for SLIME.</p>

<h2>References</h2>

<p>I patched together my knowledge from a couple of pages:</p>

<ul>
<li>Incanter&#8217;s article <a href="http://data-sorcery.org/2009/12/20/getting-started/">Setting up Clojure, Incanter, Emacs, Slime, Swank, and Paredit</a></li>
<li>The Doctor What&#8217;s article <a href="http://docwhat.org/2011/08/aquamacs-2-3a-and-marmalade/">Aquamacs 2.3a and Marmalade</a></li>
<li>Phil Hagelberg&#8217;s <a href="https://github.com/technomancy/swank-clojure">swank-clojure</a> <a href="https://github.com/technomancy/swank-clojure/blob/master/README.md">README</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Set Theory]]></title>
    <link href="http://kisom.github.com/blog/2012/02/01/using-set-theory/"/>
    <updated>2012-02-01T20:45:00-07:00</updated>
    <id>http://kisom.github.com/blog/2012/02/01/using-set-theory</id>
    <content type="html"><![CDATA[<p>In the <a href="http://kisom.github.com/blog/2012/01/23/basic-set-theory/">last post</a>, we took a look at the
basics of set theory. Now, I&#8217;d like to take a look at how to actually make use
of it in your code.</p>

<p>One of the issues with practically using the code in the last post is that the
initial subsets were defined arbitrarily and not derived from the superset. In
this post, all the examples are derived from the superset. We&#8217;ll use a couple
techniques for doing this illustrate some of the various ways to do it.</p>

<p>In Python, we&#8217;ll use an object-oriented approach, creating a few classes and
working on Book objects. In Clojure, we&#8217;ll use records. Though we&#8217;ll approach
language a little differently, I  hope they still bring clarity to the subject.</p>

<!-- more -->


<h2>Foundation: A Collection of Books</h2>

<p>The first thing we need to do in a useful system is determine what we mean by
book. The last post represented each book as a string denoting the title; while
that worked for a brief introduction, in practise it gives us very limited
options for building subsets. What we need to do is identify more information,
called attributes or fields, that give us the information we need to build our
subsets.</p>

<h3>Python</h3>

<p>In Python, we&#8217;ll approach this using a class. I&#8217;ve saved them in <code>library.py</code>
in the <a href="http://kisom.github.com/downloads/code/using-set-theory/py_example.tar.gz">Python example code</a></p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5fb250></p>

<p>We&#8217;ll also want a <code>BookCollection</code> class to store a set of books and provide
some utility methods for dealing with the collection:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5fad00>
These two classes are very short (and we&#8217;ll extend them later to make them
more useful) but provide a solid foundation to begin building on. You&#8217;ll want
to load the books in the class.</p>

<p>To load an example book, you would do use code similar to this:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5fa710></p>

<p>Manually entering all these details is tedious. Fortunately for you, I put up
with the tedium to create a sample dataset in <code>sample_library.py</code>. You use the
function <code>get_library()</code> from the file to use it.</p>

<h3>Clojure</h3>

<p>In Clojure, we&#8217;ll use a record to define a book:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5fa0a8></p>

<p>We&#8217;re not using objects, so we don&#8217;t need a record to store a collection.
(If we wanted to validate formats, we could do it using a Ref and a
:validator argument - that&#8217;s left as an exercise for the reader). I have,
however, defined a few helper functions.</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5f9a18></p>

<p>Adding books is a simple affair:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5f9518></p>

<p>I&#8217;ve loaded a sample dataset into the <code>sample_library.clj</code> source file, available
from the <a href="http://kisom.github.com/downloads/code/using-set-theory/clj-example.tar.gz">Clojure example code</a>.</p>

<h2>Building Subsets</h2>

<p>Now that we have a way to represent a book (with more useful information than
simply the title), we can start to build some subsets. Let&#8217;s start by
looking at <em>set notation</em> (aka how to write a set both mathematically and
in code), and then continue on to recreate the two subsets in the previous
article, <code>epub</code> and <code>mobi</code>.</p>

<h3>Set Notation</h3>

<p>In <a href="https://en.wikipedia.org/wiki/Set_notation">set notation</a>, we denote
a set by writing:</p>

<blockquote><p>A = { x | x ∈ N, x &lt; 10 }</p></blockquote>

<p>which means the set of numbers that are members of (∈ means <em>&#8216;element of&#8217;</em>)
the set of positive integers and are less than 10. You might generalise this
as such:</p>

<blockquote><p>given the universal set S, which defines all the elements under
consideration, and some predicate P which is a function that returns either
true if the element satisfies the predicate (and thus should be included
in the set):<br>
{ x | x ∈ S, P(x) }</p></blockquote>

<p>We would express this set as:</p>

<blockquote><p>A = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }</p></blockquote>

<p>In Python, this is easily expressed with a
<a href="http://www.python.org/dev/peps/pep-0202/">list comprehension</a> (see also
the <a href="http://docs.python.org/reference/expressions.html#list-displays">Python documentation</a>:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5f9018></p>

<p>And in Clojure, we could use something similar:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5f8b18></p>

<h3>Building the Subsets</h3>

<p>As mentioned earlier, I have already built sample datasets for both Python
and Clojure, so be sure to use those and save yourself from having to build
your own just yet!</p>

<h4>Python</h4>

<p>In Python, we can use the built-in <code>filter</code> function to build a list. It will
serve as our predicate function.</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5f85f0></p>

<p>This gives me the output:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5f80f0></p>

<p>If you recall the definition of <code>BookCollection</code>, the filter method is
called as <code>filter(predicate, collection)</code>. In the case of the <code>mobi</code>
subset, it filters out anything that fails the test
<code>'mobi' in book.formats</code>. We might write this as</p>

<blockquote><p>{ book | book ∈ <code>my_library</code>, <code>is_mobi(book)</code> }</p></blockquote>

<p>in set notation. I&#8217;ve predefined some filters in the file <code>formats.py</code>
which is again in the <a href="http://kisom.github.com/downloads/code/using-set-theory/py_example.tar.gz">example code</a>.</p>

<h4>Clojure</h4>

<p>Likewise, Clojure has a built-in filter function, in the form
<code>(filter pred coll)</code>. We&#8217;ll use two
<a href="http://clojuredocs.org/clojure_core/clojure.core/fn">anonymous functions</a>
to do our filtering:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5f7ab0></p>

<p>In the repl, this gives me:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5f7560></p>

<p>I&#8217;ve put these filters in the <code>filters.clj</code> source file, along with definitions
for <code>epub-books</code> and <code>mobi-books</code>:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5f6ed0></p>

<h2>Parallels with SQL</h2>

<p>This introduction of filters might remind you of SQL, and for good reason.
<a href="https://en.wikipedia.org/wiki/Edgar_F._Codd">Edgar Codd</a> designed SQL with
set theory in mind. You can think of tables as sets (provided, of course,
proper data preparation is done to ensure there are no duplicates in the
database), and operations like <code>SELECT</code> return subsets. For example, if we
were storing the books in a library, we would write something like</p>

<p>Liquid error: undefined method `join&#8217; for &#8220;\nSELECT * FROM books WHERE has_epub = TRUE;\n&#8221;:String</p>

<h2>Moving On</h2>

<p>Now that we have a programmatic way to build subsets, we can automate the entire
set of sequences in the <a href="http://kisom.github.com/blog/2012/01/23/basic-set-theory/">last post</a>:</p>

<h3>Python</h3>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5f6200></p>

<p>which gives me the results:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5f5c60></p>

<h3>Clojure</h3>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5f55f8></p>

<p>In the Clojure REPL, I get the following output:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5f4f90></p>

<h2>Sets v. Lists</h2>

<p>Remember that one of the key attributes of a set is that each member is distinct.
Let&#8217;s compare a set with a list; we&#8217;ll do this with an intersection.</p>

<h3>Python</h3>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5f4978></p>

<p>The result:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5f4388></p>

<h3>Clojure</h3>

<p>In Clojure, we&#8217;ll use the vector type, which is like a list but the first
element isn&#8217;t evaluated:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5f3d70></p>

<p>Which yields:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5f3780></p>

<h3>So what?</h3>

<p>You&#8217;ll notice &#8220;Code Complete&#8221; shows up twice in the list. The advantage of sets
here is that only unique items are returned. A union is actually the list of
elements in both sets, <em>minus</em> the list of items that are in both
sets.</p>

<h3>A Second Stab: Python</h3>

<p>Implementing the set operations:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5f3208></p>

<p>Applying this to our lists:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5f2bc8></p>

<h3>A Second Stab: Clojure</h3>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5f24c0></p>

<p>Applying this:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5f1d18></p>

<h2>Applications</h2>

<p>This has been just a quick introduction to the topic, but hopefully you
can see the relevance to areas like data mining. Coincidentally, datasets
tend to conform to the mathematical idea of sets, and typically with some
data massaging (i.e. to filter out duplicates), those that don&#8217;t can
be made more like mathemtical sets. Once appropriately represented in the
computer, they can be acted upon with the basic set operations.</p>

<p>I&#8217;ve created an additional example: a web service providing a rest API to
the book collection. As with the code in this post, there is an example in
<a href="https://bitbucket.org/kisom/py_web_service/get/release-1.0.2.tar.gz">Python</a>
and in
<a href="https://github.com/kisom/clj_web_service/tarball/release-1.0.2">Clojure</a>. The
README in either example explains what dependencies are required. You can also
view the <a href="https://bitbucket.org/kisom/py_web_service/">Bitbucket repo</a> for the
Python example, or the <a href="https://github.com/kisom/clj_web_service">GitHub repo</a>
for the Clojure example.</p>

<h2>Acknowledgements</h2>

<p><a href="https://www.github.com/saolsen">Stephen Olsen</a> reviewed many iterations of this
article and helped me to properly articulate the important points (like illustrating
that unions require the subtraction of the intersection). I originally wrote
the bulk of this article on the 25th, but it took me until the 28th to finish
writing the API example code, until the 31st to add in the additional union
explanation, and until the 1st to polish it up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Noir v. Flask]]></title>
    <link href="http://kisom.github.com/blog/2012/01/28/noir-v-flask/"/>
    <updated>2012-01-28T18:49:00-07:00</updated>
    <id>http://kisom.github.com/blog/2012/01/28/noir-v-flask</id>
    <content type="html"><![CDATA[<p>Noir v. Flask: the shootout</p>

<p>I wrote a quick REST API server as an illustration for a blog post, but
I wrote both a Python and a Clojure version. I wrote a test suite to
cover the entire API (of course - you <em>do</em> write tests too, right?),
and I figured while I was at it, I might as well benchmark the two. Here
are the results of 1,000 runs:</p>

<!-- more -->


<ul>
<li>noir: average run time: <code>0:00:00.171184</code> (0.171184 seconds)</li>
<li>flask: average run time: <code>0:00:00.147073</code> (0.147073 seconds)</li>
</ul>


<p>Notes:</p>

<ul>
<li>the time to start the noir server is much longer, about 5-10 seconds
on my 2011 Macbook Air (1.6 GHz Intel Core i5 with 4G of RAM and a 64G
SSD)</li>
<li>both servers were running on the same machine at the same time,
obviously just listening on different ports</li>
<li>I tested this with the Python test suite</li>
</ul>


<p>Source Code:</p>

<ul>
<li><a href="https://github.com/kisom/clj_web_service">clojure / noir example</a></li>
<li><a href="https://bitbucket.org/kisom/py_web_service">Python / flask example</a></li>
</ul>


<p>References:</p>

<ul>
<li><a href="http://www.webnoir.org">Noir</a></li>
<li><a href="http://flask.pocoo.org/">Flask</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Set Theory]]></title>
    <link href="http://kisom.github.com/blog/2012/01/23/basic-set-theory/"/>
    <updated>2012-01-23T17:44:00-07:00</updated>
    <id>http://kisom.github.com/blog/2012/01/23/basic-set-theory</id>
    <content type="html"><![CDATA[<p>Recently, I was explaining to someone the basics of set theory and how the
various basic operations translate to the real world. I used the example of the
project I&#8217;m currently working on, which is a web front end to my ebook library.
This is a very quick introduction aimed at people with a programming background
but who don&#8217;t have a strong math background; the goal is to help you to learn
to use them without having to delve deep into the math behind them.</p>

<!-- more -->


<h2>Basic Properties of Sets</h2>

<p>The first thing we have to do is to explain what is meant by a <em>set</em> -</p>

<blockquote><p>definition: set<br>
A set is any collection of items where each item is unique and the order of
items in the collection is not important.</p></blockquote>

<p>The uniqueness property is very important to sets: there are no duplicates in
a set.</p>

<p>So what does a set look like? In my database, I have a list of all the books
I have electronic copies of. Each book comes in at least one of three formats:
PDF, epub, or mobi. We&#8217;ll call the <em>superset</em> (the universal set of all the items
under consideration) the list of all the books in the library. We&#8217;ll call this
set &#8216;L&#8217; (for Library). Part of the set might look like:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a593308></p>

<p>We use <code>'{}'</code> to denote the members of a set. The order of books in the library
doesn&#8217;t matter here, and it doesn&#8217;t make sense to have more than one entry for
a book in the library.</p>

<p>Building a set in Python is very easy:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a5929f8></p>

<p>Clojure has set notation built in using the <code>#{ }</code> syntax, and any collection
can be turned into a set with <code>(set coll)</code>:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a591b20></p>

<p>So now we need to build some subsets.</p>

<blockquote><p>definition: subset<br>
A subset is some part of a set.</p>

<p>definition: proper subset<br>
A proper subset is some part of a set, but is not the whole set.</p></blockquote>

<p>For example, we&#8217;ll create a subset of books P that are on or in Python. We&#8217;ll also create a subset of books E that are in the English language. For my library,
because not all of my books are in or about Python, the number of members of P
is smaller than the number of elements in L. However, all of my books are in
English, so the number of elements in E is the same as the number of elements in
L. Therefore P is a proper subset, while E is not.</p>

<h2>The Basic Set Operations</h2>

<p>Now let&#8217;s consider two proper subsets of the library to explain some of the basic
set operations: M is the subset of ebooks that I have in mobi format, and we&#8217;ll
redefine E to be the list of ebooks in epub format. For the sake of the rest of
this article, let&#8217;s note the following:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a590450></p>

<p>In practical terms, this means in my library I have copies of:</p>

<ul>
<li>&#8220;Natural Language Processing with Python,&#8221; &#8220;Introduction to Information
Retrieval,&#8221; and &#8220;Code Complete&#8221; in mobi format</li>
<li>&#8220;The Joy of Clojure,&#8221; &#8220;Mining the Social Web,&#8221; and &#8220;Code Complete&#8221; in epub
format.</li>
</ul>


<p>In Python:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a597728></p>

<p>In Clojure:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a596a08></p>

<h3>Union</h3>

<p>A union is the set of members that appear in either set - if it&#8217;s in at least
one of the sets, it will appear in a union of the two sets. So we could define
a subset of L that contains all the books I have in a mobile format, which for
our purposes means copies exist in epub or mobi format. In Python, you can
use the <code>set.union</code> method, and in Clojure you can use the functions in the
<code>clojure.set</code> namespace.</p>

<p>In Python:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a595c70></p>

<p>which yields the output:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a594640></p>

<p>Remember that one of the properties of sets is that order is irrelevant, so you
might get the books in a different order (this applies to Clojure as well).</p>

<p>The same thing, in Clojure:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a59b490></p>

<p>You would see a similar output to the Python example.</p>

<p>Again, the practical result of this is a set of all the books I have in my
library in a mobile format.</p>

<h3>Intersection</h3>

<p>The intersection of two sets is a list of all the members that only appear in
both sets. In the library example, taking the intersection of the mobi and epub
sets gives me a set of my books that I have in both epub and mobi format. The
<code>intersection</code> function gives me this result.</p>

<p>The Python example:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a59a8b0></p>

<p>And in Clojure:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a599b90></p>

<p>For either example, the output should be just one book, given the sample sets:
Liquid error: undefined method `join&#8217; for &#8220;\nCode Complete\n&#8221;:String</p>

<p>I could use this result to know which books I can use on any mobile device.</p>

<h3>Difference</h3>

<p>The difference of one set from another is a list of all the members in the first
set that are not in the second set. This operation is a bit different from the
first two; the first two operations are
<a href="http://en.wikipedia.org/wiki/Commutative_property">commutative</a>,
but the result of a difference is dependent on the order of the sets. I&#8217;ll
illustrate this with some code examples:</p>

<p>In Python:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a598178></p>

<p>In Clojure:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a59f5b8></p>

<p>As the output messages show, this gives us the set of books that are only
in mobi and the set of books that are only in epub. The output should look
something like:</p>

<p>Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a59e898></p>

<h3>Complements</h3>

<p>When discussing complements, we do so when considering a subset and it&#8217;s
superset. The complement of a subset is the difference of subset from the
superset; i.e., the set of all members in the superset that are not in the
subset. For example, if I wanted to check my library for all ebooks I have
that are not in mobi format, I would use the superset <code>library</code> and take the
difference of mobi from library:</p>

<p>In Python:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a59dd58></p>

<p>and in Clojure:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a59d218></p>

<p>This gives us the output:
Liquid error: undefined method `join&#8217; for #&lt;String:0x007ffd7a59c340></p>

<h2>Conclusion</h2>

<p>This has been a very basic look at set theory and what it means in practise.
There is a lot more to set theory (see the references) but this should help
get you started. There are a lot of applications for set theory, such as in
data mining and natural language processing; it is a powerful tool that is
worth spending some time to get to know.</p>

<p>Stay tuned for the next post, which will be on how to use sets in your code.
We&#8217;ll develop the library idea a bit more.</p>

<p><em>UPDATE</em>: The <a href="http://kyleisom.net/blog/2012/02/01/using-set-theory/">next post</a> is up!</p>

<h2>References</h2>

<ul>
<li>I&#8217;ve been reading <a href="https://en.wikipedia.org/wiki/Alfred_Aho">Alfred Aho&#8217;s</a> <a href="https://en.wikipedia.org/wiki/Special:BookSources/0139145567"><underline>The Theory of Parsing, Translating, and Compiling (Volume I: Parsing)</underline></a>
(<a href="http://www.amazon.com/dp/0139145567/">Amazon link</a>)</li>
<li>There is, of course, a good <a href="https://en.wikipedia.org/wiki/Set_(mathematics">wikipedia article</a>.</li>
</ul>


<h2>Reviewers</h2>

<p>I&#8217;d like to thank the following people for reviewing this:</p>

<ul>
<li><a href="https://www.twitter.com/imwally">Wally Jones</a></li>
<li><a href="https://saolsen.github.com/">Stephen Olsen</a></li>
<li><a href="https://www.twitter.com/qb1t">Aaron Bieber</a></li>
<li><a href="https://twitter.com/#!/Slaughterhut">Jason Barbier</a></li>
<li><a href="http://shawnmeier.com/">Shawn Meier</a></li>
<li>Matt Sowers</li>
</ul>


<h2>Code Samples</h2>

<p>The complete python source code, which you can save to a file and run directly:</p>

<figure class='code'><figcaption><span> (set_theory.py)</span> <a href='http://kisom.github.com/downloads/code/set_theory/set_theory.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># author: kyle isom &lt;coder@kyleisom.net&gt;</span>
</span><span class='line'><span class="c"># date: 2012-01-23</span>
</span><span class='line'><span class="c"># license: ISC / public domain (brokenlcd.net/license.txt)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">Python illustrations for blog article &quot;Basic Set Theory&quot;</span>
</span><span class='line'><span class="sd">    (see http://kisom.github.com/blog/2012/01/23/basic-set-theory/)</span>
</span><span class='line'>
</span><span class='line'><span class="sd">Note that this is slightly tweaked from the examples in the article:</span>
</span><span class='line'><span class="sd">    1. PEP8 dictates that all globals be in all caps; as all the variables</span>
</span><span class='line'><span class="sd">    in this illustration are globals, they have been modified to be all caps.</span>
</span><span class='line'><span class="sd">    2. There is a little extra output to explain what is going on; namely,</span>
</span><span class='line'><span class="sd">    tabs are added before printing books and there is an output line showing</span>
</span><span class='line'><span class="sd">    which example the book set is associated with.</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># variables are in all caps because they are globals, and PEP8 dictates</span>
</span><span class='line'><span class="c"># that globals be in caps.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># the superset</span>
</span><span class='line'><span class="n">LIBRARY</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="s">&#39;Natural Language Processing with Python&#39;</span><span class="p">,</span> <span class="s">&#39;Learning OpenCV&#39;</span><span class="p">,</span>
</span><span class='line'>               <span class="s">&#39;Code Complete&#39;</span><span class="p">,</span> <span class="s">&#39;Mastering Algorithms with C&#39;</span><span class="p">,</span>
</span><span class='line'>               <span class="s">&#39;The Joy of Clojure&#39;</span><span class="p">,</span> <span class="s">&#39;Mining the Social Web&#39;</span><span class="p">,</span>
</span><span class='line'>               <span class="s">&#39;Algorithms In A Nutshell&#39;</span><span class="p">,</span>
</span><span class='line'>               <span class="s">&#39;Introduction to Information Retrieval&#39;</span><span class="p">,</span>
</span><span class='line'>               <span class="s">&#39;Network Security With OpenSSL&#39;</span><span class="p">,</span> <span class="s">&#39;RADIUS&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="c"># the subsets</span>
</span><span class='line'><span class="n">MOBI</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="s">&#39;Natural Language Processing with Python&#39;</span><span class="p">,</span> <span class="s">&#39;Code Complete&#39;</span><span class="p">,</span>
</span><span class='line'>           <span class="s">&#39;Introduction to Information Retrieval&#39;</span><span class="p">])</span>
</span><span class='line'><span class="n">EPUB</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="s">&#39;The Joy of Clojure&#39;</span><span class="p">,</span> <span class="s">&#39;Mining the Social Web&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;Code Complete&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;[+] list all the books in a mobile format (union example):&#39;</span>
</span><span class='line'><span class="n">MOBILE</span> <span class="o">=</span> <span class="nb">set</span><span class="o">.</span><span class="n">union</span><span class="p">(</span><span class="n">MOBI</span><span class="p">,</span> <span class="n">EPUB</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">book</span> <span class="ow">in</span> <span class="n">MOBILE</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">book</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;[+] list all the books in both mobile formats (intersection example)&#39;</span>
</span><span class='line'><span class="n">BOTH_FORMATS</span> <span class="o">=</span> <span class="nb">set</span><span class="o">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">MOBI</span><span class="p">,</span> <span class="n">EPUB</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">book</span> <span class="ow">in</span> <span class="n">BOTH_FORMATS</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">book</span>
</span><span class='line'>
</span><span class='line'><span class="n">ONLY_MOBI</span> <span class="o">=</span> <span class="nb">set</span><span class="o">.</span><span class="n">difference</span><span class="p">(</span><span class="n">MOBI</span><span class="p">,</span> <span class="n">EPUB</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;[+] books only in mobi format:&#39;</span>
</span><span class='line'><span class="k">for</span> <span class="n">book</span> <span class="ow">in</span> <span class="n">ONLY_MOBI</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">book</span>
</span><span class='line'>
</span><span class='line'><span class="n">ONLY_EPUB</span> <span class="o">=</span> <span class="nb">set</span><span class="o">.</span><span class="n">difference</span><span class="p">(</span><span class="n">EPUB</span><span class="p">,</span> <span class="n">MOBI</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;[+] books only in epub format:&#39;</span>
</span><span class='line'><span class="k">for</span> <span class="n">book</span> <span class="ow">in</span> <span class="n">ONLY_EPUB</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">+</span> <span class="n">book</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll want to run this with <code>python set_theory.py</code> (or whatever you choose to
name the file, obviously).</p>

<p>The complete Clojure source code, which you can likewise save and run:</p>

<figure class='code'><figcaption><span> (set-theory.clj)</span> <a href='http://kisom.github.com/downloads/code/set_theory/set-theory.clj'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="c1">;; set-theory.clj</span>
</span><span class='line'><span class="c1">;; author: kyle isom &lt;coder@kyleisom.net&gt;</span>
</span><span class='line'><span class="c1">;; date: 2012-01-23</span>
</span><span class='line'><span class="c1">;; license: ISC / public domain (brokenlcd.net/license.txt)</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;; code examples for blog post &quot;Basic Set Theory&quot;</span>
</span><span class='line'><span class="c1">;;     http://kisom.github.com/blog/2012/01/23/basic-set-theory/</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;clojure.set</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; the superset</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">library</span> <span class="o">#</span><span class="p">{</span> <span class="s">&quot;Natural Language Processing with Python&quot;</span>,
</span><span class='line'>                <span class="s">&quot;Learning OpenCV&quot;</span>,
</span><span class='line'>                <span class="s">&quot;Code Complete&quot;</span>,
</span><span class='line'>                <span class="s">&quot;Mastering Algorithms with C&quot;</span>,
</span><span class='line'>                <span class="s">&quot;The Joy of Clojure&quot;</span>,
</span><span class='line'>                <span class="s">&quot;Mining the Social Web&quot;</span>,
</span><span class='line'>                <span class="s">&quot;Algorithms In A Nutshell&quot;</span>,
</span><span class='line'>                <span class="s">&quot;Introduction to Information Retrieval&quot;</span>
</span><span class='line'>                <span class="s">&quot;Network Security With OpenSSL&quot;</span>,
</span><span class='line'>                <span class="s">&quot;RADIUS&quot;</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; the subsets</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">mobi</span> <span class="o">#</span><span class="p">{</span><span class="s">&quot;Natural Language Processing with Python&quot;</span>, <span class="s">&quot;Code Complete&quot;</span>,
</span><span class='line'>           <span class="s">&quot;Introduction to Information Retrieval&quot;</span><span class="p">})</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">epub</span> <span class="o">#</span><span class="p">{</span><span class="s">&quot;The Joy of Clojure&quot;</span>, <span class="s">&quot;Mining the Social Web&quot;</span>, <span class="s">&quot;Code Complete&quot;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; union illustration</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;union illustration (books in either mobile format)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">mobile</span> <span class="p">(</span><span class="nf">clojure.set/union</span> <span class="nv">mobi</span> <span class="nv">epub</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">book</span> <span class="nv">mobile</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;\t&quot;</span> <span class="nv">book</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; intersection illustration</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;intersection illustration (books in both mobile formats)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">both-formats</span> <span class="p">(</span><span class="nf">clojure.set/intersection</span> <span class="nv">mobi</span> <span class="nv">epub</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">book</span> <span class="nv">both-formats</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;\t&quot;</span> <span class="nv">book</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;books only in mobi format:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">only-mobi</span> <span class="p">(</span><span class="nf">clojure.set/difference</span> <span class="nv">mobi</span> <span class="nv">epub</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">book</span> <span class="nv">only-mobi</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;\t&quot;</span> <span class="nv">book</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;books only in epub format:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">only-epub</span> <span class="p">(</span><span class="nf">clojure.set/difference</span> <span class="nv">epub</span> <span class="nv">mobi</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">book</span> <span class="nv">only-epub</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;\t&quot;</span> <span class="nv">book</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; complement illustration</span>
</span><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;books not in mobi format, using the library superset:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">not-mobi</span> <span class="p">(</span><span class="nf">clojure.set/difference</span> <span class="nv">library</span> <span class="nv">mobi</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">book</span> <span class="nv">not-mobi</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;\t&quot;</span> <span class="nv">book</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll want to run this with <code>clj set-theory.py</code> - I&#8217;ve deliberately chosen
not to make this a lein project in order to make it easier to share, but I did
<a href="http://kisom.github.com/downloads/set_theory.tar.gz">upload a lein project</a>.
You should be able to just run <code>lein deps, test, run</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[on SOPA and PIPA]]></title>
    <link href="http://kisom.github.com/blog/2012/01/18/on-sopa-and-pipa/"/>
    <updated>2012-01-18T00:00:00-07:00</updated>
    <id>http://kisom.github.com/blog/2012/01/18/on-sopa-and-pipa</id>
    <content type="html"><![CDATA[<p>Imagine you are the owner of a small restaurant. The neighbourhood is of mixed
quality, but this is where you live so you try to make do anyways. One day,
new laws are passed such that if anyone in your restaurant conducts any sort of
illegal activity (like a drug deal), the police blockade your restaurant and
force everyone out. Furthermore, this new law isn&#8217;t clear about how to get your
restaurant back. The politicans who made this law have absolutely no experience
in the restaurant industry, but still expect you to continually monitor all your
patrons and do the work of the police and law enforcement for them. At any time,
one of your patrons can call the police and claim something happened in your
restaurant and you get shutdown. On top of all this, there are people actively
looking for anything untoward happening so as to shut you down. What do you
do? You can&#8217;t really afford to hire more waiters and waitresses or security
personnel to monitor (and don&#8217;t really want to establish that kind of atmosphere
in your business anyhow); CCTV and other technical measures have too long of a
delay (or require you to suspect something happened so you can check the tapes).
Really, the only thing you can do is to move out of town.</p>

<!-- more -->


<p>Of course I&#8217;m talking about <a href="http://www.govtrack.us/congress/bill.xpd?bill=s112-968">PIPA</a>
and <a href="http://www.govtrack.us/congress/bill.xpd?bill=h112-3261">SOPA</a>. The story I
told isn&#8217;t entirely <a href="http://en.wikipedia.org/wiki/G%C3%B6del%2C_Escher%2C_Bach">isomorphic</a>
to the current situation, but it gets the idea across. The
politicians enacting this legislation have admittedly no technical knowledge, despite the
fact that the vast majority of the people working in the tech industry have decried this
as a universally uneducated and ineffective decision that will do more to hurt the innocent
than to accomplish its stated objectives.</p>

<p>This is the exact reason why I would not start a tech business in the US anymore.
Starting a business is hard enough with everything else; worrying about the legal
environment is too much and there are plenty of places where law enforcement does
its job instead of placing the burden on you.</p>

<p>Unfortunately, just leaving the country isn&#8217;t going to let me just dodge the
effects. What happens when you lose a large part of your market share (i.e. the
US market)? <a href="http://www.arstechnica.com">Ars Technica</a> has a
<a href="http://arstechnica.com/tech-policy/news/2012/01/what-does-sopa-mean-for-us-foreigners.ars">good writeup</a>
on how SOPA/PIPA affect foreign users.</p>

<p>So what could the government do instead?</p>

<ul>
<li>work on improving the technical skills of their workforce (not driving away the people with these skills with the government&#8217;s current overwhelming ineptitude would be a good start)</li>
<li>being far more transparent about the process of taking down a site</li>
</ul>


<p>Unfortunately, I don&#8217;t have enough money to pay the government to listen to me.</p>

<p>Further reading:</p>

<ol>
<li>The EFF has a good <a href="https://www.eff.org/takedowns">Takedown Wall of Shame</a>
if you don&#8217;t believe the government would possibly abuse or misuse their
takedown powers.</li>
<li>The EFF also has a <a href="https://www.eff.org/deeplinks/2012/01/how-pipa-and-sopa-violate-white-house-principles-supporting-free-speech">good writeup</a> on SOPA.</li>
<li><a href="http://americancensorship.org/">Stop American Censorship</a></li>
<li>Fight For the Future has a <a href="http://fightforthefuture.org/pipa">good video</a></li>
</ol>


<p>Thanks to <a href="http://samuelgoodwin.tumblr.com">Samuel Goodwin</a>, Beau Holton,
<a href="https://twitter.com/#!/Slaughterhut">Jason Barbier</a>,
<a href="http://twitter.com/qb1t">Aaron Bieber</a>,
and <a href="http://twitter.com/imwally">Wally Jones</a> for reviewing this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[back to lisp]]></title>
    <link href="http://kisom.github.com/blog/2012/01/02/back-to-lisp/"/>
    <updated>2012-01-02T00:00:00-07:00</updated>
    <id>http://kisom.github.com/blog/2012/01/02/back-to-lisp</id>
    <content type="html"><![CDATA[<p>Liquid error: undefined method <code>join' for #&lt;String:0x007ffd7a2dbea8&gt;
A brief stint playing with clojure made me miss common lisp, so I'm working
through [Paul Graham's](http://www.paulgraham.com)
[ANSI Common Lisp](http://paulgraham.com/acl.html) with a copy of
[On Lisp](http://paulgraham.com/onlisp.html). My last foray, I learned
from [David Touretzky's](http://www.cs.cmu.edu/~dst/)
[A Gentle Introduction to Symbolic Computation](http://www.cs.cmu.edu/~dst/LispBook/index.html),
so this time I'm trying PG's book. So far I've done more useful things,
mostly by actually reading a bit more of the [sbcl](http://www.sbcl.org)
[user manual](http://www.sbcl.org/manual/) (from which I learned some
useful things such as</code>sb-ext:<em>posix-argv</em><code>and</code>sb-ext:save-lisp-and-die`)
and by the immensely useful site
<a href="http://rosettacode.org/wiki/Rosetta_Code">Rosetta Code</a>, from which I
learned about the <a href="http://www.weitz.de/drakma/">DRAKMA</a> HTTP client
library. I&#8217;ve also been aided quite a bit by
<a href="http://xach.com">Zach Beane&#8217;s</a> <a href="http://www.quicklisp.org/">quicklisp</a>;
in fact, one of the things I&#8217;ve done is to write a short
<a href="https://gist.github.com/1548276">script</a> to build an sbcl image with
quicklisp and my most commonly used libraries built-in.</p>

<!-- more -->


<script src="https://gist.github.com/1548276.js?file=build-image.lisp"></script>


<p>One of the things I love about functional programming is the idea that
instead of relying on a lot of variables, you use functions as sort of
&#8220;organic variables&#8221; that provide immutable data based on some input. The
ability to build what feels more organic, less static. I think
<a href="https://en.wikipedia.org/wiki/Steve_Yegge">Steve Yegge&#8217;s</a>
blog post <a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html">Execution in the Kingdom of Nouns</a>
is spot on.</p>

<p>I anticipate this to be the year of Lisp for me, as I delve into
Common Lisp, Scheme, and Clojure.</p>
]]></content>
  </entry>
  
</feed>
