<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: productivity | (cons 'hack *life*)]]></title>
  <link href="http://kisom.github.com/blog/categories/productivity/atom.xml" rel="self"/>
  <link href="http://kisom.github.com/"/>
  <updated>2012-02-21T13:30:17+01:00</updated>
  <id>http://kisom.github.com/</id>
  <author>
    <name><![CDATA[Kyle Isom]]></name>
    <email><![CDATA[coder@kyleisom.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[suddenly enlightenment]]></title>
    <link href="http://kisom.github.com/blog/2011/12/03/suddenly-enlightenment/"/>
    <updated>2011-12-03T00:00:00+01:00</updated>
    <id>http://kisom.github.com/blog/2011/12/03/suddenly-enlightenment</id>
    <content type="html"><![CDATA[<p>It's been almost 28 hours since I last slept, so I apologise if this
post contains a few spelling or grammatical errors. As soon as I
become aware of them, rest assured I will quickly put them to right.</p>

<p><a href="http://www.kyleisom.net/blog/2011/11/35-dot_emacs">Today's git commit</a> occurred
while I was working on getting a web development test VM / environment working. The
goal was to update a CGI script when I pushed to the dev vm. The commit log:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>commit 2de6f8444c68b0dd5ad31dd815d71a5590c5120e
</span><span class='line'>   Author: Kyle Isom &lt;a href="&#109;&#97;&#x69;&#108;&#116;&#111;&#x3a;&#x63;&#111;&#x64;&#x65;&#114;&#64;&#107;&#x79;&#x6c;&#101;&#105;&#x73;&#111;&#x6d;&#46;&#110;&#101;&#x74;">&#99;&#x6f;&#x64;&#x65;&#x72;&#x40;&#x6b;&#x79;&#108;&#x65;&#x69;&#115;&#x6f;&#109;&#x2e;&#110;&#x65;&#x74;&lt;/a>
</span><span class='line'>   Date:   Sat Dec 3 00:24:34 2011 +0300&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>   suddenly enlightenment
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<!-- more -->


<p>It took a while for me to grok what was happening with the hook, but finally it clicked.
I did a lot of reading online, and was greatly helped by the <a href="https://www.ora.com">O'Reilly</a>
book <a href="https://shop.oreilly.com/product/9780596620137.do">Version Control with Git</a>
and the <code>githooks(5)</code> man page.</p>

<p>My remote repository was a bare git repo (one initialised with <code>git init --bare</code> that I
pushed my local changes to. I created a staging directory (<code>${HOME}/stage/cgitest</code>)
and created the following hook:</p>

<pre><code>kyle@www-dev:~/code/cgitest/hooks$ cat post-update
#!/bin/sh
export GIT_DIR=/home/kyle/code/zipcgi
export GIT_WORK_TREE=/home/kyle/stage/zipcgi
git reset --hard
git checkout -f
cp ${GIT_WORK_TREE}/zipcgi.py ~/bin/cgi/
</code></pre>

<p>As a side note, make sure the script is <code>chmod +x</code>'d.</p>

<p>The reason why we have to specify the git dir is that by default,
because this is in the bare repository, git will assume the git
directory is the repository directory. The problem is, that directory
doesn't have a working tree. A working tree is required to checkout
the repository - i.e. so we have a named file to work with. To work
around this, I explicitly specify a working tree . Then I copy the CGI
script to my CGI directory.</p>

<p>Why not just symlink the file? Well, symlinks work on inodes. This
allows multiple names to refer to the same file, but it does mean that
even though the file is in the same directory and shares the same
name, it is not guaranteed the same inode number. The git checkout
can, in essence, unlink the old file and create a completely new
file. The end result is that your symlink will likely be broken,
pointing to a now non-existent inode. The safest method is just to
copy the new version on top of the old one.</p>

<p>Why do we have to manipulate the environment variables
<code>GIT_DIR</code> (which points to the directory containing the actual git
repository, more on that in a second) and <code>GIT_WORK_TREE</code>, which
represents the working tree. To really understand this, you need to
understand the difference between the working tree and the
repository. You could take the long route and read the excellent book
I mentioned above and wade through man pages (which are pretty well
written, but there is a lot of information to keep track of). An
alternative is to buckle in and keep reading for my crash course.</p>

<p>Still here? Buckled in? Let's do this. A git repository is basically a
filesystem-based database that uses hashes for identification and
great success. If you poke around in your git repository (which in a
standard local repository is in <code>${PROJECT}/.git</code>), particularly under
objects, you will see what I mean. Everything is stored as a hash
object. Git uses <a href="https://en.wikipedia.org/wiki/SHA-1">SHA-1</a>, and
under <code>.git/objects</code> you will see a list of subdirectorys. These
subdirectories (with the exception of <code>pack</code> and <code>info</code>) named after
the first byte of the SHA-1 hash (which is two bytes when stored as a
semi-human readable hex digest). Under these subdirectories, git
stores the objects as the remaining 19 bytes (again, 38 bytes when
stored as a hex digest) of the hash. The file is
zlib-compressed. Don't believe me? If you clone my
<a href="https://github.com/kisom/woofs">woofs project</a> and look up</p>

<p><code>.git/objects/bf/2f7383ca7343f85f1308fc6dc3c34dbd047d90</code>.</p>

<p>Try the following python code:</p>

<pre><code>import zlib
print zlib.decompress(open('2f7383ca7343f85f1308fc6dc3c34dbd047d90').read())
</code></pre>

<p>You should see a working version of the script (and the latest version
as of this writing). This is how git sees everything. (If you want to
see what git sees a file as, use <code>git hash-object &lt;FILE&gt;</code>.)</p>

<p>The working directory is where you, the developer or end user,
interact with the contents of the database. This is where things can
be staged to be committed, and in a bare repo (typically found
on remote repos), there won't be a working directory because you
aren't working directly on that copy of the repo. Try this:</p>

<pre><code>mkdir -p ~/tmp/stage/woofs_working
export GIT_DIR=~/Code/woofs/.git 
export GIT_WORK_TREE=~/tmp/stage/woofs_working
cd ~
git reset --hard
ls ~/tmp/stage/woofs_working
</code></pre>

<p>Voil√†! You should see the contents of the repo there. (I'd recommend
either closing out that terminal session or running</p>

<pre><code>unset GIT_DIR GIT_WORK_TREE
</code></pre>

<p>to prevent problems later on. Also, while I'm using a repo I chose at
random from my <code>~/Code</code> directory, you could (and should) be trying
with a repo of your own.</p>

<p>It should be clear now why I had to explicitly specify the two. The
next two commands just reset the working directory to the lastest
commit (i.e. the one that was just pushed) and check out a fresh copy,
to make sure everything that should be present is present.</p>

<p>This turned out to be a longer post than I had expected, but my hope
is that it helps other people quickly get their hooks operational. The
cool thing about hooks is they are just executable shells scripts,
which means:</p>

<ol>
<li>the script's <code>${PWD}</code> is the hooks directory in the git repo.</li>
<li>the <code>${GIT_DIR}</code> is by default '.' and is the repo directory. for
example, if we had a bare woofs repo, it would be something like
<code>/home/kyle/code/woofs</code>, while in a local repo it would be
<code>/home/kyle/code/woofs/.git</code>.</li>
<li>because it's just a shell script, you can use any language you can
use a shebang for.</li>
</ol>


<p>Git hooks are a powerful tool and can greatly boost your productivity,
automatically deploy code, and help us fight SkyNet. You should
consider using them in your next project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[add .emacs.d/init.el]]></title>
    <link href="http://kisom.github.com/blog/2011/11/28/add-emacsd/"/>
    <updated>2011-11-28T00:00:00+01:00</updated>
    <id>http://kisom.github.com/blog/2011/11/28/add-emacsd</id>
    <content type="html"><![CDATA[<p>In the spirit of many of my online profiles which proudly declare "my
commit log is my blog," I've decided to start using that in my posts.
Here is the first such attempt.</p>

<pre><code> commit 40bbc533313a43192506b682fe546304d8603d11 
 Author: Kyle Isom &lt;coder@kyleisom.net&gt;
 Date:   Mon Nov 28 17:34:30 2011 +0300

    add .emacs.d/init.el
</code></pre>

<p>I've started using emacs, which is an act of such great blasphemy for
a red-blooded stalwart vim-wielding hacker such as myself that I find
it difficult to come to grips with sometimes. But there is a method to
my madness, and it isn't just that my morals are so comprised right
now in this nadir of my life that I've even started learning
javascript (a running joke).</p>

<!-- more -->


<p>Due to my current work situation, and the prospect of traveling to and
spending several months in a region with little to no network
connectivity, I've purchased a new 11" Macbook Air. I chose the 11"
model solely for price reasons; I would much prefer a larger
laptop. I've previously owned two EeePCs (the 7"
<a href="http://en.wikipedia.org/wiki/ASUS_Eee_PC#Eee_700_series">Eee PC 701</a>
and the 11"
<a href="http://en.wikipedia.org/wiki/ASUS_Eee_PC#Specifications">Eee PC 1101HAB</a>),
so I'm familiar with the smaller form-factor, and not a huge fan to be
honest.</p>

<p>Enter emacs - I can do all my work on emacs, with an integrated python
development environment incorporating a shell, pdb (with a pane that
shows the current line of the file being executed as you're stepping
through code). I'll still have the OS X desktop,
<a href="http://www.iterm2.com/">iterm2</a>,
<a href="http://tmux.sourceforge.net/">tmux</a>, and
<a href="http://code.google.com/p/macvim/">macvim</a>. But for getting things
done, I think that emacs is going to help out a lot.</p>

<p>Plus it's backed by a Lisp flavour.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[generating patchfiles with git and hg]]></title>
    <link href="http://kisom.github.com/blog/2011/09/28/generating-patchfiles-with-git-and-hg/"/>
    <updated>2011-09-28T00:00:00+02:00</updated>
    <id>http://kisom.github.com/blog/2011/09/28/generating-patchfiles-with-git-and-hg</id>
    <content type="html"><![CDATA[<p>UPDATE: originally this post was only about doing this in git. Since I use
mercurial almost as much as I use git, I decided to look into how to do it
with mercurial too.</p>

<p>I recently was explaining to someone that as a coder, I do (or should do)
a lot more than just code. I figured since I hadn't written anything here in
a while, I'd put my thoughts down here.</p>

<p>i found myself needing to generate a patchfile today from a git repo. it turns
out to be a very easy task.</p>

<!-- more -->


<ul>
<li><p>first, commit to a clean working directory. i'll asume you are on the
'master' (git) or 'tip' (hg) branch, but s/master/$branch/ as appropriate.</p></li>
<li><p>if you have only one commit between you and the commit you need to diff
against:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git format-patch master^ --stdout &gt; my.patch<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
or
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hg <span class="nb">export </span>tip &gt; my.patch  &lt;br/&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p>otherwise, substitute in the appropriate commit</p></li>
<li><p>to apply the patch, it's
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git apply --stat my.patch
</span></code></pre></td></tr></table></div></figure></notextile></div>
or
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hg patch my.patch
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
</ul>


<p>I did say it was a very easy task... You'll notice mercurial makes this easier
(or at least I think so) than git.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[coders (should) do much more than code]]></title>
    <link href="http://kisom.github.com/blog/2011/09/10/coders-should-do-much-more-than-code/"/>
    <updated>2011-09-10T00:00:00+02:00</updated>
    <id>http://kisom.github.com/blog/2011/09/10/coders-should-do-much-more-than-code</id>
    <content type="html"><![CDATA[<p>I recently was explaining to someone that as a coder, I do (or should do)
a lot more than just code. I figured since I hadn't written anything here in
a while, I'd put my thoughts down here.</p>

<h2>the tl;dr</h2>

<p>Coders code. That much is obvious from the title, but there is much more that
can and should be involved for anyone writing real code, at least for UNIX
coders.</p>

<h2>intro</h2>

<p>So you've spent the last couple weeks / months / years writing some really
brilliant bit of software that you think would benefit a lot of people. Or
maybe, just a few, but you still are of the mindset that since you did the
work to solve this problem, other people might have the same problem and if
they had the solution, they could concentrate on other problems. Regardless
of the quality of code and the development process you followed, which endless
books have been written on the subject, there is still a <strong>lot</strong> more work to
be done if you intend to make your software both useful and accessible to
other people. You still need to make sure you have a reasonable portable
(for the scope of the usefulness of your code) build system, good documentation,
an easily accessible online place for people to get your code, and proper
follow-through. Let's talk through these bits.</p>

<!-- more -->


<h2>the build system</h2>

<p>No matter how wizard your code is, if it's more work for other people to build
it than it's worth, it won't be used. That's a simple fact. By now, users have
come to expect the proverbial <code>./configure &amp;&amp; make &amp;&amp; make install</code> (or
perhaps <code>scons</code> or <code>waf</code> or <code>jam</code> or one of the other solutions). Regardless,
the build process should not require much work for end users, except in cases
where the code is a very purposeful bit of code that requires careful
configuration. I personally have begun making use of the <code>autotools</code> suite
(my personal stance on the GPL notwithstanding, a rant for another day but
the curious can take a look at the license for most of my code on my
<a href="https://github.com/kisom/">github page</a>). This comprises
<a href="http://www.gnu.org/software/autoconf/">autoconf</a> and
<a href="http://www.gnu.org/software/automake/">automake</a> primarily. You will easily
spend many hours just writing out the configuration files on your end to
properly support and build the software, determining what needs to be checked
on the user's system so that they can be sure the code will run on their node.
Once this is set up and functioning, for the most part and in theory, users
will be able to just do the typical configure-and-make pattern they have come
to know and love. The autotools are really designed for C and C++. For python,
there's always the <a href="http://pypi.python.org/pypi/setuptools">Python setuptools</a>,
and of course for Perl there's <a href="http://www.cpan.org/">CPAN</a>.</p>

<p>Of course, these tools are quite often in a different language than your code
is. For example, the autotools use POSIX shell, M4, and POSIX Makefiles to
generate the configure script and Makefiles for distribution. This takes time
to learn, especially given some of the nuances involved. There is of course
some debate (see "Stop the autoconf insanity! Why we need a new build system"[http://freshmeat.net/articles/stop-the-autoconf-insanity-why-we-need-a-new-build-system])
as to how useful these are, but for the most part the reward is worth the work.
For the autotools suite, take a look at the No Starch Press book
<a href="http://nostarch.com/autotools.htm">Autotools:A Practitioner's Guide to GNU Autoconf, Automake, and Libtool</a>.
I found this book indispensable in learning the tool suite.</p>

<h2>documentation</h2>

<p>Documentation extends much further (or should) than the typical README and
INSTALL files found in many distributions. Many developers learn the basics
of TeX or LaTeX typesetting to produce aesthetically pleasing manuals; Texinfo
is also quite common. Markdown is becoming popular as well and with the advent
of tools like <a href="http://johnmacfarlane.net/pandoc/">pandoc</a>, even easier to
convert from Markdown to other formats (pandoc supports html and LaTeX). Besides
just the technical side of writing documentation and learning the typesetting
language used, there's the art of technical writing as well. Many companies
have full-time technical writers whose sole purpose is writing documentation.
This is because of another simple fact: your software is of no use if the users
can't figure out how to use it. While many users may be technically saavy
enough to read the code to figure out how to use it, for your code to be truly
useful, they should not have to resort to this. This is what I see as the Apple
factor: many developers use Apple's hardware and operating system because not
only do things Just Work, but there is also excellent documentation available.
Another operating system leading the way in documentation is my beloved
<a href="http://www.openbsd.org">OpenBSD</a>. Users should have a clear set of instructions
of not only how to use the software, but ways to extend it, what things it
can do that they may not realise, and how to solve problems that may crop up.
So a truly good coder is both at least a proficient typesetter but also a
proficient writer of whatever human language the software is in (or aimed at).</p>

<p>Some projects go further and include a full copy of the license the software
is released under (which you should do for the safety / peace of mind /
convenience of your users - it took <a href="http://lteo.devio.us/">lteo</a> constantly
reminding me of this for many of my projects before I started doing it out
of habit) which is most often in a file called LICENSE or COPYING; a copy of
the ChangeLog, which could also be gotten from source control such as
<code>git log</code>; an AUTHORS file to list contributors; a README and INSTALL file to
give a quick usage and overview as well as installation instructions; and
perhaps a HACKING document to explain how to modify the code to be useful.</p>

<p>The README file is still rather useful; in fact, many times I will
<a href="http://kyleisom.net/blog/2011/07/31-rgtdd">write the README first</a> as part
of my development process.</p>

<p>No matter how you approach it or what you use to write and format your user
manuals, you should still have them included.</p>

<h2>distribution</h2>

<p>Today, distribution is one of the easiest aspects of coding. Numerous websites
exist for the sole purpose of distributing your software, such as
<a href="https://github.com">github</a>, <a href="https://www.bitbucket.org">bitbucket</a>,
<a href="https://www.sourceforge.net">sourceforge</a>,
<a href="https://www.freshmeat.net">freshmeat</a>, among others. Typically, such sites
will also host a remote version of your version control system (you <em>are</em>
version controlling, <em>right</em>?) in addition to supporting release downloads. A
well-setup build system offers the ability to build a distribution release,
often in tarball or tarred bzip2 format as well. Some sites still offer just
a release tarball (for a while, this is how I released my
<a href="https://github.com/kisom/libdaemon">libdaemon</a> project, via my
<a href="http://kisom.devio.us/src.html">devio.us homepage</a>. In fact, this is rapidly
becoming one of the easiest pieces of the project lifecycle. If you haven't
already, take a look at one of the sites that works as a remote repo for
whatever source control you are using. You will probably see that besides
distribution, these sites are extremely useful for the last important additional
part of coding I want to talk about.</p>

<h2>support and maintenance</h2>

<p>Once the user has a copy of your software and knows how to use it, they will
inevitably encounter bugs or find that while they would really like to see
a feature in the software, they don't have the technical skills to implement
it themselves (or perhaps the courage to look through your code...) Still other
users might fix the bugs or add new features themselves, and would like to
offer you those changes so you can incorporate them into the software. So the
last important additional part of being a coder is support and maintenance.</p>

<p>Many of the sites that offer to host releases of your code provide additional
tools, like wikis, bug reporting (aka trouble tickets), and feature requests.
Users may also provide patchfiles or a git pull request to give you their
contribition (and accordingly, you credit them in the documentation as well).
A good coder needs to be able to support and maintain the software - users are
more apt to use software if it gets patched or updated with new features (or
if it just works and they don't need new features or bugs patched, which is
less likely but still possible).</p>

<h2>conclusion</h2>

<p>As I've explained, being a good coder and providing useful software encompasses
so much more than just good technical skills or great development processes.
There's the administrative side (i.e. the build system, feature request and bug
tracking) and the human side (i.e. documentation and responding to support
requests). While it may not be as much fun as the actual coding, it is still
integral to the development process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RGTDD]]></title>
    <link href="http://kisom.github.com/blog/2011/07/04/rgtdd/"/>
    <updated>2011-07-04T00:00:00+02:00</updated>
    <id>http://kisom.github.com/blog/2011/07/04/rgtdd</id>
    <content type="html"><![CDATA[<p>One of the most important parts of becoming a useful developer is to find a
workflow that maximises productivty. There are plenty of methodologies and tools
people have come up with just for this - Agile, XP, BDD, TDD, RDD, and many
others. Of course, most everyone has their own unique flavour, and of course
I'm going to talk about mine. I've spent a lot of time trying different things
(and too much time going back to just grinding out code). This is the first post
of a milti-part series on how I've increased my productivity and what I do to
get things done. Unfortunately, my personal projects are sort of haphazard still,
but I have enjoyed success with this at work.</p>

<p>RGTDD has made a difference in how I develop code and stay productive;
furthermore, above just using a specific development methodology, I've found
certain tools to assist me in being productive.</p>

<!-- more -->


<p>So, RGTDD. It stands for README-generated Test-Driven Development. I took Tom
Preston-Werner's <a href="http://tom.preston-werner.com/2010/08/23/readme-driven-development.html">README-driven development</a>
and adapted it to my own use. Without rehashing his post, READMEs factor in like
this: once the project is started, the first task to do is write the README. Once
the README is written, you lock it in and should not be changed except to fix
typos and spelling errors. This has several advantages:</p>

<ol>
<li><p>First, you end up having a single introductory piece of documentation. This
file contains the justification for you program, a quick introduction to its
features, and usage information.</p></li>
<li><p>Second, locking in the README means you prevent feature creep. You contract
yourself to the end user (yourself, future end users, the client, etc...) to
implement specifically the features in the README. As a rule of thumb, each
iteration of the README should have no more than five features - each feature
should be a concrete task. If the tasks are particularly complex, I generally
avoid implementing more than three. I have found for myself that trying to
implement much more than that results in code and projects that stagnate or
quickly become spaghetti code.</p></li>
<li><p>Third, you know what you need to code and what the code should specifically
do. I've found that a lot of times I have an idea for project X, but only have
a vague of idea of what it will do. It is part of good engineering to have a
well-laid out design and path for the project to direct development. I have found
this helps me to keep my code from getting overgrown.</p></li>
</ol>


<p>The README at this point now specifies an interface for users to interact with
the code. From here, you begin writing tests that cover the features. As you
begin writing these tests, you will likely figure out other components to the
code. You start writing tests from these. At this point, using the README as a
guiding document, I switch to a test-driven mode. Once the tests perform as
they should (including tests that are expected to fail), I consider this a
release. (I'll write a post later on about what I'm doing for releases).</p>

<p>That's a quick introduction to the project management methodology I use. I'll
cover some specific tools to help out with various languages, my version
control and release methods, things I wasn't taught in school, and what I've
found to help me keep my life organised.</p>
]]></content>
  </entry>
  
</feed>
