<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hacking | (cons 'hack *life*)]]></title>
  <link href="http://kisom.github.com/blog/categories/hacking/atom.xml" rel="self"/>
  <link href="http://kisom.github.com/"/>
  <updated>2012-01-23T20:13:46+03:00</updated>
  <id>http://kisom.github.com/</id>
  <author>
    <name><![CDATA[Kyle Isom]]></name>
    <email><![CDATA[coder@kyleisom.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[back to lisp]]></title>
    <link href="http://kisom.github.com/blog/2012/01/02/back-to-lisp/"/>
    <updated>2012-01-02T00:00:00+03:00</updated>
    <id>http://kisom.github.com/blog/2012/01/02/back-to-lisp</id>
    <content type="html"><![CDATA[<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>commit e358120dd3760e64436f5652895c751b39148ebd
</span><span class='line'>   Author: Kyle Isom &lt;a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#x6f;&#58;&#x63;&#x6f;&#100;&#101;&#x72;&#64;&#107;&#121;&#108;&#101;&#x69;&#x73;&#x6f;&#x6d;&#x2e;&#x6e;&#101;&#116;">&#99;&#111;&#x64;&#x65;&#114;&#x40;&#x6b;&#121;&#108;&#101;&#x69;&#x73;&#111;&#x6d;&#46;&#x6e;&#x65;&#x74;&lt;/a>
</span><span class='line'>   Date:   Wed Dec 28 19:22:59 2011 +0300&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>initial commit
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div>
A brief stint playing with clojure made me miss common lisp, so I'm working
through <a href="http://www.paulgraham.com">Paul Graham's</a>
<a href="http://paulgraham.com/acl.html">ANSI Common Lisp</a> with a copy of
<a href="http://paulgraham.com/onlisp.html">On Lisp</a>. My last foray, I learned
from <a href="http://www.cs.cmu.edu/~dst/">David Touretzky's</a>
<a href="http://www.cs.cmu.edu/~dst/LispBook/index.html">A Gentle Introduction to Symbolic Computation</a>,
so this time I'm trying PG's book. So far I've done more useful things,
mostly by actually reading a bit more of the <a href="http://www.sbcl.org">sbcl</a>
<a href="http://www.sbcl.org/manual/">user manual</a> (from which I learned some
useful things such as <code>sb-ext:*posix-argv*</code> and <code>sb-ext:save-lisp-and-die</code>)
and by the immensely useful site
<a href="http://rosettacode.org/wiki/Rosetta_Code">Rosetta Code</a>, from which I
learned about the <a href="http://www.weitz.de/drakma/">DRAKMA</a> HTTP client
library. I've also been aided quite a bit by
<a href="http://xach.com">Zach Beane's</a> <a href="http://www.quicklisp.org/">quicklisp</a>;
in fact, one of the things I've done is to write a short
<a href="https://gist.github.com/1548276">script</a> to build an sbcl image with
quicklisp and my most commonly used libraries built-in.</p>

<script src="https://gist.github.com/1548276.js?file=build-image.lisp"></script>


<p>One of the things I love about functional programming is the idea that
instead of relying on a lot of variables, you use functions as sort of
"organic variables" that provide immutable data based on some input. The
ability to build what feels more organic, less static. I think
<a href="https://en.wikipedia.org/wiki/Steve_Yegge">Steve Yegge's</a>
blog post <a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html">Execution in the Kingdom of Nouns</a>
is spot on.</p>

<p>I anticipate this to be the year of Lisp for me, as I delve into
Common Lisp, Scheme, and Clojure.</p>
]]></content>
  </entry>
  
</feed>
