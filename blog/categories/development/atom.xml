<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: development | (cons 'hack *life*)]]></title>
  <link href="http://kisom.github.com/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://kisom.github.com/"/>
  <updated>2012-02-22T16:53:57+01:00</updated>
  <id>http://kisom.github.com/</id>
  <author>
    <name><![CDATA[Kyle Isom]]></name>
    <email><![CDATA[coder@kyleisom.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[carefree git and hg]]></title>
    <link href="http://kisom.github.com/blog/2012/02/22/carefree-git-and-hg/"/>
    <updated>2012-02-22T16:52:00+01:00</updated>
    <id>http://kisom.github.com/blog/2012/02/22/carefree-git-and-hg</id>
    <content type="html"><![CDATA[<p>I was at an <a href="http://www.appsterdam.rs">Appsterdam</a> lunch meetup today, and
before the presentation I was talking with some people about source control.
They worked for Atlassian, and so of course bitbucket v. github came up.
Regardless of why I typically use github more, or what my usage profiles are
for the two, they were interested to hear my solution to a problem I had:
how to simplify working in various source control systems, particularly in
both mercurial and git.</p>

<p>For a long time, I used mostly git and far less mercurial. I wrote a bunch
of aliases in my <code>.zprofile</code> that looked something like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">commit</span><span class="o">=</span><span class="s1">&#39;git commit&#39;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">checkout</span><span class="o">=</span><span class="s1">&#39;git checkout&#39;</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>For mercurial, I just entered everything normally. However, as I started to
use mercurial more, I wanted to use those aliases for both systems. I ended
up writing a bunch of shell functions to do this. They are all strict POSIX
compatible, so they work under at least <code>zsh</code>, <code>ksh</code>, and <code>bash</code>. I haven't
tested any others, so your mileage may vary. The latest version of this is
available at my <a href="https://github.com/kisom/dotconf">dotconf github repo</a>, you
can view it <a href="https://github.com/kisom/dotconf/blob/master/.sourcecon.zsh">here</a></p>

<p>The core of the code is the pair of functions:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>get_repo_type <span class="o">()</span> <span class="o">{</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;git status 2&amp;gt;/dev/null 1&amp;gt;/dev/null
</span><span class='line'><span class="k">if</span> <span class="o">[</span> 0 -eq <span class="nv">$?</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo </span>1
</span><span class='line'>    <span class="k">return </span>1
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span>hg status 2&amp;gt;/dev/null 1&amp;gt;/dev/null
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> 0 -eq <span class="nv">$?</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo </span>2
</span><span class='line'>        <span class="k">return </span>2
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo </span>0
</span><span class='line'>        <span class="k">return </span>0
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;not_a_repo <span class="o">()</span> <span class="o">{</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;echo <span class="s2">&quot;not a git or mercurial repo!&quot;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>get_repo_type</code> does exactly what it says it does: it outputs a number that
identifies what type of source control the repo uses. The <code>not-a_repo</code>
simple provides a shortcut for displaying the error message. All of the
commands use these two functions. The commands are implemented in a similar
style, so let's take a look at the first defined function, <code>pull</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pull <span class="o">()</span> <span class="o">{</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;repo_type<span class="o">=</span><span class="k">$(</span>get_repo_type<span class="k">)</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;1&quot;</span> <span class="o">=</span> <span class="s2">&quot;$repo_type&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span>git pull <span class="nv">$@</span>
</span><span class='line'><span class="k">elif</span> <span class="o">[</span> <span class="s2">&quot;2&quot;</span> <span class="o">=</span> <span class="s2">&quot;$repo_type&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span>hg pull <span class="nv">$@</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span>not_a_repo
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Unfortunately, shell scripting isn't a terribly advanced programming language,
so there's a lot of redundancy in the code; in fact all of the commands use the
same basic template of</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">repo_type</span><span class="o">=</span><span class="k">$(</span>get_repo_type<span class="k">)</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;1&quot;</span> <span class="o">=</span> <span class="s2">&quot;$repo_type&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>   <span class="c"># git commands go here</span>
</span><span class='line'><span class="k">elif</span> <span class="o">[</span> <span class="s2">&quot;2&quot;</span> <span class="o">=</span> <span class="s2">&quot;$repo_type&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>   <span class="c"># hg commands go here</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">   </span>not_a_repo
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I thought of some other ways to do this, but they all ended up being far more
complex and time-consuming than just knocking it out like this. This style is
also POSIX-compatible, meaning it can be used with really any shell.</p>

<p>Another feature of note is that I've ensured to pass through the shell variable
<code>$@</code>, which means any arguments are passed directly to the command; this lets
you still enable the full use of the specialised commands without having to
mentally switch context between just typing the shortened command and the full
one.</p>

<p>So, let's look at what commands are supported (use <code>vcshelp</code> to list them):</p>

<ul>
<li>commit</li>
<li>add</li>
<li>pull</li>
<li>push</li>
<li>checkout</li>
<li>fetch</li>
<li>clog</li>
<li>which_dvcs</li>
<li>vcdiff</li>
</ul>


<p>For the most part, they are wrappers around the $scm version of the command,
passing through any arguments as before. The last three aren't (but do pass
through any command line options as appropriate):</p>

<ul>
<li><code>clog</code> is a shortcut for 'commit log', and shows the $scm log. For mercurial,
it will pipe it to less (by default, hg doesn't).</li>
<li><code>which_dvcs</code> is a wrapper around get_repo_type to print the name of the SCM
instead of the numeric value used in the functions.</li>
<li><code>vcdiff</code> is a version control diff; like <code>clog</code>, it will pipe hg diff to less.</li>
</ul>


<p>There are a few commands that aren't documented in <code>vcshelp</code>:
* <code>co</code> is an alias for <code>checkout</code>
* <code>st</code> is a variant of status that shows only tracked files</p>

<p>I've found this system to work out pretty well for me, mostly because it
requires less mental power to handle the basic SCM workflow. It also satisfies
my coder's itch to remove unnecessary code (i.e. always having to prefix <code>git</code>
or <code>hg</code> to source control commands) by making the shell "aware" of which SCM
I'm using at the time.</p>

<p>Thanks go to Chris LePetit, who suggested I write the article.
<a href="http://samuelgoodwin.tumblr.com">Samuel Goodwin</a> and
<a href="https://twitter.com/imwally">Wally Jones</a> proofread it for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analytics Win]]></title>
    <link href="http://kisom.github.com/blog/2012/02/21/analytics-win/"/>
    <updated>2012-02-21T12:15:00+01:00</updated>
    <id>http://kisom.github.com/blog/2012/02/21/analytics-win</id>
    <content type="html"><![CDATA[<p>Inexplicably, for the longest time I was reticent to enable any sort of
analytics on my personal site. Partially because, to be honest, it's not
as if my blog is well read (or so I assume, but soon I'll have numbers
to back that claim up). As I try to get more involved in the world, I've
found my site is useful as a portfolio of sorts - not so much in the way
of "look at my sexy site" as "here's the cool things I do". I've noticed
that <a href="https://github.com">GitHub</a> has had some DDoS issues lately, and as
I host this site on my <a href="http://pages.github.com/">GitHub pages</a>, I wanted
to minimise any potential downtimes. I'd also noticed that some of my
pages were a bit on the slow side to load, as <a href="http://octopress.org/">Octopress</a>
appears to load quite a bit of javascript. I admit to being a fan of many of
the asides, and to have written some of my own.</p>

<!-- more -->


<p>In order to improve this situation, I took two steps:</p>

<ol>
<li>I enabled Google Analytics:
while I'm not a particular fan of feeding the privacy black hole with even more
data, it appears to be the only viable option at this time. I have been eyeing
<a href="http://haveamint.com/">Mint</a>, but I am abstaining from purchasing anything new
until I leave the Netherlands (in a little over a week) just to stay on the
safe side of my bank account. (30 USD may not sound like much, but that's about
two days worth of döner or shawarma for dinner.)</li>
<li>I set up the site on CloudFlare.</li>
</ol>


<p>What I didn't realise is that several of my older posts actually rank high on
Google's search results; however, the link on Google points to the old url
from when I was using <a href="http://blaze.blackened.cz">blazeblogger</a>. Because the
content is actually useful documentation, I was able to set up redirects so
that the page is back online and people can use the information now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Aquamacs for Clojure]]></title>
    <link href="http://kisom.github.com/blog/2012/02/02/setting-up-aquamacs-for-clojure/"/>
    <updated>2012-02-02T20:03:00+01:00</updated>
    <id>http://kisom.github.com/blog/2012/02/02/setting-up-aquamacs-for-clojure</id>
    <content type="html"><![CDATA[<p>It took me a bit to get my <a href="http://www.aquamacs.org">Aquamacs</a> install
up and ready to do <a href="http://www.clojure.org">Clojure</a>
and <a href="http://common-lisp.net/project/slime/">SLIME</a>, so I figured I'd jot
some notes down for future me and anyone who happens to be listening.</p>

<!-- more -->


<p>I assume Aquamacs has been downloaded and
<a href="https://github.com/technomancy/leiningen">leiningen</a> is installed. First,
in a terminal, you'll need to install swank-clojure. As of today, the
current version is 1.4.0, but I strongly recommend you check the README
to see if there's a new version out. In the shell,
<code>lein plugin install swank-clojure "1.4.0"</code>.</p>

<p>I use <a href="http://marmalade-repo.org/">Marmalade</a> for package management, so
the first thing to do is to add Marmalade to Aquamacs. Open up
<code>"~/Library/Preferences/Aquamacs\ Emacs/Preferences.el"</code> in your editor
of choice (I used <a href="https://code.google.com/p/macvim/">MacVim</a>), and add
the folowing:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; Marmalade</span>
</span><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;package</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">add-to-list</span> <span class="ss">&#39;package-archives&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>         <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;marmalade&quot;</span> <span class="o">.</span> <span class="s">&quot;http://marmalade-repo.org/packages/&quot;</span><span class="p">))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">package-initialize</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I'm assuming you don't have <code>package.el</code> installed yet, so make sure to
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;code>curl "http://repo.or.cz/w/emacs.git/blob_plain/1a0a666f941c99882093d7bd08ced15033bc3f0c:/lisp/emacs-lisp/package.el" &gt; ~/Library/Preferences/Aquamacs\ Emacs/package.el&lt;/code></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now fire up Aquamacs (or evaluate the additions to <code>Preferences.el</code> with
<code>C-x C-e</code>. <code>clojure-mode</code> needs to be installed, either via <code>M-x package-list-packages</code>,
and marking <code>clojure-mode</code> for installation (with <code>i</code>) and installing
(with <code>x</code>), or with <code>M-x package-refresh-contents</code> followed by
<code>M-x package-install clojure-mode</code>. I also like <code>paredit</code> but you
might not, it takes some getting used to.</p>

<p>Now, open up a file in your lein'd project and use <code>M-x clojure-jack-in</code>.
You might see some errors pop up in your <code>*Compile-Log*</code> buffer, but you
should be very shortly greeted with a REPL.</p>

<p>Happy hacking!</p>

<h2>The End Result</h2>

<p>Here's a screenshot of how it turned out (click to view it full-size):
<a href="/images/aquamacs-clojure.png"><img src="/images/aquamacs-clojure.t.png" alt="aquamacs-clojure thumbnail" /></a></p>

<p>I usually run aquamacs full-screen with two panes, left-side for editing
source code and right-size for SLIME.</p>

<h2>References</h2>

<p>I patched together my knowledge from a couple of pages:</p>

<ul>
<li>Incanter's article <a href="http://data-sorcery.org/2009/12/20/getting-started/">Setting up Clojure, Incanter, Emacs, Slime, Swank, and Paredit</a></li>
<li>The Doctor What's article <a href="http://docwhat.org/2011/08/aquamacs-2-3a-and-marmalade/">Aquamacs 2.3a and Marmalade</a></li>
<li>Phil Hagelberg's <a href="https://github.com/technomancy/swank-clojure">swank-clojure</a> <a href="https://github.com/technomancy/swank-clojure/blob/master/README.md">README</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[starting ocaml]]></title>
    <link href="http://kisom.github.com/blog/2011/05/29/starting-ocaml/"/>
    <updated>2011-05-29T00:00:00+02:00</updated>
    <id>http://kisom.github.com/blog/2011/05/29/starting-ocaml</id>
    <content type="html"><![CDATA[<p>i recently started learning
<a href="http://caml.inria.fr/index.en.html">objective caml</a>. while it may be
better documented than say standard ML, i've still had a few difficulties
getting started. i'll be keeping notes here, and my github account will
probably document quite a number of lessons learned.</p>

<p>one of the most difficult parts about starting development in ocaml is
that the best development environment i've found so far is emacs with
tuareg-mode. i personally hate emacs (being a vim or straight vi/nvi type of
character) but tuareg-mode is extremely useful. (using emacs also has the
side-effect of starting me on org-mode). getting started on ubuntu was fairly
easy:   <br/>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apt-get install ocaml emacs23 tuareg-mode ocaml-findlib
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>as well as a number of the ocaml libraries (which i recommend using aptitude
to look through and install). i ended up installing the Jane Street core and
the netclient libraries right off that bat.</p>

<p>on OS X using macports, i just had to</p>

<pre><code>    `port install ocaml caml-findlib tuareg-mode.el`
</code></pre>

<p>there are a couple other libraries you can install (like netclient) as well.</p>

<h2>build notes:    </h2>

<ul>
<li>when building new module interfaces (<em>.cmi), make sure to do   <br/>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ocamlc -o <span class="k">$(</span>LIBDIR<span class="k">)</span>/<span class="nv">$&lt;</span>/em&gt;.cmi -c <span class="k">$(</span>SRCDIR<span class="k">)</span>/<span class="nv">$*</span>.mli<span class="sb">`</span>   &lt;br/&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
<li>building %.cmx (i.e. <em>.ml files):   <br/>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">$(</span>FIND<span class="k">)</span> <span class="k">$(</span>NATIVE<span class="k">)</span> -o <span class="nv">$@</span> -I <span class="k">$(</span>LIBDIR<span class="k">)</span> <span class="k">$(</span>INCDIRS<span class="k">)</span> -c <span class="k">$(</span>SRCDIR<span class="k">)</span>/<span class="nv">$&lt;</span>/em&gt;.ml<span class="sb">`</span>  &lt;br/&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing ctrans]]></title>
    <link href="http://kisom.github.com/blog/2011/05/13/presenting-ctrans/"/>
    <updated>2011-05-13T00:00:00+02:00</updated>
    <id>http://kisom.github.com/blog/2011/05/13/presenting-ctrans</id>
    <content type="html"><![CDATA[<h2>intro</h2>

<p>i just finished getting <strong><a href="https://www.github.com/kisom/ctrans">ctrans</a></strong> into
a workable state. what is <strong>ctrans</strong>? in short, it translates comments in a
foreign-language (i.e. russian) to english using google translate and some
regex magic.</p>

<p>the project started when one of my buddies and i started looking at the zeus
source code. <a href="https://www.github.com/clarke187/">zenmower</a> got the first peek
and mentioned all the comments being in russian; i started poking around looking
for something to translate the comments. after ten minutes i couldn't find
anything, so as they say, if you want something done do it yourself. i snagged
<a href="http://www.halotis.com/2009/09/15/google-translate-api-python-script/">a python snippet to run google translate</a>
on text passed in. it seemed to work pretty well and handled breaking the text
up into chunks, so i cleaned it up a bit to fit my coding standards and started
writing code to plug into that.</p>

<p>i slapped together some regexes to scan for c-style comments and later
scripting-language (i.e. python, perl, ruby) style '#' comments. a couple of
iterations later, i had some mostly-working code that featured
* file extension-based comment scanning (i.e. look for c-style comments in
.cpp files, script-style comments in .pl files)
* a directory scanning mode and a single-file mode
* multiprocess directory scanning: the script builds a list of files that should
be scanned (based solely on file extensions) and maps a pool of workers to scan
through that list of files. i'll talk more on the multiprocessing design later.</p>

<h2>unicode notes</h2>

<p>this code worked pretty well on the test files i generated, but choked on the
zeus source, throwing the dreaded
<a href="http://wiki.python.org/moin/UnicodeDecodeError"><code>UnicodeDecodeError</code></a> and
<a href="http://wiki.python.org/moin/UnicodeEncodeError"><code>UnicodeEncodeError</code></a>. after
digging around and finding <a href="http://effbot.org/zone/unicode-objects.htm">some</a>
<a href="http://stackoverflow.com/questions/3588083/unicodeencodeerror-ascii-codec-cant-encode-character-u-xa3">excellent</a>
<a href="http://farmdev.com/talks/unicode/">resources</a> on
<a href="http://www.joelonsoftware.com/articles/Unicode.html">unicode</a> that helped jog
my memory and clarify a few things i wasn't thinking about. i came up with a
few notes for dealing with different file encodings:</p>

<ol>
<li>you decode a stream of bytes being read into the program from whatever
encoding the file came in (i.e. utf-8) to a unicode string.</li>
<li>you encode a unicode string to whatever file encoding you want it output as;
for most files, you will likely want utf-8. if you want to print the string, it
needs to be the same encoding as your terminal (i.e.
<code>sys.getdefaultencoding()</code>).</li>
<li>it matters what encoding the file you are reading is. this was a problem for
me, since the zeus source files were often not in utf-8 or ascii.</li>
<li>file encoding detection if you really don't know what format the file is in
is extremely difficult and programatically doing this is akin to black magic.
the <a href="http://chardet.feedparser.org/">chardet module</a> is very useful but not
always correct. case in point - the two test source files that ship with ctrans
are saved as utf-8, but watch what happens when we try to guess the encoding on
the python test file:</li>
</ol>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>In [6]: ctrans.guess_encoding('./test.py')
</span><span class='line'>[+] attemtping to autodetect coding for ./test.py
</span><span class='line'>[+] detected coding ISO-8859-2 for file ./test.py (confidence: 0.90)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>that's a 90% confidence that the file uses a different encoding than it actually
does. automagic should be used sparingly and with supervision.</p>

<h2>concurrency notes</h2>

<p>one design issue that came up is that of concurrency. i had to decide whether to
launch new processes for each network connection (i.e. chunk of text being
translated) or per-file (resulting in several network connections in sequence
per process). the network connections were definitely the bottleneck, but i had
to make sure the text would be returned in the proper sequence (order is <em>sort
of</em> important in source files). in this case, the simplest answer to ensure
the correctness of information, and given that files are the smallest <em>atomic</em>
units, is to launch a new process to translate a file. given a list of the files
that need to be translated, python's multiprocessing.Pool.map() makes it
incredibly easy to set up a worker pool.</p>

<p>concurrency also factored into how the file encoding guessing would work -
my original idea was to modify the global variable <code>decodeas</code> and set this based
on whatever encoding the file was guessed to be. however, proper concurrency
requires locking and ensuring the consistency of that variable's state. it
requires far less work to return the encoding as a string and set a local
variable in the <code>scan_file()</code> function - the encoding string takes a minimal
amount of memory and avoids the variable getting into an inconsistent state.</p>

<h2>end notes</h2>

<p>ctrans is still in a fairly rough state, but i think given the original goals -
giving zenmower and me fast english translations (as best as could be done) of
the comments in the source - the program does this fairly well. of course,
it stills requires verification to ensure that the proper encodings are being
used but it does work fairly quickly, the biggest slowdown typically being the
network speed.</p>

<p>the first commit was 2011-05-11 in the afternoon and the latest commit with
what i consider revison 1.0 was committed 2011-05-13 - two days of coding,
mostly hampered by network issues at home, to get working code.</p>

<p>the source code is available at the github repo linked at the beginning. one
planned improvement is to guess file encodings based on the average encoding
detected in a directory (i.e. to compensate for possible variations in detected
encoding and baesd on the assumption that encoding doesn't vary over a
directory). the code also could be cleaned up quite a bit.</p>

<p>the important thing is that i have working code to show...</p>
]]></content>
  </entry>
  
</feed>
