---
layout: post
title: RGTDD
date: 2011-07-04 00:00
comments: true
categories: productivity
---

One of the most important parts of becoming a useful developer is to find a
workflow that maximises productivty. There are plenty of methodologies and tools
people have come up with just for this - Agile, XP, BDD, TDD, RDD, and many 
others. Of course, most everyone has their own unique flavour, and of course
I'm going to talk about mine. I've spent a lot of time trying different things 
(and too much time going back to just grinding out code). This is the first post 
of a milti-part series on how I've increased my productivity and what I do to 
get things done. Unfortunately, my personal projects are sort of haphazard still,
but I have enjoyed success with this at work.

RGTDD has made a difference in how I develop code and stay productive; 
furthermore, above just using a specific development methodology, I've found 
certain tools to assist me in being productive.

<!-- more -->

So, RGTDD. It stands for README-generated Test-Driven Development. I took Tom
Preston-Werner's [README-driven development](http://tom.preston-werner.com/2010/08/23/readme-driven-development.html)
and adapted it to my own use. Without rehashing his post, READMEs factor in like
this: once the project is started, the first task to do is write the README. Once
the README is written, you lock it in and should not be changed except to fix
typos and spelling errors. This has several advantages:

0. First, you end up having a single introductory piece of documentation. This 
file contains the justification for you program, a quick introduction to its 
features, and usage information.

0. Second, locking in the README means you prevent feature creep. You contract
yourself to the end user (yourself, future end users, the client, etc...) to
implement specifically the features in the README. As a rule of thumb, each
iteration of the README should have no more than five features - each feature
should be a concrete task. If the tasks are particularly complex, I generally
avoid implementing more than three. I have found for myself that trying to 
implement much more than that results in code and projects that stagnate or 
quickly become spaghetti code.

0. Third, you know what you need to code and what the code should specifically 
do. I've found that a lot of times I have an idea for project X, but only have
a vague of idea of what it will do. It is part of good engineering to have a 
well-laid out design and path for the project to direct development. I have found
this helps me to keep my code from getting overgrown.

The README at this point now specifies an interface for users to interact with
the code. From here, you begin writing tests that cover the features. As you 
begin writing these tests, you will likely figure out other components to the
code. You start writing tests from these. At this point, using the README as a 
guiding document, I switch to a test-driven mode. Once the tests perform as 
they should (including tests that are expected to fail), I consider this a 
release. (I'll write a post later on about what I'm doing for releases).

That's a quick introduction to the project management methodology I use. I'll
cover some specific tools to help out with various languages, my version 
control and release methods, things I wasn't taught in school, and what I've 
found to help me keep my life organised.


