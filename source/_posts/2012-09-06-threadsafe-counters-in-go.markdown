---
layout: post
title: "Threadsafe Counters in Go"
tagline: "An Introudction to Channels and Goroutines"
date: 2012-09-06 18:10
comments: true
categories: [golang, go, hacking, development, concurrency]
---

One of my current projects requires a counter that delivers a monotonically
increasing sequence number to a number of threads; this counter has the
following properties:

0. the packets that consume counter values must receive the packets in
a monotonically increasing order; the end user rejects any sequence
number that is lower than the last highest received sequence number.

0. packets are generated by several threads.

0. the sequence number is shared across all threads.

The sequence number is particularly critical in this project; it is a library
for interfacing with and controlling a UAV (a microdrone, in fact). If the
are sent in the wrong order (resulting in the drone rejecting potentially 
critical commands or executing them out of sequence), it could enter an
"unstable flight pattern" (which usually results in the drone establishing an
"inverted resting position").

<!-- more -->

In most languages, this sequence number would be a mutex-protected resource. For
example, in [Python](#note_1) it would look something like:

{% codeblock lang:python %}
import threading

def nextSequenceInit():
    """Return the next sequence number."""
    n = 0
    mutex = threading.Lock()
    while True:
        with mutex:
            n += 1
            yield n

nextSequence = nextSequenceInit()

def consumer():
    for i in range(4):
        print nextSequence.next()
        time.sleep(random.randint(1, 10))

for i in range(3):
    t = threading.Thread(target=consumer)
    t.start()

{% endcodeblock %}

When this runs, you will see the numbers from 1 to 12 printed out in order,
guaranteeing that sequence numbers will be generated properly.

## The Go Way
In Go, we use goroutines and channels to share memory by communicating (over
channels) as opposed to the more traditional communicating by sharing memory
(which requires locking and other tricks to guarantee that mutable data 
maintains its integrity. What does this look like here? Let's take a look at a
code example, and then I'll walk through it. In the library, there is a struct 
called `Drone` with a number of methods that operate on that struct. The
relevant part of the struct is:

{% codeblock lang:go %}
type Drone struct {
        // fields filtered out
	sequence <-chan int32       // read-only channel
        // ...
}
{% endcodeblock %}

We use the `sequencer` function as the sequence generator, and specify that the
channel is write-only:

{% codeblock lang:go %}
func sequencer(seqChan chan<- int32) {
        var seq int32 = 0
        for {
                seq++
                seqChan <- seq
        }
}
{% endcodeblock %}

In the initialisation code, we create the channel and launch the sequencer (the
docs for the API the library is targeted to specifically state that the
sequence number starts at one every time the drone is reset):

{% codeblock lang:go %}
func Init() *Drone {
        // other initialisation code
        sequence := make(chan int32, 0)
	dron.sequence = sequence
        go sequencer(sequence)
}
{% endcodeblock %}

And lastly we need a way to access the sequence numbers:

{% codeblock lang:go %}
func (dron *Drone) nextSequence() int32 {
        return <-dron.sequence
}
{% endcodeblock %}

How does this work? The core of this solution is our channel, which
stores [32-bit](#note_2) integer values. When we create it, using
`make`, we give it a capacity of 1. The for loop in the `sequencer` function
loads new values into the channel as soon as they can be consumed; a
capacity of one means that only value is buffered into the channel at a time,
guaranteeing sequential numbering. Note that a send on the channel will block
until the channel has room for more elements, so in effect, this function will
send a value onto the channel and wait for it to be consumed. Channel receives
will similarly block until a value is read. This means our sequencer will
send the new counter value and wait for it to be consumed, and clients that
require sequence numbers will wait until one is ready.

All together, this might look like:

{% codeblock lang:go %}
package main

import (
        "fmt"
        "math/rand"
        "time"
)

const workers = 3

func sequencer(c chan<- int) {
        counter := 0
        for {
                counter++
                c <- counter 
        }
}

func consumer(id int, c <-chan int) {
        for { 
                dur, _ := time.ParseDuration(fmt.Sprintf("%ds", rand.Intn(5)))
                time.Sleep(dur)
                fmt.Println(id, ": ", <-c)
        }
}

func main() {
        c := make(chan int, 1)
        go sequencer(c)
        for i := 0; i < workers; i++ {
                go consumer(i, c)
        }
        time.Sleep(10000 * time.Millisecond)       // Give it time to do its thing...
}
{% endcodeblock %}

### Notes:
<a id="note_1"></a>   
1. note that the Python multiprocessing library won't work
properly here: it creates entirely new processes.

<a id="note_2"></a>    
2. Typically, Go programs specify an `int` instead
of an integer of a specific width. However, the specification for this
API specifically requires 32 bits to be sent on the wire; Go expects
to use `int` internally, but provdes `int<n>` for interfacing with the
outside world. 

